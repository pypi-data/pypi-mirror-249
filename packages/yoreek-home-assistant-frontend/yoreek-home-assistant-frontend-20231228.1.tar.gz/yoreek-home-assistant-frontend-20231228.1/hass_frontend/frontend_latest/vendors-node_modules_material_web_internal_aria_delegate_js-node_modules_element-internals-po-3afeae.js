/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
export const id = "vendors-node_modules_material_web_internal_aria_delegate_js-node_modules_element-internals-po-3afeae";
export const ids = ["vendors-node_modules_material_web_internal_aria_delegate_js-node_modules_element-internals-po-3afeae"];
export const modules = {

/***/ "./node_modules/@material/web/internal/aria/aria.js":
/*!**********************************************************!*\
  !*** ./node_modules/@material/web/internal/aria/aria.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ARIA_ATTRIBUTES: () => (/* binding */ ARIA_ATTRIBUTES),\n/* harmony export */   ARIA_PROPERTIES: () => (/* binding */ ARIA_PROPERTIES),\n/* harmony export */   ariaPropertyToAttribute: () => (/* binding */ ariaPropertyToAttribute),\n/* harmony export */   isAriaAttribute: () => (/* binding */ isAriaAttribute)\n/* harmony export */ });\n/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * Accessibility Object Model reflective aria properties.\n */\nconst ARIA_PROPERTIES = ['ariaAtomic', 'ariaAutoComplete', 'ariaBusy', 'ariaChecked', 'ariaColCount', 'ariaColIndex', 'ariaColSpan', 'ariaCurrent', 'ariaDisabled', 'ariaExpanded', 'ariaHasPopup', 'ariaHidden', 'ariaInvalid', 'ariaKeyShortcuts', 'ariaLabel', 'ariaLevel', 'ariaLive', 'ariaModal', 'ariaMultiLine', 'ariaMultiSelectable', 'ariaOrientation', 'ariaPlaceholder', 'ariaPosInSet', 'ariaPressed', 'ariaReadOnly', 'ariaRequired', 'ariaRoleDescription', 'ariaRowCount', 'ariaRowIndex', 'ariaRowSpan', 'ariaSelected', 'ariaSetSize', 'ariaSort', 'ariaValueMax', 'ariaValueMin', 'ariaValueNow', 'ariaValueText'];\n/**\n * Accessibility Object Model aria attributes.\n */\nconst ARIA_ATTRIBUTES = ARIA_PROPERTIES.map(ariaPropertyToAttribute);\n/**\n * Checks if an attribute is one of the AOM aria attributes.\n *\n * @example\n * isAriaAttribute('aria-label'); // true\n *\n * @param attribute The attribute to check.\n * @return True if the attribute is an aria attribute, or false if not.\n */\nfunction isAriaAttribute(attribute) {\n  return attribute.startsWith('aria-');\n}\n/**\n * Converts an AOM aria property into its corresponding attribute.\n *\n * @example\n * ariaPropertyToAttribute('ariaLabel'); // 'aria-label'\n *\n * @param property The aria property.\n * @return The aria attribute.\n */\nfunction ariaPropertyToAttribute(property) {\n  return property.replace('aria', 'aria-')\n  // IDREF attributes also include an \"Element\" or \"Elements\" suffix\n  .replace(/Elements?/g, '').toLowerCase();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@material/web/internal/aria/aria.js\n");

/***/ }),

/***/ "./node_modules/@material/web/internal/aria/delegate.js":
/*!**************************************************************!*\
  !*** ./node_modules/@material/web/internal/aria/delegate.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   requestUpdateOnAriaChange: () => (/* binding */ requestUpdateOnAriaChange)\n/* harmony export */ });\n/* harmony import */ var _aria_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./aria.js */ \"./node_modules/@material/web/internal/aria/aria.js\");\n/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Sets up a `ReactiveElement` constructor to enable updates when delegating\n * aria attributes. Elements may bind `this.aria*` properties to `aria-*`\n * attributes in their render functions.\n *\n * This function will:\n * - Call `requestUpdate()` when an aria attribute changes.\n * - Add `role=\"presentation\"` to the host.\n *\n * NOTE: The following features are not currently supported:\n * - Delegating IDREF attributes (ex: `aria-labelledby`, `aria-controls`)\n * - Delegating the `role` attribute\n *\n * @example\n * class XButton extends LitElement {\n *   static {\n *     requestUpdateOnAriaChange(XButton);\n *   }\n *\n *   protected override render() {\n *     return html`\n *       <button aria-label=${this.ariaLabel || nothing}>\n *         <slot></slot>\n *       </button>\n *     `;\n *   }\n * }\n *\n * @param ctor The `ReactiveElement` constructor to patch.\n */\nfunction requestUpdateOnAriaChange(ctor) {\n  for (const ariaProperty of _aria_js__WEBPACK_IMPORTED_MODULE_0__.ARIA_PROPERTIES) {\n    ctor.createProperty(ariaProperty, {\n      attribute: (0,_aria_js__WEBPACK_IMPORTED_MODULE_0__.ariaPropertyToAttribute)(ariaProperty),\n      reflect: true\n    });\n  }\n  ctor.addInitializer(element => {\n    const controller = {\n      hostConnected() {\n        element.setAttribute('role', 'presentation');\n      }\n    };\n    element.addController(controller);\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3dlYi9pbnRlcm5hbC9hcmlhL2RlbGVnYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7O0FBUUE7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBOEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ob21lLWFzc2lzdGFudC1mcm9udGVuZC9kZWxlZ2F0ZS50cz8wNjdmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIzIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHtSZWFjdGl2ZUVsZW1lbnR9IGZyb20gJ2xpdCc7XG5cbmltcG9ydCB7QVJJQV9QUk9QRVJUSUVTLCBhcmlhUHJvcGVydHlUb0F0dHJpYnV0ZX0gZnJvbSAnLi9hcmlhLmpzJztcblxuLyoqXG4gKiBTZXRzIHVwIGEgYFJlYWN0aXZlRWxlbWVudGAgY29uc3RydWN0b3IgdG8gZW5hYmxlIHVwZGF0ZXMgd2hlbiBkZWxlZ2F0aW5nXG4gKiBhcmlhIGF0dHJpYnV0ZXMuIEVsZW1lbnRzIG1heSBiaW5kIGB0aGlzLmFyaWEqYCBwcm9wZXJ0aWVzIHRvIGBhcmlhLSpgXG4gKiBhdHRyaWJ1dGVzIGluIHRoZWlyIHJlbmRlciBmdW5jdGlvbnMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsOlxuICogLSBDYWxsIGByZXF1ZXN0VXBkYXRlKClgIHdoZW4gYW4gYXJpYSBhdHRyaWJ1dGUgY2hhbmdlcy5cbiAqIC0gQWRkIGByb2xlPVwicHJlc2VudGF0aW9uXCJgIHRvIHRoZSBob3N0LlxuICpcbiAqIE5PVEU6IFRoZSBmb2xsb3dpbmcgZmVhdHVyZXMgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkOlxuICogLSBEZWxlZ2F0aW5nIElEUkVGIGF0dHJpYnV0ZXMgKGV4OiBgYXJpYS1sYWJlbGxlZGJ5YCwgYGFyaWEtY29udHJvbHNgKVxuICogLSBEZWxlZ2F0aW5nIHRoZSBgcm9sZWAgYXR0cmlidXRlXG4gKlxuICogQGV4YW1wbGVcbiAqIGNsYXNzIFhCdXR0b24gZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAqICAgc3RhdGljIHtcbiAqICAgICByZXF1ZXN0VXBkYXRlT25BcmlhQ2hhbmdlKFhCdXR0b24pO1xuICogICB9XG4gKlxuICogICBwcm90ZWN0ZWQgb3ZlcnJpZGUgcmVuZGVyKCkge1xuICogICAgIHJldHVybiBodG1sYFxuICogICAgICAgPGJ1dHRvbiBhcmlhLWxhYmVsPSR7dGhpcy5hcmlhTGFiZWwgfHwgbm90aGluZ30+XG4gKiAgICAgICAgIDxzbG90Pjwvc2xvdD5cbiAqICAgICAgIDwvYnV0dG9uPlxuICogICAgIGA7XG4gKiAgIH1cbiAqIH1cbiAqXG4gKiBAcGFyYW0gY3RvciBUaGUgYFJlYWN0aXZlRWxlbWVudGAgY29uc3RydWN0b3IgdG8gcGF0Y2guXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXF1ZXN0VXBkYXRlT25BcmlhQ2hhbmdlKGN0b3I6IHR5cGVvZiBSZWFjdGl2ZUVsZW1lbnQpIHtcbiAgZm9yIChjb25zdCBhcmlhUHJvcGVydHkgb2YgQVJJQV9QUk9QRVJUSUVTKSB7XG4gICAgY3Rvci5jcmVhdGVQcm9wZXJ0eShhcmlhUHJvcGVydHksIHtcbiAgICAgIGF0dHJpYnV0ZTogYXJpYVByb3BlcnR5VG9BdHRyaWJ1dGUoYXJpYVByb3BlcnR5KSxcbiAgICAgIHJlZmxlY3Q6IHRydWUsXG4gICAgfSk7XG4gIH1cblxuICBjdG9yLmFkZEluaXRpYWxpemVyKChlbGVtZW50KSA9PiB7XG4gICAgY29uc3QgY29udHJvbGxlciA9IHtcbiAgICAgIGhvc3RDb25uZWN0ZWQoKSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdyb2xlJywgJ3ByZXNlbnRhdGlvbicpO1xuICAgICAgfSxcbiAgICB9O1xuXG4gICAgZWxlbWVudC5hZGRDb250cm9sbGVyKGNvbnRyb2xsZXIpO1xuICB9KTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@material/web/internal/aria/delegate.js\n");

/***/ }),

/***/ "./node_modules/element-internals-polyfill/dist/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/element-internals-polyfill/dist/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n(function (exports) {\n  'use strict';\n\n  const refMap = new WeakMap();\n  const validityMap = new WeakMap();\n  const hiddenInputMap = new WeakMap();\n  const internalsMap = new WeakMap();\n  const validationMessageMap = new WeakMap();\n  const formsMap = new WeakMap();\n  const shadowHostsMap = new WeakMap();\n  const formElementsMap = new WeakMap();\n  const refValueMap = new WeakMap();\n  const upgradeMap = new WeakMap();\n  const shadowRootMap = new WeakMap();\n  const validationAnchorMap = new WeakMap();\n  const documentFragmentMap = new WeakMap();\n  const connectedCallbackMap = new WeakMap();\n  const validityUpgradeMap = new WeakMap();\n  const aom = {\n    ariaAtomic: 'aria-atomic',\n    ariaAutoComplete: 'aria-autocomplete',\n    ariaBusy: 'aria-busy',\n    ariaChecked: 'aria-checked',\n    ariaColCount: 'aria-colcount',\n    ariaColIndex: 'aria-colindex',\n    ariaColIndexText: 'aria-colindextext',\n    ariaColSpan: 'aria-colspan',\n    ariaCurrent: 'aria-current',\n    ariaDisabled: 'aria-disabled',\n    ariaExpanded: 'aria-expanded',\n    ariaHasPopup: 'aria-haspopup',\n    ariaHidden: 'aria-hidden',\n    ariaInvalid: 'aria-invalid',\n    ariaKeyShortcuts: 'aria-keyshortcuts',\n    ariaLabel: 'aria-label',\n    ariaLevel: 'aria-level',\n    ariaLive: 'aria-live',\n    ariaModal: 'aria-modal',\n    ariaMultiLine: 'aria-multiline',\n    ariaMultiSelectable: 'aria-multiselectable',\n    ariaOrientation: 'aria-orientation',\n    ariaPlaceholder: 'aria-placeholder',\n    ariaPosInSet: 'aria-posinset',\n    ariaPressed: 'aria-pressed',\n    ariaReadOnly: 'aria-readonly',\n    ariaRelevant: 'aria-relevant',\n    ariaRequired: 'aria-required',\n    ariaRoleDescription: 'aria-roledescription',\n    ariaRowCount: 'aria-rowcount',\n    ariaRowIndex: 'aria-rowindex',\n    ariaRowIndexText: 'aria-rowindextext',\n    ariaRowSpan: 'aria-rowspan',\n    ariaSelected: 'aria-selected',\n    ariaSetSize: 'aria-setsize',\n    ariaSort: 'aria-sort',\n    ariaValueMax: 'aria-valuemax',\n    ariaValueMin: 'aria-valuemin',\n    ariaValueNow: 'aria-valuenow',\n    ariaValueText: 'aria-valuetext',\n    role: 'role'\n  };\n  const initAom = (ref, internals) => {\n    for (let key in aom) {\n      internals[key] = null;\n      let closureValue = null;\n      const attributeName = aom[key];\n      Object.defineProperty(internals, key, {\n        get() {\n          return closureValue;\n        },\n        set(value) {\n          closureValue = value;\n          if (ref.isConnected) {\n            ref.setAttribute(attributeName, value);\n          } else {\n            upgradeMap.set(ref, internals);\n          }\n        }\n      });\n    }\n  };\n  function initNode(node) {\n    const internals = internalsMap.get(node);\n    const {\n      form\n    } = internals;\n    initForm(node, form, internals);\n    initLabels(node, internals.labels);\n  }\n  const walkFieldset = (node, firstRender = false) => {\n    const walker = document.createTreeWalker(node, NodeFilter.SHOW_ELEMENT, {\n      acceptNode(node) {\n        return internalsMap.has(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n      }\n    });\n    let current = walker.nextNode();\n    const isCallNecessary = !firstRender || node.disabled;\n    while (current) {\n      if (current.formDisabledCallback && isCallNecessary) {\n        setDisabled(current, node.disabled);\n      }\n      current = walker.nextNode();\n    }\n  };\n  const disabledOrNameObserverConfig = {\n    attributes: true,\n    attributeFilter: ['disabled', 'name']\n  };\n  const disabledOrNameObserver = mutationObserverExists() ? new MutationObserver(mutationsList => {\n    for (const mutation of mutationsList) {\n      const target = mutation.target;\n      if (mutation.attributeName === 'disabled') {\n        if (target.constructor['formAssociated']) {\n          setDisabled(target, target.hasAttribute('disabled'));\n        } else if (target.localName === 'fieldset') {\n          walkFieldset(target);\n        }\n      }\n      if (mutation.attributeName === 'name') {\n        if (target.constructor['formAssociated']) {\n          const internals = internalsMap.get(target);\n          const value = refValueMap.get(target);\n          internals.setFormValue(value);\n        }\n      }\n    }\n  }) : {};\n  function observerCallback(mutationList) {\n    mutationList.forEach(mutationRecord => {\n      const {\n        addedNodes,\n        removedNodes\n      } = mutationRecord;\n      const added = Array.from(addedNodes);\n      const removed = Array.from(removedNodes);\n      added.forEach(node => {\n        if (internalsMap.has(node) && node.constructor['formAssociated']) {\n          initNode(node);\n        }\n        if (upgradeMap.has(node)) {\n          const internals = upgradeMap.get(node);\n          const aomKeys = Object.keys(aom);\n          aomKeys.filter(key => internals[key] !== null).forEach(key => {\n            node.setAttribute(aom[key], internals[key]);\n          });\n          upgradeMap.delete(node);\n        }\n        if (validityUpgradeMap.has(node)) {\n          const internals = validityUpgradeMap.get(node);\n          node.setAttribute('internals-valid', internals.validity.valid.toString());\n          node.setAttribute('internals-invalid', (!internals.validity.valid).toString());\n          node.setAttribute('aria-invalid', (!internals.validity.valid).toString());\n          validityUpgradeMap.delete(node);\n        }\n        if (node.localName === 'form') {\n          const formElements = formElementsMap.get(node);\n          const walker = document.createTreeWalker(node, NodeFilter.SHOW_ELEMENT, {\n            acceptNode(node) {\n              return internalsMap.has(node) && node.constructor['formAssociated'] && !(formElements && formElements.has(node)) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n            }\n          });\n          let current = walker.nextNode();\n          while (current) {\n            initNode(current);\n            current = walker.nextNode();\n          }\n        }\n        if (node.localName === 'fieldset') {\n          var _disabledOrNameObserv;\n          (_disabledOrNameObserv = disabledOrNameObserver.observe) === null || _disabledOrNameObserv === void 0 || _disabledOrNameObserv.call(disabledOrNameObserver, node, disabledOrNameObserverConfig);\n          walkFieldset(node, true);\n        }\n      });\n      removed.forEach(node => {\n        const internals = internalsMap.get(node);\n        if (internals && hiddenInputMap.get(internals)) {\n          removeHiddenInputs(internals);\n        }\n        if (shadowHostsMap.has(node)) {\n          const observer = shadowHostsMap.get(node);\n          observer.disconnect();\n        }\n      });\n    });\n  }\n  function fragmentObserverCallback(mutationList) {\n    mutationList.forEach(mutation => {\n      const {\n        removedNodes\n      } = mutation;\n      removedNodes.forEach(node => {\n        const observer = documentFragmentMap.get(mutation.target);\n        if (internalsMap.has(node)) {\n          upgradeInternals(node);\n        }\n        observer.disconnect();\n      });\n    });\n  }\n  const deferUpgrade = fragment => {\n    var _window, _observer$observe;\n    const observer = new MutationObserver(fragmentObserverCallback);\n    if ((_window = window) !== null && _window !== void 0 && (_window = _window.ShadyDOM) !== null && _window !== void 0 && _window.inUse && fragment.mode && fragment.host) {\n      fragment = fragment.host;\n    }\n    (_observer$observe = observer.observe) === null || _observer$observe === void 0 || _observer$observe.call(observer, fragment, {\n      childList: true\n    });\n    documentFragmentMap.set(fragment, observer);\n  };\n  mutationObserverExists() ? new MutationObserver(observerCallback) : {};\n  const observerConfig = {\n    childList: true,\n    subtree: true\n  };\n  const setDisabled = (ref, disabled) => {\n    ref.toggleAttribute('internals-disabled', disabled);\n    if (disabled) {\n      ref.setAttribute('aria-disabled', 'true');\n    } else {\n      ref.removeAttribute('aria-disabled');\n    }\n    if (ref.formDisabledCallback) {\n      ref.formDisabledCallback.apply(ref, [disabled]);\n    }\n  };\n  const removeHiddenInputs = internals => {\n    const hiddenInputs = hiddenInputMap.get(internals);\n    hiddenInputs.forEach(hiddenInput => {\n      hiddenInput.remove();\n    });\n    hiddenInputMap.set(internals, []);\n  };\n  const createHiddenInput = (ref, internals) => {\n    const input = document.createElement('input');\n    input.type = 'hidden';\n    input.name = ref.getAttribute('name');\n    ref.after(input);\n    hiddenInputMap.get(internals).push(input);\n    return input;\n  };\n  const initRef = (ref, internals) => {\n    var _disabledOrNameObserv2;\n    hiddenInputMap.set(internals, []);\n    (_disabledOrNameObserv2 = disabledOrNameObserver.observe) === null || _disabledOrNameObserv2 === void 0 || _disabledOrNameObserv2.call(disabledOrNameObserver, ref, disabledOrNameObserverConfig);\n  };\n  const initLabels = (ref, labels) => {\n    if (labels.length) {\n      Array.from(labels).forEach(label => label.addEventListener('click', ref.click.bind(ref)));\n      let firstLabelId = labels[0].id;\n      if (!labels[0].id) {\n        firstLabelId = `${labels[0].htmlFor}_Label`;\n        labels[0].id = firstLabelId;\n      }\n      ref.setAttribute('aria-labelledby', firstLabelId);\n    }\n  };\n  const setFormValidity = form => {\n    const nativeControlValidity = Array.from(form.elements).filter(element => !element.tagName.includes('-') && element.validity).map(element => element.validity.valid);\n    const polyfilledElements = formElementsMap.get(form) || [];\n    const polyfilledValidity = Array.from(polyfilledElements).filter(control => control.isConnected).map(control => internalsMap.get(control).validity.valid);\n    const hasInvalid = [...nativeControlValidity, ...polyfilledValidity].includes(false);\n    form.toggleAttribute('internals-invalid', hasInvalid);\n    form.toggleAttribute('internals-valid', !hasInvalid);\n  };\n  const formInputCallback = event => {\n    setFormValidity(findParentForm(event.target));\n  };\n  const formChangeCallback = event => {\n    setFormValidity(findParentForm(event.target));\n  };\n  const wireSubmitLogic = form => {\n    const submitButtonSelector = ['button[type=submit]', 'input[type=submit]', 'button:not([type])'].map(sel => `${sel}:not([disabled])`).map(sel => `${sel}:not([form])${form.id ? `,${sel}[form='${form.id}']` : ''}`).join(',');\n    form.addEventListener('click', event => {\n      const target = event.target;\n      if (target.closest(submitButtonSelector)) {\n        const elements = formElementsMap.get(form);\n        if (form.noValidate) {\n          return;\n        }\n        if (elements.size) {\n          const nodes = Array.from(elements);\n          const validityList = nodes.reverse().map(node => {\n            const internals = internalsMap.get(node);\n            return internals.reportValidity();\n          });\n          if (validityList.includes(false)) {\n            event.preventDefault();\n          }\n        }\n      }\n    });\n  };\n  const formResetCallback = event => {\n    const elements = formElementsMap.get(event.target);\n    if (elements && elements.size) {\n      elements.forEach(element => {\n        if (element.constructor.formAssociated && element.formResetCallback) {\n          element.formResetCallback.apply(element);\n        }\n      });\n    }\n  };\n  const initForm = (ref, form, internals) => {\n    if (form) {\n      const formElements = formElementsMap.get(form);\n      if (formElements) {\n        formElements.add(ref);\n      } else {\n        const initSet = new Set();\n        initSet.add(ref);\n        formElementsMap.set(form, initSet);\n        wireSubmitLogic(form);\n        form.addEventListener('reset', formResetCallback);\n        form.addEventListener('input', formInputCallback);\n        form.addEventListener('change', formChangeCallback);\n      }\n      formsMap.set(form, {\n        ref,\n        internals\n      });\n      if (ref.constructor['formAssociated'] && ref.formAssociatedCallback) {\n        setTimeout(() => {\n          ref.formAssociatedCallback.apply(ref, [form]);\n        }, 0);\n      }\n      setFormValidity(form);\n    }\n  };\n  const findParentForm = elem => {\n    let parent = elem.parentNode;\n    if (parent && parent.tagName !== 'FORM') {\n      parent = findParentForm(parent);\n    }\n    return parent;\n  };\n  const throwIfNotFormAssociated = (ref, message, ErrorType = DOMException) => {\n    if (!ref.constructor['formAssociated']) {\n      throw new ErrorType(message);\n    }\n  };\n  const overrideFormMethod = (form, returnValue, method) => {\n    const elements = formElementsMap.get(form);\n    if (elements && elements.size) {\n      elements.forEach(element => {\n        const internals = internalsMap.get(element);\n        const valid = internals[method]();\n        if (!valid) {\n          returnValue = false;\n        }\n      });\n    }\n    return returnValue;\n  };\n  const upgradeInternals = ref => {\n    if (ref.constructor['formAssociated']) {\n      const internals = internalsMap.get(ref);\n      const {\n        labels,\n        form\n      } = internals;\n      initLabels(ref, labels);\n      initForm(ref, form, internals);\n    }\n  };\n  function mutationObserverExists() {\n    return typeof MutationObserver !== 'undefined';\n  }\n  class ValidityState {\n    constructor() {\n      this.badInput = false;\n      this.customError = false;\n      this.patternMismatch = false;\n      this.rangeOverflow = false;\n      this.rangeUnderflow = false;\n      this.stepMismatch = false;\n      this.tooLong = false;\n      this.tooShort = false;\n      this.typeMismatch = false;\n      this.valid = true;\n      this.valueMissing = false;\n      Object.seal(this);\n    }\n  }\n  const setValid = validityObject => {\n    validityObject.badInput = false;\n    validityObject.customError = false;\n    validityObject.patternMismatch = false;\n    validityObject.rangeOverflow = false;\n    validityObject.rangeUnderflow = false;\n    validityObject.stepMismatch = false;\n    validityObject.tooLong = false;\n    validityObject.tooShort = false;\n    validityObject.typeMismatch = false;\n    validityObject.valid = true;\n    validityObject.valueMissing = false;\n    return validityObject;\n  };\n  const reconcileValidity = (validityObject, newState, form) => {\n    validityObject.valid = isValid(newState);\n    Object.keys(newState).forEach(key => validityObject[key] = newState[key]);\n    if (form) {\n      setFormValidity(form);\n    }\n    return validityObject;\n  };\n  const isValid = validityState => {\n    let valid = true;\n    for (let key in validityState) {\n      if (key !== 'valid' && validityState[key] !== false) {\n        valid = false;\n      }\n    }\n    return valid;\n  };\n  const customStateMap = new WeakMap();\n  function addState(ref, stateName) {\n    ref.toggleAttribute(stateName, true);\n    if (ref.part) {\n      ref.part.add(stateName);\n    }\n  }\n  class CustomStateSet extends Set {\n    static get isPolyfilled() {\n      return true;\n    }\n    constructor(ref) {\n      super();\n      if (!ref || !ref.tagName || ref.tagName.indexOf('-') === -1) {\n        throw new TypeError('Illegal constructor');\n      }\n      customStateMap.set(this, ref);\n    }\n    add(state) {\n      if (!/^--/.test(state) || typeof state !== 'string') {\n        throw new DOMException(`Failed to execute 'add' on 'CustomStateSet': The specified value ${state} must start with '--'.`);\n      }\n      const result = super.add(state);\n      const ref = customStateMap.get(this);\n      const stateName = `state${state}`;\n      if (ref.isConnected) {\n        addState(ref, stateName);\n      } else {\n        setTimeout(() => {\n          addState(ref, stateName);\n        });\n      }\n      return result;\n    }\n    clear() {\n      for (let [entry] of this.entries()) {\n        this.delete(entry);\n      }\n      super.clear();\n    }\n    delete(state) {\n      const result = super.delete(state);\n      const ref = customStateMap.get(this);\n      if (ref.isConnected) {\n        ref.toggleAttribute(`state${state}`, false);\n        if (ref.part) {\n          ref.part.remove(`state${state}`);\n        }\n      } else {\n        setTimeout(() => {\n          ref.toggleAttribute(`state${state}`, false);\n          if (ref.part) {\n            ref.part.remove(`state${state}`);\n          }\n        });\n      }\n      return result;\n    }\n  }\n  function __classPrivateFieldGet(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n  }\n  function __classPrivateFieldSet(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n  }\n  var _HTMLFormControlsCollection_elements;\n  class HTMLFormControlsCollection {\n    constructor(elements) {\n      _HTMLFormControlsCollection_elements.set(this, void 0);\n      __classPrivateFieldSet(this, _HTMLFormControlsCollection_elements, elements, \"f\");\n      for (let i = 0; i < elements.length; i++) {\n        let element = elements[i];\n        this[i] = element;\n        if (element.hasAttribute('name')) {\n          this[element.getAttribute('name')] = element;\n        }\n      }\n      Object.freeze(this);\n    }\n    get length() {\n      return __classPrivateFieldGet(this, _HTMLFormControlsCollection_elements, \"f\").length;\n    }\n    [(_HTMLFormControlsCollection_elements = new WeakMap(), Symbol.iterator)]() {\n      return __classPrivateFieldGet(this, _HTMLFormControlsCollection_elements, \"f\")[Symbol.iterator]();\n    }\n    item(i) {\n      return this[i] == null ? null : this[i];\n    }\n    namedItem(name) {\n      return this[name] == null ? null : this[name];\n    }\n  }\n  function patchFormPrototype() {\n    const checkValidity = HTMLFormElement.prototype.checkValidity;\n    HTMLFormElement.prototype.checkValidity = checkValidityOverride;\n    const reportValidity = HTMLFormElement.prototype.reportValidity;\n    HTMLFormElement.prototype.reportValidity = reportValidityOverride;\n    function checkValidityOverride(...args) {\n      let returnValue = checkValidity.apply(this, args);\n      return overrideFormMethod(this, returnValue, 'checkValidity');\n    }\n    function reportValidityOverride(...args) {\n      let returnValue = reportValidity.apply(this, args);\n      return overrideFormMethod(this, returnValue, 'reportValidity');\n    }\n    const {\n      get\n    } = Object.getOwnPropertyDescriptor(HTMLFormElement.prototype, 'elements');\n    Object.defineProperty(HTMLFormElement.prototype, 'elements', {\n      get(...args) {\n        const elements = get.call(this, ...args);\n        const polyfilledElements = Array.from(formElementsMap.get(this) || []);\n        if (polyfilledElements.length === 0) {\n          return elements;\n        }\n        const orderedElements = Array.from(elements).concat(polyfilledElements).sort((a, b) => {\n          if (a.compareDocumentPosition) {\n            return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n          }\n          return 0;\n        });\n        return new HTMLFormControlsCollection(orderedElements);\n      }\n    });\n  }\n  class ElementInternals {\n    static get isPolyfilled() {\n      return true;\n    }\n    constructor(ref) {\n      if (!ref || !ref.tagName || ref.tagName.indexOf('-') === -1) {\n        throw new TypeError('Illegal constructor');\n      }\n      const rootNode = ref.getRootNode();\n      const validity = new ValidityState();\n      this.states = new CustomStateSet(ref);\n      refMap.set(this, ref);\n      validityMap.set(this, validity);\n      internalsMap.set(ref, this);\n      initAom(ref, this);\n      initRef(ref, this);\n      Object.seal(this);\n      if (rootNode instanceof DocumentFragment) {\n        deferUpgrade(rootNode);\n      }\n    }\n    checkValidity() {\n      const ref = refMap.get(this);\n      throwIfNotFormAssociated(ref, `Failed to execute 'checkValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n      if (!this.willValidate) {\n        return true;\n      }\n      const validity = validityMap.get(this);\n      if (!validity.valid) {\n        const validityEvent = new Event('invalid', {\n          bubbles: false,\n          cancelable: true,\n          composed: false\n        });\n        ref.dispatchEvent(validityEvent);\n      }\n      return validity.valid;\n    }\n    get form() {\n      const ref = refMap.get(this);\n      throwIfNotFormAssociated(ref, `Failed to read the 'form' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n      let form;\n      if (ref.constructor['formAssociated'] === true) {\n        form = findParentForm(ref);\n      }\n      return form;\n    }\n    get labels() {\n      const ref = refMap.get(this);\n      throwIfNotFormAssociated(ref, `Failed to read the 'labels' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n      const id = ref.getAttribute('id');\n      const hostRoot = ref.getRootNode();\n      if (hostRoot && id) {\n        return hostRoot.querySelectorAll(`[for=\"${id}\"]`);\n      }\n      return [];\n    }\n    reportValidity() {\n      const ref = refMap.get(this);\n      throwIfNotFormAssociated(ref, `Failed to execute 'reportValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n      if (!this.willValidate) {\n        return true;\n      }\n      const valid = this.checkValidity();\n      const anchor = validationAnchorMap.get(this);\n      if (anchor && !ref.constructor['formAssociated']) {\n        throw new DOMException(`Failed to execute 'reportValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n      }\n      if (!valid && anchor) {\n        ref.focus();\n        anchor.focus();\n      }\n      return valid;\n    }\n    setFormValue(value) {\n      const ref = refMap.get(this);\n      throwIfNotFormAssociated(ref, `Failed to execute 'setFormValue' on 'ElementInternals': The target element is not a form-associated custom element.`);\n      removeHiddenInputs(this);\n      if (value != null && !(value instanceof FormData)) {\n        if (ref.getAttribute('name')) {\n          const hiddenInput = createHiddenInput(ref, this);\n          hiddenInput.value = value;\n        }\n      } else if (value != null && value instanceof FormData) {\n        Array.from(value).reverse().forEach(([formDataKey, formDataValue]) => {\n          if (typeof formDataValue === 'string') {\n            const hiddenInput = createHiddenInput(ref, this);\n            hiddenInput.name = formDataKey;\n            hiddenInput.value = formDataValue;\n          }\n        });\n      }\n      refValueMap.set(ref, value);\n    }\n    setValidity(validityChanges, validationMessage, anchor) {\n      const ref = refMap.get(this);\n      throwIfNotFormAssociated(ref, `Failed to execute 'setValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n      if (!validityChanges) {\n        throw new TypeError('Failed to execute \\'setValidity\\' on \\'ElementInternals\\': 1 argument required, but only 0 present.');\n      }\n      validationAnchorMap.set(this, anchor);\n      const validity = validityMap.get(this);\n      const validityChangesObj = {};\n      for (const key in validityChanges) {\n        validityChangesObj[key] = validityChanges[key];\n      }\n      if (Object.keys(validityChangesObj).length === 0) {\n        setValid(validity);\n      }\n      const check = {\n        ...validity,\n        ...validityChangesObj\n      };\n      delete check.valid;\n      const {\n        valid\n      } = reconcileValidity(validity, check, this.form);\n      if (!valid && !validationMessage) {\n        throw new DOMException(`Failed to execute 'setValidity' on 'ElementInternals': The second argument should not be empty if one or more flags in the first argument are true.`);\n      }\n      validationMessageMap.set(this, valid ? '' : validationMessage);\n      if (ref.isConnected) {\n        ref.toggleAttribute('internals-invalid', !valid);\n        ref.toggleAttribute('internals-valid', valid);\n        ref.setAttribute('aria-invalid', `${!valid}`);\n      } else {\n        validityUpgradeMap.set(ref, this);\n      }\n    }\n    get shadowRoot() {\n      const ref = refMap.get(this);\n      const shadowRoot = shadowRootMap.get(ref);\n      if (shadowRoot) {\n        return shadowRoot;\n      }\n      return null;\n    }\n    get validationMessage() {\n      const ref = refMap.get(this);\n      throwIfNotFormAssociated(ref, `Failed to read the 'validationMessage' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n      return validationMessageMap.get(this);\n    }\n    get validity() {\n      const ref = refMap.get(this);\n      throwIfNotFormAssociated(ref, `Failed to read the 'validity' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n      const validity = validityMap.get(this);\n      return validity;\n    }\n    get willValidate() {\n      const ref = refMap.get(this);\n      throwIfNotFormAssociated(ref, `Failed to read the 'willValidate' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n      if (ref.disabled || ref.hasAttribute('disabled') || ref.hasAttribute('readonly')) {\n        return false;\n      }\n      return true;\n    }\n  }\n  function isElementInternalsSupported() {\n    if (typeof window === 'undefined' || !window.ElementInternals || !HTMLElement.prototype.attachInternals) {\n      return false;\n    }\n    class ElementInternalsFeatureDetection extends HTMLElement {\n      constructor() {\n        super();\n        this.internals = this.attachInternals();\n      }\n    }\n    const randomName = `element-internals-feature-detection-${Math.random().toString(36).replace(/[^a-z]+/g, '')}`;\n    customElements.define(randomName, ElementInternalsFeatureDetection);\n    const featureDetectionElement = new ElementInternalsFeatureDetection();\n    return ['shadowRoot', 'form', 'willValidate', 'validity', 'validationMessage', 'labels', 'setFormValue', 'setValidity', 'checkValidity', 'reportValidity'].every(prop => prop in featureDetectionElement.internals);\n  }\n  let hasElementInternalsPolyfillBeenApplied = false;\n  let hasCustomStateSetPolyfillBeenApplied = false;\n  function forceCustomStateSetPolyfill(attachInternals) {\n    if (hasCustomStateSetPolyfillBeenApplied) {\n      return;\n    }\n    hasCustomStateSetPolyfillBeenApplied = true;\n    window.CustomStateSet = CustomStateSet;\n    if (attachInternals) {\n      HTMLElement.prototype.attachInternals = function (...args) {\n        const internals = attachInternals.call(this, args);\n        internals.states = new CustomStateSet(this);\n        return internals;\n      };\n    }\n  }\n  function forceElementInternalsPolyfill(forceCustomStateSet = true) {\n    if (hasElementInternalsPolyfillBeenApplied) {\n      return;\n    }\n    hasElementInternalsPolyfillBeenApplied = true;\n    if (typeof window !== 'undefined') {\n      window.ElementInternals = ElementInternals;\n    }\n    if (typeof CustomElementRegistry !== 'undefined') {\n      const define = CustomElementRegistry.prototype.define;\n      CustomElementRegistry.prototype.define = function (name, constructor, options) {\n        if (constructor.formAssociated) {\n          const connectedCallback = constructor.prototype.connectedCallback;\n          constructor.prototype.connectedCallback = function () {\n            if (!connectedCallbackMap.has(this)) {\n              connectedCallbackMap.set(this, true);\n              if (this.hasAttribute('disabled')) {\n                setDisabled(this, true);\n              }\n            }\n            if (connectedCallback != null) {\n              connectedCallback.apply(this);\n            }\n            upgradeInternals(this);\n          };\n        }\n        define.call(this, name, constructor, options);\n      };\n    }\n    if (typeof HTMLElement !== 'undefined') {\n      HTMLElement.prototype.attachInternals = function () {\n        if (!this.tagName) {\n          return {};\n        } else if (this.tagName.indexOf('-') === -1) {\n          throw new Error(`Failed to execute 'attachInternals' on 'HTMLElement': Unable to attach ElementInternals to non-custom elements.`);\n        }\n        if (internalsMap.has(this)) {\n          throw new DOMException(`DOMException: Failed to execute 'attachInternals' on 'HTMLElement': ElementInternals for the specified element was already attached.`);\n        }\n        return new ElementInternals(this);\n      };\n    }\n    if (typeof Element !== 'undefined') {\n      function attachShadowObserver(...args) {\n        const shadowRoot = attachShadow.apply(this, args);\n        shadowRootMap.set(this, shadowRoot);\n        if (mutationObserverExists()) {\n          const observer = new MutationObserver(observerCallback);\n          if (window.ShadyDOM) {\n            observer.observe(this, observerConfig);\n          } else {\n            observer.observe(shadowRoot, observerConfig);\n          }\n          shadowHostsMap.set(this, observer);\n        }\n        return shadowRoot;\n      }\n      const attachShadow = Element.prototype.attachShadow;\n      Element.prototype.attachShadow = attachShadowObserver;\n    }\n    if (mutationObserverExists() && typeof document !== 'undefined') {\n      const documentObserver = new MutationObserver(observerCallback);\n      documentObserver.observe(document.documentElement, observerConfig);\n    }\n    if (typeof HTMLFormElement !== 'undefined') {\n      patchFormPrototype();\n    }\n    if (forceCustomStateSet || typeof window !== \"undefined\" && !window.CustomStateSet) {\n      forceCustomStateSetPolyfill();\n    }\n  }\n  const isCePolyfill = !!customElements.polyfillWrapFlushCallback;\n  if (!isCePolyfill) {\n    if (!isElementInternalsSupported()) {\n      forceElementInternalsPolyfill(false);\n    } else if (typeof window !== \"undefined\" && !window.CustomStateSet) {\n      forceCustomStateSetPolyfill(HTMLElement.prototype.attachInternals);\n    }\n  }\n  exports.forceCustomStateSetPolyfill = forceCustomStateSetPolyfill;\n  exports.forceElementInternalsPolyfill = forceElementInternalsPolyfill;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  return exports;\n})({});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/element-internals-polyfill/dist/index.js\n");

/***/ })

};
