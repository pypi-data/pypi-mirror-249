/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
export const id = "vendors-node_modules_lit-labs_virtualizer_lit-virtualizer_js";
export const ids = ["vendors-node_modules_lit-labs_virtualizer_lit-virtualizer_js"];
export const modules = {

/***/ "./node_modules/@lit-labs/virtualizer/LitVirtualizer.js":
/*!**************************************************************!*\
  !*** ./node_modules/@lit-labs/virtualizer/LitVirtualizer.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LitVirtualizer: () => (/* binding */ LitVirtualizer)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ \"./node_modules/lit/index.js\");\n/* harmony import */ var lit_decorators_property_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit/decorators/property.js */ \"./node_modules/lit/decorators/property.js\");\n/* harmony import */ var _virtualize_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./virtualize.js */ \"./node_modules/@lit-labs/virtualizer/virtualize.js\");\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n\n\n\nclass LitVirtualizer extends lit__WEBPACK_IMPORTED_MODULE_0__.LitElement {\n  constructor() {\n    super(...arguments);\n    this.items = [];\n    this.renderItem = _virtualize_js__WEBPACK_IMPORTED_MODULE_2__.defaultRenderItem;\n    this.keyFunction = _virtualize_js__WEBPACK_IMPORTED_MODULE_2__.defaultKeyFunction;\n    this.layout = {};\n    this.scroller = false;\n  }\n  createRenderRoot() {\n    return this;\n  }\n  render() {\n    const {\n      items,\n      renderItem,\n      keyFunction,\n      layout,\n      scroller\n    } = this;\n    return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`${(0,_virtualize_js__WEBPACK_IMPORTED_MODULE_2__.virtualize)({\n      items,\n      renderItem,\n      keyFunction,\n      layout,\n      scroller\n    })}`;\n  }\n  element(index) {\n    var _this$virtualizerRef;\n    return (_this$virtualizerRef = this[_virtualize_js__WEBPACK_IMPORTED_MODULE_2__.virtualizerRef]) === null || _this$virtualizerRef === void 0 ? void 0 : _this$virtualizerRef.element(index);\n  }\n  get layoutComplete() {\n    var _this$virtualizerRef2;\n    return (_this$virtualizerRef2 = this[_virtualize_js__WEBPACK_IMPORTED_MODULE_2__.virtualizerRef]) === null || _this$virtualizerRef2 === void 0 ? void 0 : _this$virtualizerRef2.layoutComplete;\n  }\n  /**\n   * This scrollToIndex() shim is here to provide backwards compatibility with other 0.x versions of\n   * lit-virtualizer. It is deprecated and will likely be removed in the 1.0.0 release.\n   */\n  scrollToIndex(index, position = 'start') {\n    var _this$element;\n    (_this$element = this.element(index)) === null || _this$element === void 0 || _this$element.scrollIntoView({\n      block: position\n    });\n  }\n}\n(0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([(0,lit_decorators_property_js__WEBPACK_IMPORTED_MODULE_1__.property)({\n  attribute: false\n})], LitVirtualizer.prototype, \"items\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([(0,lit_decorators_property_js__WEBPACK_IMPORTED_MODULE_1__.property)()], LitVirtualizer.prototype, \"renderItem\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([(0,lit_decorators_property_js__WEBPACK_IMPORTED_MODULE_1__.property)()], LitVirtualizer.prototype, \"keyFunction\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([(0,lit_decorators_property_js__WEBPACK_IMPORTED_MODULE_1__.property)({\n  attribute: false\n})], LitVirtualizer.prototype, \"layout\", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([(0,lit_decorators_property_js__WEBPACK_IMPORTED_MODULE_1__.property)({\n  reflect: true,\n  type: Boolean\n})], LitVirtualizer.prototype, \"scroller\", void 0);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGxpdC1sYWJzL3ZpcnR1YWxpemVyL0xpdFZpcnR1YWxpemVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7OztBQU1BO0FBQ0E7QUFHQTtBQVNBO0FBQUE7O0FBRUE7QUFHQTtBQUdBO0FBR0E7QUFHQTtBQW1DQTtBQWpDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTs7OztBQUlBO0FBRUE7QUFFQTtBQUFBO0FBQUE7QUFDQTs7QUE5Q0E7QUFEQTtBQUFBO0FBSUE7QUFHQTtBQUdBO0FBREE7QUFBQTtBQUlBO0FBREE7QUFBQTtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaG9tZS1hc3Npc3RhbnQtZnJvbnRlbmQvc3JjL0xpdFZpcnR1YWxpemVyLnRzP2JiNjgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5cbmltcG9ydCB7aHRtbCwgTGl0RWxlbWVudH0gZnJvbSAnbGl0JztcbmltcG9ydCB7cHJvcGVydHl9IGZyb20gJ2xpdC9kZWNvcmF0b3JzL3Byb3BlcnR5LmpzJztcbmltcG9ydCB7S2V5Rm59IGZyb20gJ2xpdC9kaXJlY3RpdmVzL3JlcGVhdC5qcyc7XG5pbXBvcnQge0xheW91dENvbmZpZ1ZhbHVlfSBmcm9tICcuL2xheW91dHMvc2hhcmVkL0xheW91dC5qcyc7XG5pbXBvcnQge1xuICB2aXJ0dWFsaXplLFxuICB2aXJ0dWFsaXplclJlZixcbiAgVmlydHVhbGl6ZXJIb3N0RWxlbWVudCxcbiAgZGVmYXVsdFJlbmRlckl0ZW0sXG4gIGRlZmF1bHRLZXlGdW5jdGlvbixcbiAgUmVuZGVySXRlbUZ1bmN0aW9uLFxufSBmcm9tICcuL3ZpcnR1YWxpemUuanMnO1xuXG5leHBvcnQgY2xhc3MgTGl0VmlydHVhbGl6ZXI8VCA9IHVua25vd24+IGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIEBwcm9wZXJ0eSh7YXR0cmlidXRlOiBmYWxzZX0pXG4gIGl0ZW1zOiBUW10gPSBbXTtcblxuICBAcHJvcGVydHkoKVxuICByZW5kZXJJdGVtOiBSZW5kZXJJdGVtRnVuY3Rpb248VD4gPSBkZWZhdWx0UmVuZGVySXRlbTtcblxuICBAcHJvcGVydHkoKVxuICBrZXlGdW5jdGlvbjogS2V5Rm48VD4gPSBkZWZhdWx0S2V5RnVuY3Rpb247XG5cbiAgQHByb3BlcnR5KHthdHRyaWJ1dGU6IGZhbHNlfSlcbiAgbGF5b3V0OiBMYXlvdXRDb25maWdWYWx1ZSA9IHt9O1xuXG4gIEBwcm9wZXJ0eSh7cmVmbGVjdDogdHJ1ZSwgdHlwZTogQm9vbGVhbn0pXG4gIHNjcm9sbGVyID0gZmFsc2U7XG5cbiAgY3JlYXRlUmVuZGVyUm9vdCgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7aXRlbXMsIHJlbmRlckl0ZW0sIGtleUZ1bmN0aW9uLCBsYXlvdXQsIHNjcm9sbGVyfSA9IHRoaXM7XG4gICAgcmV0dXJuIGh0bWxgJHt2aXJ0dWFsaXplKHtcbiAgICAgIGl0ZW1zLFxuICAgICAgcmVuZGVySXRlbSxcbiAgICAgIGtleUZ1bmN0aW9uLFxuICAgICAgbGF5b3V0LFxuICAgICAgc2Nyb2xsZXIsXG4gICAgfSl9YDtcbiAgfVxuXG4gIGVsZW1lbnQoaW5kZXg6IG51bWJlcikge1xuICAgIHJldHVybiAodGhpcyBhcyBWaXJ0dWFsaXplckhvc3RFbGVtZW50KVt2aXJ0dWFsaXplclJlZl0/LmVsZW1lbnQoaW5kZXgpO1xuICB9XG5cbiAgZ2V0IGxheW91dENvbXBsZXRlKCkge1xuICAgIHJldHVybiAodGhpcyBhcyBWaXJ0dWFsaXplckhvc3RFbGVtZW50KVt2aXJ0dWFsaXplclJlZl0/LmxheW91dENvbXBsZXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgc2Nyb2xsVG9JbmRleCgpIHNoaW0gaXMgaGVyZSB0byBwcm92aWRlIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggb3RoZXIgMC54IHZlcnNpb25zIG9mXG4gICAqIGxpdC12aXJ0dWFsaXplci4gSXQgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBsaWtlbHkgYmUgcmVtb3ZlZCBpbiB0aGUgMS4wLjAgcmVsZWFzZS5cbiAgICovXG4gIHNjcm9sbFRvSW5kZXgoXG4gICAgaW5kZXg6IG51bWJlcixcbiAgICBwb3NpdGlvbjogJ3N0YXJ0JyB8ICdjZW50ZXInIHwgJ2VuZCcgfCAnbmVhcmVzdCcgPSAnc3RhcnQnXG4gICkge1xuICAgIHRoaXMuZWxlbWVudChpbmRleCk/LnNjcm9sbEludG9WaWV3KHtibG9jazogcG9zaXRpb259KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@lit-labs/virtualizer/LitVirtualizer.js\n");

/***/ }),

/***/ "./node_modules/@lit-labs/virtualizer/ScrollerController.js":
/*!******************************************************************!*\
  !*** ./node_modules/@lit-labs/virtualizer/ScrollerController.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ScrollerController: () => (/* binding */ ScrollerController),\n/* harmony export */   ScrollerShim: () => (/* binding */ ScrollerShim)\n/* harmony export */ });\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nclass ScrollerShim {\n  constructor(element) {\n    this._element = null;\n    const node = element !== null && element !== void 0 ? element : window;\n    this._node = node;\n    if (element) {\n      this._element = element;\n    }\n  }\n  get element() {\n    return this._element || document.scrollingElement || document.documentElement;\n  }\n  get scrollTop() {\n    return this.element.scrollTop || window.scrollY;\n  }\n  get scrollLeft() {\n    return this.element.scrollLeft || window.scrollX;\n  }\n  get scrollHeight() {\n    return this.element.scrollHeight;\n  }\n  get scrollWidth() {\n    return this.element.scrollWidth;\n  }\n  get viewportHeight() {\n    return this._element ? this._element.getBoundingClientRect().height : window.innerHeight;\n  }\n  get viewportWidth() {\n    return this._element ? this._element.getBoundingClientRect().width : window.innerWidth;\n  }\n  get maxScrollTop() {\n    return this.scrollHeight - this.viewportHeight;\n  }\n  get maxScrollLeft() {\n    return this.scrollWidth - this.viewportWidth;\n  }\n}\nclass ScrollerController extends ScrollerShim {\n  constructor(client, element) {\n    super(element);\n    this._clients = new Set();\n    this._retarget = null;\n    this._end = null;\n    this.__destination = null;\n    this.correctingScrollError = false;\n    this._checkForArrival = this._checkForArrival.bind(this);\n    this._updateManagedScrollTo = this._updateManagedScrollTo.bind(this);\n    this.scrollTo = this.scrollTo.bind(this);\n    this.scrollBy = this.scrollBy.bind(this);\n    const node = this._node;\n    this._originalScrollTo = node.scrollTo;\n    this._originalScrollBy = node.scrollBy;\n    this._originalScroll = node.scroll;\n    this._attach(client);\n  }\n  get _destination() {\n    return this.__destination;\n  }\n  get scrolling() {\n    return this._destination !== null;\n  }\n  scrollTo(p1, p2) {\n    const options = typeof p1 === 'number' && typeof p2 === 'number' ? {\n      left: p1,\n      top: p2\n    } : p1;\n    this._scrollTo(options);\n  }\n  scrollBy(p1, p2) {\n    const options = typeof p1 === 'number' && typeof p2 === 'number' ? {\n      left: p1,\n      top: p2\n    } : p1;\n    if (options.top !== undefined) {\n      options.top += this.scrollTop;\n    }\n    if (options.left !== undefined) {\n      options.left += this.scrollLeft;\n    }\n    this._scrollTo(options);\n  }\n  _nativeScrollTo(options) {\n    this._originalScrollTo.bind(this._element || window)(options);\n  }\n  _scrollTo(options, retarget = null, end = null) {\n    if (this._end !== null) {\n      this._end();\n    }\n    if (options.behavior === 'smooth') {\n      this._setDestination(options);\n      this._retarget = retarget;\n      this._end = end;\n    } else {\n      this._resetScrollState();\n    }\n    this._nativeScrollTo(options);\n  }\n  _setDestination(options) {\n    let {\n      top,\n      left\n    } = options;\n    top = top === undefined ? undefined : Math.max(0, Math.min(top, this.maxScrollTop));\n    left = left === undefined ? undefined : Math.max(0, Math.min(left, this.maxScrollLeft));\n    if (this._destination !== null && left === this._destination.left && top === this._destination.top) {\n      return false;\n    }\n    this.__destination = {\n      top,\n      left,\n      behavior: 'smooth'\n    };\n    return true;\n  }\n  _resetScrollState() {\n    this.__destination = null;\n    this._retarget = null;\n    this._end = null;\n  }\n  _updateManagedScrollTo(coordinates) {\n    if (this._destination) {\n      if (this._setDestination(coordinates)) {\n        this._nativeScrollTo(this._destination);\n      }\n    }\n  }\n  managedScrollTo(options, retarget, end) {\n    this._scrollTo(options, retarget, end);\n    return this._updateManagedScrollTo;\n  }\n  correctScrollError(coordinates) {\n    this.correctingScrollError = true;\n    requestAnimationFrame(() => requestAnimationFrame(() => this.correctingScrollError = false));\n    // Correct the error\n    this._nativeScrollTo(coordinates);\n    // Then, if we were headed for a specific destination, we continue scrolling:\n    // First, we update our target destination, if applicable...\n    if (this._retarget) {\n      this._setDestination(this._retarget());\n    }\n    // Then we go ahead and resume scrolling\n    if (this._destination) {\n      this._nativeScrollTo(this._destination);\n    }\n  }\n  _checkForArrival() {\n    if (this._destination !== null) {\n      const {\n        scrollTop,\n        scrollLeft\n      } = this;\n      let {\n        top,\n        left\n      } = this._destination;\n      top = Math.min(top || 0, this.maxScrollTop);\n      left = Math.min(left || 0, this.maxScrollLeft);\n      const topDiff = Math.abs(top - scrollTop);\n      const leftDiff = Math.abs(left - scrollLeft);\n      // We check to see if we've arrived at our destination.\n      if (topDiff < 1 && leftDiff < 1) {\n        if (this._end) {\n          this._end();\n        }\n        this._resetScrollState();\n      }\n    }\n  }\n  detach(client) {\n    this._clients.delete(client);\n    /**\n     * If there aren't any more clients, then return the node's default\n     * scrolling methods\n     */\n    if (this._clients.size === 0) {\n      this._node.scrollTo = this._originalScrollTo;\n      this._node.scrollBy = this._originalScrollBy;\n      this._node.scroll = this._originalScroll;\n      this._node.removeEventListener('scroll', this._checkForArrival);\n    }\n    return null;\n  }\n  _attach(client) {\n    this._clients.add(client);\n    /**\n     * The node should only have the methods shimmed when adding the first\n     * client – otherwise it's redundant\n     */\n    if (this._clients.size === 1) {\n      this._node.scrollTo = this.scrollTo;\n      this._node.scrollBy = this.scrollBy;\n      this._node.scroll = this.scrollTo;\n      this._node.addEventListener('scroll', this._checkForArrival);\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@lit-labs/virtualizer/ScrollerController.js\n");

/***/ }),

/***/ "./node_modules/@lit-labs/virtualizer/Virtualizer.js":
/*!***********************************************************!*\
  !*** ./node_modules/@lit-labs/virtualizer/Virtualizer.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Virtualizer: () => (/* binding */ Virtualizer),\n/* harmony export */   provideResizeObserver: () => (/* binding */ provideResizeObserver),\n/* harmony export */   virtualizerRef: () => (/* binding */ virtualizerRef)\n/* harmony export */ });\n/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events.js */ \"./node_modules/@lit-labs/virtualizer/events.js\");\n/* harmony import */ var _ScrollerController_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ScrollerController.js */ \"./node_modules/@lit-labs/virtualizer/ScrollerController.js\");\nvar _window;\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n\n// Virtualizer depends on `ResizeObserver`, which is supported in\n// all modern browsers. For developers whose browser support\n// matrix includes older browsers, we include a compatible\n// polyfill in the package; this bit of module state facilitates\n// a simple mechanism (see ./polyfillLoaders/ResizeObserver.js.)\n// for loading the polyfill.\nlet _ResizeObserver = (_window = window) === null || _window === void 0 ? void 0 : _window.ResizeObserver;\n/**\n * Call this function to provide a `ResizeObserver` polyfill for Virtualizer to use.\n * @param Ctor Constructor for a `ResizeObserver` polyfill (recommend using the one provided with the Virtualizer package)\n */\nfunction provideResizeObserver(Ctor) {\n  _ResizeObserver = Ctor;\n}\nconst virtualizerRef = Symbol('virtualizerRef');\nconst SIZER_ATTRIBUTE = 'virtualizer-sizer';\nlet DefaultLayoutConstructor;\n/**\n * Provides virtual scrolling boilerplate.\n *\n * Extensions of this class must set hostElement and layout.\n *\n * Extensions of this class must also override VirtualRepeater's DOM\n * manipulation methods.\n */\nclass Virtualizer {\n  constructor(config) {\n    this._benchmarkStart = null;\n    this._layout = null;\n    this._clippingAncestors = [];\n    /**\n     * Layout provides these values, we set them on _render().\n     * TODO @straversi: Can we find an XOR type, usable for the key here?\n     */\n    this._scrollSize = null;\n    /**\n     * Difference between scroll target's current and required scroll offsets.\n     * Provided by layout.\n     */\n    this._scrollError = null;\n    /**\n     * A list of the positions (top, left) of the children in the current range.\n     */\n    this._childrenPos = null;\n    // TODO: (graynorton): type\n    this._childMeasurements = null;\n    this._toBeMeasured = new Map();\n    this._rangeChanged = true;\n    this._itemsChanged = true;\n    this._visibilityChanged = true;\n    this._scrollerController = null;\n    this._isScroller = false;\n    this._sizer = null;\n    /**\n     * Resize observer attached to hostElement.\n     */\n    this._hostElementRO = null;\n    /**\n     * Resize observer attached to children.\n     */\n    this._childrenRO = null;\n    this._mutationObserver = null;\n    this._scrollEventListeners = [];\n    this._scrollEventListenerOptions = {\n      passive: true\n    };\n    // TODO (graynorton): Rethink, per longer comment below\n    this._loadListener = this._childLoaded.bind(this);\n    /**\n     * Index of element to scroll into view, plus scroll\n     * behavior options, as imperatively specified via\n     * `element(index).scrollIntoView()`\n     */\n    this._scrollIntoViewTarget = null;\n    this._updateScrollIntoViewCoordinates = null;\n    /**\n     * Items to render. Set by items.\n     */\n    this._items = [];\n    /**\n     * Index of the first child in the range, not necessarily the first visible child.\n     * TODO @straversi: Consider renaming these.\n     */\n    this._first = -1;\n    /**\n     * Index of the last child in the range.\n     */\n    this._last = -1;\n    /**\n     * Index of the first item intersecting the viewport.\n     */\n    this._firstVisible = -1;\n    /**\n     * Index of the last item intersecting the viewport.\n     */\n    this._lastVisible = -1;\n    this._scheduled = new WeakSet();\n    /**\n     * Invoked at the end of each render cycle: children in the range are\n     * measured, and their dimensions passed to this callback. Use it to layout\n     * children as needed.\n     */\n    this._measureCallback = null;\n    this._measureChildOverride = null;\n    /**\n     * State for `layoutComplete` promise\n     */\n    this._layoutCompletePromise = null;\n    this._layoutCompleteResolver = null;\n    this._layoutCompleteRejecter = null;\n    this._pendingLayoutComplete = null;\n    /**\n     * Layout initialization is async because we dynamically load\n     * the default layout if none is specified. This state is to track\n     * whether init is complete.\n     */\n    this._layoutInitialized = null;\n    if (!config) {\n      throw new Error('Virtualizer constructor requires a configuration object');\n    }\n    if (config.hostElement) {\n      this._init(config);\n    } else {\n      throw new Error('Virtualizer configuration requires the \"hostElement\" property');\n    }\n  }\n  set items(items) {\n    if (Array.isArray(items) && items !== this._items) {\n      this._itemsChanged = true;\n      this._items = items;\n      this._schedule(this._updateLayout);\n    }\n  }\n  _init(config) {\n    this._isScroller = !!config.scroller;\n    this._initHostElement(config);\n    // If no layout is specified, we make an empty\n    // layout config, which will result in the default\n    // layout with default parameters\n    const layoutConfig = config.layout || {};\n    // Save the promise returned by `_initLayout` as a state\n    // variable we can check before updating layout config\n    this._layoutInitialized = this._initLayout(layoutConfig);\n  }\n  _initObservers() {\n    this._mutationObserver = new MutationObserver(this._finishDOMUpdate.bind(this));\n    this._hostElementRO = new _ResizeObserver(() => this._hostElementSizeChanged());\n    this._childrenRO = new _ResizeObserver(this._childrenSizeChanged.bind(this));\n  }\n  _initHostElement(config) {\n    const hostElement = this._hostElement = config.hostElement;\n    this._applyVirtualizerStyles();\n    hostElement[virtualizerRef] = this;\n  }\n  connected() {\n    this._initObservers();\n    const includeSelf = this._isScroller;\n    this._clippingAncestors = getClippingAncestors(this._hostElement, includeSelf);\n    this._scrollerController = new _ScrollerController_js__WEBPACK_IMPORTED_MODULE_1__.ScrollerController(this, this._clippingAncestors[0]);\n    this._schedule(this._updateLayout);\n    this._observeAndListen();\n  }\n  _observeAndListen() {\n    this._mutationObserver.observe(this._hostElement, {\n      childList: true\n    });\n    this._hostElementRO.observe(this._hostElement);\n    this._scrollEventListeners.push(window);\n    window.addEventListener('scroll', this, this._scrollEventListenerOptions);\n    this._clippingAncestors.forEach(ancestor => {\n      ancestor.addEventListener('scroll', this, this._scrollEventListenerOptions);\n      this._scrollEventListeners.push(ancestor);\n      this._hostElementRO.observe(ancestor);\n    });\n    this._hostElementRO.observe(this._scrollerController.element);\n    this._children.forEach(child => this._childrenRO.observe(child));\n    this._scrollEventListeners.forEach(target => target.addEventListener('scroll', this, this._scrollEventListenerOptions));\n  }\n  disconnected() {\n    var _this$_scrollerContro, _this$_mutationObserv, _this$_hostElementRO, _this$_childrenRO;\n    this._scrollEventListeners.forEach(target => target.removeEventListener('scroll', this, this._scrollEventListenerOptions));\n    this._scrollEventListeners = [];\n    this._clippingAncestors = [];\n    (_this$_scrollerContro = this._scrollerController) === null || _this$_scrollerContro === void 0 || _this$_scrollerContro.detach(this);\n    this._scrollerController = null;\n    (_this$_mutationObserv = this._mutationObserver) === null || _this$_mutationObserv === void 0 || _this$_mutationObserv.disconnect();\n    this._mutationObserver = null;\n    (_this$_hostElementRO = this._hostElementRO) === null || _this$_hostElementRO === void 0 || _this$_hostElementRO.disconnect();\n    this._hostElementRO = null;\n    (_this$_childrenRO = this._childrenRO) === null || _this$_childrenRO === void 0 || _this$_childrenRO.disconnect();\n    this._childrenRO = null;\n    this._rejectLayoutCompletePromise('disconnected');\n  }\n  _applyVirtualizerStyles() {\n    const hostElement = this._hostElement;\n    // Would rather set these CSS properties on the host using Shadow Root\n    // style scoping (and falling back to a global stylesheet where native\n    // Shadow DOM is not available), but this Mobile Safari bug is preventing\n    // that from working: https://bugs.webkit.org/show_bug.cgi?id=226195\n    const style = hostElement.style;\n    style.display = style.display || 'block';\n    style.position = style.position || 'relative';\n    style.contain = style.contain || 'size layout';\n    if (this._isScroller) {\n      style.overflow = style.overflow || 'auto';\n      style.minHeight = style.minHeight || '150px';\n    }\n  }\n  _getSizer() {\n    const hostElement = this._hostElement;\n    if (!this._sizer) {\n      // Use a preexisting sizer element if provided (for better integration\n      // with vDOM renderers)\n      let sizer = hostElement.querySelector(`[${SIZER_ATTRIBUTE}]`);\n      if (!sizer) {\n        sizer = document.createElement('div');\n        sizer.setAttribute(SIZER_ATTRIBUTE, '');\n        hostElement.appendChild(sizer);\n      }\n      // When the scrollHeight is large, the height of this element might be\n      // ignored. Setting content and font-size ensures the element has a size.\n      Object.assign(sizer.style, {\n        position: 'absolute',\n        margin: '-2px 0 0 0',\n        padding: 0,\n        visibility: 'hidden',\n        fontSize: '2px'\n      });\n      sizer.textContent = '&nbsp;';\n      sizer.setAttribute(SIZER_ATTRIBUTE, '');\n      this._sizer = sizer;\n    }\n    return this._sizer;\n  }\n  async updateLayoutConfig(layoutConfig) {\n    // If layout initialization hasn't finished yet, we wait\n    // for it to finish so we can check whether the new config\n    // is compatible with the existing layout before proceeding.\n    await this._layoutInitialized;\n    const Ctor = layoutConfig.type ||\n    // The new config is compatible with the current layout,\n    // so we update the config and return true to indicate\n    // a successful update\n    DefaultLayoutConstructor;\n    if (typeof Ctor === 'function' && this._layout instanceof Ctor) {\n      const config = {\n        ...layoutConfig\n      };\n      delete config.type;\n      this._layout.config = config;\n      // The new config requires a different layout altogether, but\n      // to limit implementation complexity we don't support dynamically\n      // changing the layout of an existing virtualizer instance.\n      // Returning false here lets the caller know that they should\n      // instead make a new virtualizer instance with the desired layout.\n      return true;\n    }\n    return false;\n  }\n  async _initLayout(layoutConfig) {\n    let config;\n    let Ctor;\n    if (typeof layoutConfig.type === 'function') {\n      // If we have a full LayoutSpecifier, the `type` property\n      // gives us our constructor...\n      Ctor = layoutConfig.type;\n      // ...while the rest of the specifier is our layout config\n      const copy = {\n        ...layoutConfig\n      };\n      delete copy.type;\n      config = copy;\n    } else {\n      // If we don't have a full LayoutSpecifier, we just\n      // have a config for the default layout\n      config = layoutConfig;\n    }\n    if (Ctor === undefined) {\n      // If we don't have a constructor yet, load the default\n      DefaultLayoutConstructor = Ctor = (await Promise.all(/*! import() */[__webpack_require__.e(\"vendors-node_modules_lit-labs_virtualizer_layouts_shared_BaseLayout_js\"), __webpack_require__.e(\"vendors-node_modules_lit-labs_virtualizer_layouts_flow_js\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./layouts/flow.js */ \"./node_modules/@lit-labs/virtualizer/layouts/flow.js\"))).FlowLayout;\n    }\n    this._layout = new Ctor(message => this._handleLayoutMessage(message), config);\n    if (this._layout.measureChildren && typeof this._layout.updateItemSizes === 'function') {\n      if (typeof this._layout.measureChildren === 'function') {\n        this._measureChildOverride = this._layout.measureChildren;\n      }\n      this._measureCallback = this._layout.updateItemSizes.bind(this._layout);\n    }\n    if (this._layout.listenForChildLoadEvents) {\n      this._hostElement.addEventListener('load', this._loadListener, true);\n    }\n    this._schedule(this._updateLayout);\n  }\n  // TODO (graynorton): Rework benchmarking so that it has no API and\n  // instead is always on except in production builds\n  startBenchmarking() {\n    if (this._benchmarkStart === null) {\n      this._benchmarkStart = window.performance.now();\n    }\n  }\n  stopBenchmarking() {\n    if (this._benchmarkStart !== null) {\n      const now = window.performance.now();\n      const timeElapsed = now - this._benchmarkStart;\n      const entries = performance.getEntriesByName('uv-virtualizing', 'measure');\n      const virtualizationTime = entries.filter(e => e.startTime >= this._benchmarkStart && e.startTime < now).reduce((t, m) => t + m.duration, 0);\n      this._benchmarkStart = null;\n      return {\n        timeElapsed,\n        virtualizationTime\n      };\n    }\n    return null;\n  }\n  _measureChildren() {\n    const mm = {};\n    const children = this._children;\n    const fn = this._measureChildOverride || this._measureChild;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      const idx = this._first + i;\n      if (this._itemsChanged || this._toBeMeasured.has(child)) {\n        mm[idx] = fn.call(this, child, this._items[idx]);\n      }\n    }\n    this._childMeasurements = mm;\n    this._schedule(this._updateLayout);\n    this._toBeMeasured.clear();\n  }\n  /**\n   * Returns the width, height, and margins of the given child.\n   */\n  _measureChild(element) {\n    // offsetWidth doesn't take transforms in consideration, so we use\n    // getBoundingClientRect which does.\n    const {\n      width,\n      height\n    } = element.getBoundingClientRect();\n    return Object.assign({\n      width,\n      height\n    }, getMargins(element));\n  }\n  async _schedule(method) {\n    if (!this._scheduled.has(method)) {\n      this._scheduled.add(method);\n      await Promise.resolve();\n      this._scheduled.delete(method);\n      method.call(this);\n    }\n  }\n  async _updateDOM(state) {\n    this._scrollSize = state.scrollSize;\n    this._adjustRange(state.range);\n    this._childrenPos = state.childPositions;\n    this._scrollError = state.scrollError || null;\n    const {\n      _rangeChanged,\n      _itemsChanged\n    } = this;\n    if (this._visibilityChanged) {\n      this._notifyVisibility();\n      this._visibilityChanged = false;\n    }\n    if (_rangeChanged || _itemsChanged) {\n      this._notifyRange();\n      this._rangeChanged = false;\n    }\n    this._finishDOMUpdate();\n  }\n  _finishDOMUpdate() {\n    this._children.forEach(child => this._childrenRO.observe(child));\n    this._checkScrollIntoViewTarget(this._childrenPos);\n    this._positionChildren(this._childrenPos);\n    this._sizeHostElement(this._scrollSize);\n    this._correctScrollError();\n    if (this._benchmarkStart && 'mark' in window.performance) {\n      window.performance.mark('uv-end');\n    }\n  }\n  _updateLayout() {\n    // Only update the layout and trigger a re-render if we have:\n    //   a) A layout\n    //   b) A scrollerController, which means we're connected\n    if (this._layout && this._scrollerController) {\n      this._layout.items = this._items;\n      this._updateView();\n      if (this._childMeasurements !== null) {\n        // If the layout has been changed, we may have measurements but no callback\n        if (this._measureCallback) {\n          this._measureCallback(this._childMeasurements);\n        }\n        this._childMeasurements = null;\n      }\n      this._layout.reflowIfNeeded();\n      if (this._benchmarkStart && 'mark' in window.performance) {\n        window.performance.mark('uv-end');\n      }\n    }\n  }\n  _handleScrollEvent() {\n    if (this._benchmarkStart && 'mark' in window.performance) {\n      try {\n        window.performance.measure('uv-virtualizing', 'uv-start', 'uv-end');\n      } catch (e) {\n        console.warn('Error measuring performance data: ', e);\n      }\n      window.performance.mark('uv-start');\n    }\n    if (this._scrollerController.correctingScrollError === false) {\n      var _this$_layout;\n      // This is a user-initiated scroll, so we unpin the layout\n      (_this$_layout = this._layout) === null || _this$_layout === void 0 || _this$_layout.unpin();\n    }\n    this._schedule(this._updateLayout);\n  }\n  handleEvent(event) {\n    switch (event.type) {\n      case 'scroll':\n        if (event.currentTarget === window || this._clippingAncestors.includes(event.currentTarget)) {\n          this._handleScrollEvent();\n        }\n        break;\n      default:\n        console.warn('event not handled', event);\n    }\n  }\n  _handleLayoutMessage(message) {\n    if (message.type === 'stateChanged') {\n      this._updateDOM(message);\n    } else if (message.type === 'visibilityChanged') {\n      this._firstVisible = message.firstVisible;\n      this._lastVisible = message.lastVisible;\n      this._notifyVisibility();\n    } else if (message.type === 'unpinned') {\n      this._hostElement.dispatchEvent(new _events_js__WEBPACK_IMPORTED_MODULE_0__.UnpinnedEvent());\n    }\n  }\n  get _children() {\n    const arr = [];\n    let next = this._hostElement.firstElementChild;\n    while (next) {\n      if (!next.hasAttribute(SIZER_ATTRIBUTE)) {\n        arr.push(next);\n      }\n      next = next.nextElementSibling;\n    }\n    return arr;\n  }\n  _updateView() {\n    var _this$_scrollerContro2;\n    const hostElement = this._hostElement;\n    const scrollingElement = (_this$_scrollerContro2 = this._scrollerController) === null || _this$_scrollerContro2 === void 0 ? void 0 : _this$_scrollerContro2.element;\n    const layout = this._layout;\n    if (hostElement && scrollingElement && layout) {\n      let top, left, bottom, right;\n      const hostElementBounds = hostElement.getBoundingClientRect();\n      top = 0;\n      left = 0;\n      bottom = window.innerHeight;\n      right = window.innerWidth;\n      const ancestorBounds = this._clippingAncestors.map(ancestor => ancestor.getBoundingClientRect());\n      ancestorBounds.unshift(hostElementBounds);\n      for (const bounds of ancestorBounds) {\n        top = Math.max(top, bounds.top);\n        left = Math.max(left, bounds.left);\n        bottom = Math.min(bottom, bounds.bottom);\n        right = Math.min(right, bounds.right);\n      }\n      const scrollingElementBounds = scrollingElement.getBoundingClientRect();\n      const offsetWithinScroller = {\n        left: hostElementBounds.left - scrollingElementBounds.left,\n        top: hostElementBounds.top - scrollingElementBounds.top\n      };\n      const totalScrollSize = {\n        width: scrollingElement.scrollWidth,\n        height: scrollingElement.scrollHeight\n      };\n      const scrollTop = top - hostElementBounds.top + hostElement.scrollTop;\n      const scrollLeft = left - hostElementBounds.left + hostElement.scrollLeft;\n      const height = bottom - top;\n      const width = right - left;\n      layout.viewportSize = {\n        width,\n        height\n      };\n      layout.viewportScroll = {\n        top: scrollTop,\n        left: scrollLeft\n      };\n      layout.totalScrollSize = totalScrollSize;\n      layout.offsetWithinScroller = offsetWithinScroller;\n    }\n  }\n  /**\n   * Styles the host element so that its size reflects the\n   * total size of all items.\n   */\n  _sizeHostElement(size) {\n    // Some browsers seem to crap out if the host element gets larger than\n    // a certain size, so we clamp it here (this value based on ad hoc\n    // testing in Chrome / Safari / Firefox Mac)\n    const max = 8200000;\n    const h = size && size.width !== null ? Math.min(max, size.width) : 0;\n    const v = size && size.height !== null ? Math.min(max, size.height) : 0;\n    if (this._isScroller) {\n      this._getSizer().style.transform = `translate(${h}px, ${v}px)`;\n    } else {\n      const style = this._hostElement.style;\n      style.minWidth = h ? `${h}px` : '100%';\n      style.minHeight = v ? `${v}px` : '100%';\n    }\n  }\n  /**\n   * Sets the top and left transform style of the children from the values in\n   * pos.\n   */\n  _positionChildren(pos) {\n    if (pos) {\n      pos.forEach(({\n        top,\n        left,\n        width,\n        height,\n        xOffset,\n        yOffset\n      }, index) => {\n        const child = this._children[index - this._first];\n        if (child) {\n          child.style.position = 'absolute';\n          child.style.boxSizing = 'border-box';\n          child.style.transform = `translate(${left}px, ${top}px)`;\n          if (width !== undefined) {\n            child.style.width = width + 'px';\n          }\n          if (height !== undefined) {\n            child.style.height = height + 'px';\n          }\n          child.style.left = xOffset === undefined ? null : xOffset + 'px';\n          child.style.top = yOffset === undefined ? null : yOffset + 'px';\n        }\n      });\n    }\n  }\n  async _adjustRange(range) {\n    const {\n      _first,\n      _last,\n      _firstVisible,\n      _lastVisible\n    } = this;\n    this._first = range.first;\n    this._last = range.last;\n    this._firstVisible = range.firstVisible;\n    this._lastVisible = range.lastVisible;\n    this._rangeChanged = this._rangeChanged || this._first !== _first || this._last !== _last;\n    this._visibilityChanged = this._visibilityChanged || this._firstVisible !== _firstVisible || this._lastVisible !== _lastVisible;\n  }\n  _correctScrollError() {\n    if (this._scrollError) {\n      const {\n        scrollTop,\n        scrollLeft\n      } = this._scrollerController;\n      const {\n        top,\n        left\n      } = this._scrollError;\n      this._scrollError = null;\n      this._scrollerController.correctScrollError({\n        top: scrollTop - top,\n        left: scrollLeft - left\n      });\n    }\n  }\n  element(index) {\n    var _this$_items;\n    if (index === Infinity) {\n      index = this._items.length - 1;\n    }\n    return ((_this$_items = this._items) === null || _this$_items === void 0 ? void 0 : _this$_items[index]) === undefined ? undefined : {\n      scrollIntoView: (options = {}) => this._scrollElementIntoView({\n        ...options,\n        index\n      })\n    };\n  }\n  _scrollElementIntoView(options) {\n    if (options.index >= this._first && options.index <= this._last) {\n      this._children[options.index - this._first].scrollIntoView(options);\n    } else {\n      options.index = Math.min(options.index, this._items.length - 1);\n      if (options.behavior === 'smooth') {\n        const coordinates = this._layout.getScrollIntoViewCoordinates(options);\n        const {\n          behavior\n        } = options;\n        this._updateScrollIntoViewCoordinates = this._scrollerController.managedScrollTo(Object.assign(coordinates, {\n          behavior\n        }), () => this._layout.getScrollIntoViewCoordinates(options), () => this._scrollIntoViewTarget = null);\n        this._scrollIntoViewTarget = options;\n      } else {\n        this._layout.pin = options;\n      }\n    }\n  }\n  /**\n   * If we are smoothly scrolling to an element and the target element\n   * is in the DOM, we update our target coordinates as needed\n   */\n  _checkScrollIntoViewTarget(pos) {\n    const {\n      index\n    } = this._scrollIntoViewTarget || {};\n    if (index && pos !== null && pos !== void 0 && pos.has(index)) {\n      this._updateScrollIntoViewCoordinates(this._layout.getScrollIntoViewCoordinates(this._scrollIntoViewTarget));\n    }\n  }\n  /**\n   * Emits a rangechange event with the current first, last, firstVisible, and\n   * lastVisible.\n   */\n  _notifyRange() {\n    this._hostElement.dispatchEvent(new _events_js__WEBPACK_IMPORTED_MODULE_0__.RangeChangedEvent({\n      first: this._first,\n      last: this._last\n    }));\n  }\n  _notifyVisibility() {\n    this._hostElement.dispatchEvent(new _events_js__WEBPACK_IMPORTED_MODULE_0__.VisibilityChangedEvent({\n      first: this._firstVisible,\n      last: this._lastVisible\n    }));\n  }\n  get layoutComplete() {\n    // Lazily create promise\n    if (!this._layoutCompletePromise) {\n      this._layoutCompletePromise = new Promise((resolve, reject) => {\n        this._layoutCompleteResolver = resolve;\n        this._layoutCompleteRejecter = reject;\n      });\n    }\n    return this._layoutCompletePromise;\n  }\n  _rejectLayoutCompletePromise(reason) {\n    if (this._layoutCompleteRejecter !== null) {\n      this._layoutCompleteRejecter(reason);\n    }\n    this._resetLayoutCompleteState();\n  }\n  _scheduleLayoutComplete() {\n    // Don't do anything unless we have a pending promise\n    // And only request a frame if we haven't already done so\n    if (this._layoutCompletePromise && this._pendingLayoutComplete === null) {\n      // Wait one additional frame to be sure the layout is stable\n      this._pendingLayoutComplete = requestAnimationFrame(() => requestAnimationFrame(() => this._resolveLayoutCompletePromise()));\n    }\n  }\n  _resolveLayoutCompletePromise() {\n    if (this._layoutCompleteResolver !== null) {\n      this._layoutCompleteResolver();\n    }\n    this._resetLayoutCompleteState();\n  }\n  _resetLayoutCompleteState() {\n    this._layoutCompletePromise = null;\n    this._layoutCompleteResolver = null;\n    this._layoutCompleteRejecter = null;\n    this._pendingLayoutComplete = null;\n  }\n  /**\n   * Render and update the view at the next opportunity with the given\n   * hostElement size.\n   */\n  _hostElementSizeChanged() {\n    this._schedule(this._updateLayout);\n  }\n  // TODO (graynorton): Rethink how this works. Probably child loading is too specific\n  // to have dedicated support for; might want some more generic lifecycle hooks for\n  // layouts to use. Possibly handle measurement this way, too, or maybe that remains\n  // a first-class feature?\n  _childLoaded() {}\n  // This is the callback for the ResizeObserver that watches the\n  // virtualizer's children. We land here at the end of every virtualizer\n  // update cycle that results in changes to physical items, and we also\n  // end up here if one or more children change size independently of\n  // the virtualizer update cycle.\n  _childrenSizeChanged(changes) {\n    var _this$_layout2;\n    // Only measure if the layout requires it\n    if ((_this$_layout2 = this._layout) !== null && _this$_layout2 !== void 0 && _this$_layout2.measureChildren) {\n      for (const change of changes) {\n        this._toBeMeasured.set(change.target, change.contentRect);\n      }\n      this._measureChildren();\n    }\n    // If this is the end of an update cycle, we need to reset some\n    // internal state. This should be a harmless no-op if we're handling\n    // an out-of-cycle ResizeObserver callback, so we don't need to\n    // distinguish between the two cases.\n    this._scheduleLayoutComplete();\n    this._itemsChanged = false;\n    this._rangeChanged = false;\n  }\n}\nfunction getMargins(el) {\n  const style = window.getComputedStyle(el);\n  return {\n    marginTop: getMarginValue(style.marginTop),\n    marginRight: getMarginValue(style.marginRight),\n    marginBottom: getMarginValue(style.marginBottom),\n    marginLeft: getMarginValue(style.marginLeft)\n  };\n}\nfunction getMarginValue(value) {\n  const float = value ? parseFloat(value) : NaN;\n  return Number.isNaN(float) ? 0 : float;\n}\n// TODO (graynorton): Deal with iframes?\nfunction getParentElement(el) {\n  if (el.assignedSlot !== null) {\n    return el.assignedSlot;\n  }\n  if (el.parentElement !== null) {\n    return el.parentElement;\n  }\n  const parentNode = el.parentNode;\n  if (parentNode && parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n    return parentNode.host || null;\n  }\n  return null;\n}\n///\nfunction getElementAncestors(el, includeSelf = false) {\n  const ancestors = [];\n  let parent = includeSelf ? el : getParentElement(el);\n  while (parent !== null) {\n    ancestors.push(parent);\n    parent = getParentElement(parent);\n  }\n  return ancestors;\n}\nfunction getClippingAncestors(el, includeSelf = false) {\n  let foundFixed = false;\n  return getElementAncestors(el, includeSelf).filter(a => {\n    if (foundFixed) {\n      return false;\n    }\n    const style = getComputedStyle(a);\n    foundFixed = style.position === 'fixed';\n    return style.overflow !== 'visible';\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@lit-labs/virtualizer/Virtualizer.js\n");

/***/ }),

/***/ "./node_modules/@lit-labs/virtualizer/events.js":
/*!******************************************************!*\
  !*** ./node_modules/@lit-labs/virtualizer/events.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RangeChangedEvent: () => (/* binding */ RangeChangedEvent),\n/* harmony export */   UnpinnedEvent: () => (/* binding */ UnpinnedEvent),\n/* harmony export */   VisibilityChangedEvent: () => (/* binding */ VisibilityChangedEvent)\n/* harmony export */ });\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nclass RangeChangedEvent extends Event {\n  constructor(range) {\n    super(RangeChangedEvent.eventName, {\n      bubbles: false\n    });\n    this.first = range.first;\n    this.last = range.last;\n  }\n}\nRangeChangedEvent.eventName = 'rangeChanged';\nclass VisibilityChangedEvent extends Event {\n  constructor(range) {\n    super(VisibilityChangedEvent.eventName, {\n      bubbles: false\n    });\n    this.first = range.first;\n    this.last = range.last;\n  }\n}\nVisibilityChangedEvent.eventName = 'visibilityChanged';\nclass UnpinnedEvent extends Event {\n  constructor() {\n    super(UnpinnedEvent.eventName, {\n      bubbles: false\n    });\n  }\n}\nUnpinnedEvent.eventName = 'unpinned';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGxpdC1sYWJzL3ZpcnR1YWxpemVyL2V2ZW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Ozs7QUFNQTtBQU1BO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQVRBO0FBWUE7QUFNQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFUQTtBQVlBO0FBR0E7QUFDQTtBQUFBO0FBQUE7QUFDQTs7QUFKQSIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbWUtYXNzaXN0YW50LWZyb250ZW5kL3NyYy9ldmVudHMudHM/MzE1MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cblxuZXhwb3J0IGNsYXNzIFJhbmdlQ2hhbmdlZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICBzdGF0aWMgZXZlbnROYW1lID0gJ3JhbmdlQ2hhbmdlZCc7XG5cbiAgZmlyc3Q6IG51bWJlcjtcbiAgbGFzdDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHJhbmdlOiBSYW5nZSkge1xuICAgIHN1cGVyKFJhbmdlQ2hhbmdlZEV2ZW50LmV2ZW50TmFtZSwge2J1YmJsZXM6IGZhbHNlfSk7XG4gICAgdGhpcy5maXJzdCA9IHJhbmdlLmZpcnN0O1xuICAgIHRoaXMubGFzdCA9IHJhbmdlLmxhc3Q7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFZpc2liaWxpdHlDaGFuZ2VkRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gIHN0YXRpYyBldmVudE5hbWUgPSAndmlzaWJpbGl0eUNoYW5nZWQnO1xuXG4gIGZpcnN0OiBudW1iZXI7XG4gIGxhc3Q6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihyYW5nZTogUmFuZ2UpIHtcbiAgICBzdXBlcihWaXNpYmlsaXR5Q2hhbmdlZEV2ZW50LmV2ZW50TmFtZSwge2J1YmJsZXM6IGZhbHNlfSk7XG4gICAgdGhpcy5maXJzdCA9IHJhbmdlLmZpcnN0O1xuICAgIHRoaXMubGFzdCA9IHJhbmdlLmxhc3Q7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFVucGlubmVkRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gIHN0YXRpYyBldmVudE5hbWUgPSAndW5waW5uZWQnO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFVucGlubmVkRXZlbnQuZXZlbnROYW1lLCB7YnViYmxlczogZmFsc2V9KTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgUmFuZ2Uge1xuICBmaXJzdDogbnVtYmVyO1xuICBsYXN0OiBudW1iZXI7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@lit-labs/virtualizer/events.js\n");

/***/ }),

/***/ "./node_modules/@lit-labs/virtualizer/lit-virtualizer.js":
/*!***************************************************************!*\
  !*** ./node_modules/@lit-labs/virtualizer/lit-virtualizer.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LitVirtualizer: () => (/* reexport safe */ _LitVirtualizer_js__WEBPACK_IMPORTED_MODULE_0__.LitVirtualizer),\n/* harmony export */   RangeChangedEvent: () => (/* reexport safe */ _events_js__WEBPACK_IMPORTED_MODULE_1__.RangeChangedEvent),\n/* harmony export */   VisibilityChangedEvent: () => (/* reexport safe */ _events_js__WEBPACK_IMPORTED_MODULE_1__.VisibilityChangedEvent)\n/* harmony export */ });\n/* harmony import */ var _LitVirtualizer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LitVirtualizer.js */ \"./node_modules/@lit-labs/virtualizer/LitVirtualizer.js\");\n/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./events.js */ \"./node_modules/@lit-labs/virtualizer/events.js\");\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n\n\n/**\n * Import this module to declare the lit-virtualizer custom element.\n */\ncustomElements.define('lit-virtualizer', _LitVirtualizer_js__WEBPACK_IMPORTED_MODULE_0__.LitVirtualizer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGxpdC1sYWJzL3ZpcnR1YWxpemVyL2xpdC12aXJ0dWFsaXplci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7OztBQU1BO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbWUtYXNzaXN0YW50LWZyb250ZW5kL3NyYy9saXQtdmlydHVhbGl6ZXIudHM/MzhiYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cblxuaW1wb3J0IHtMaXRWaXJ0dWFsaXplcn0gZnJvbSAnLi9MaXRWaXJ0dWFsaXplci5qcyc7XG5leHBvcnQge0xpdFZpcnR1YWxpemVyfTtcbmV4cG9ydCB7UmFuZ2VDaGFuZ2VkRXZlbnQsIFZpc2liaWxpdHlDaGFuZ2VkRXZlbnR9IGZyb20gJy4vZXZlbnRzLmpzJztcblxuLyoqXG4gKiBJbXBvcnQgdGhpcyBtb2R1bGUgdG8gZGVjbGFyZSB0aGUgbGl0LXZpcnR1YWxpemVyIGN1c3RvbSBlbGVtZW50LlxuICovXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2xpdC12aXJ0dWFsaXplcicsIExpdFZpcnR1YWxpemVyKTtcblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgSFRNTEVsZW1lbnRUYWdOYW1lTWFwIHtcbiAgICAnbGl0LXZpcnR1YWxpemVyJzogTGl0VmlydHVhbGl6ZXI7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@lit-labs/virtualizer/lit-virtualizer.js\n");

/***/ }),

/***/ "./node_modules/@lit-labs/virtualizer/virtualize.js":
/*!**********************************************************!*\
  !*** ./node_modules/@lit-labs/virtualizer/virtualize.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultKeyFunction: () => (/* binding */ defaultKeyFunction),\n/* harmony export */   defaultRenderItem: () => (/* binding */ defaultRenderItem),\n/* harmony export */   virtualize: () => (/* binding */ virtualize),\n/* harmony export */   virtualizerRef: () => (/* reexport safe */ _Virtualizer_js__WEBPACK_IMPORTED_MODULE_4__.virtualizerRef)\n/* harmony export */ });\n/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ \"./node_modules/lit/index.js\");\n/* harmony import */ var lit_directive_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit/directive.js */ \"./node_modules/lit/directive.js\");\n/* harmony import */ var lit_async_directive_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lit/async-directive.js */ \"./node_modules/lit/async-directive.js\");\n/* harmony import */ var lit_directives_repeat_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lit/directives/repeat.js */ \"./node_modules/lit/directives/repeat.js\");\n/* harmony import */ var _Virtualizer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Virtualizer.js */ \"./node_modules/@lit-labs/virtualizer/Virtualizer.js\");\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n\n\n\n\n\nconst defaultKeyFunction = item => item;\nconst defaultRenderItem = (item, idx) => (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`${idx}: ${JSON.stringify(item, null, 2)}`;\nclass VirtualizeDirective extends lit_async_directive_js__WEBPACK_IMPORTED_MODULE_2__.AsyncDirective {\n  constructor(part) {\n    super(part);\n    this._virtualizer = null;\n    this._first = 0;\n    this._last = -1;\n    this._renderItem = (item, idx) => defaultRenderItem(item, idx + this._first);\n    this._keyFunction = (item, idx) => defaultKeyFunction(item, idx + this._first);\n    this._items = [];\n    if (part.type !== lit_directive_js__WEBPACK_IMPORTED_MODULE_1__.PartType.CHILD) {\n      throw new Error('The virtualize directive can only be used in child expressions');\n    }\n  }\n  render(config) {\n    if (config) {\n      this._setFunctions(config);\n    }\n    const itemsToRender = [];\n    if (this._first >= 0 && this._last >= this._first) {\n      for (let i = this._first; i <= this._last; i++) {\n        itemsToRender.push(this._items[i]);\n      }\n    }\n    return (0,lit_directives_repeat_js__WEBPACK_IMPORTED_MODULE_3__.repeat)(itemsToRender, this._keyFunction, this._renderItem);\n  }\n  update(part, [config]) {\n    this._setFunctions(config);\n    const itemsChanged = this._items !== config.items;\n    this._items = config.items || [];\n    if (this._virtualizer) {\n      this._updateVirtualizerConfig(part, config);\n    } else {\n      this._initialize(part, config);\n    }\n    return itemsChanged ? lit__WEBPACK_IMPORTED_MODULE_0__.noChange : this.render();\n  }\n  async _updateVirtualizerConfig(part, config) {\n    const compatible = await this._virtualizer.updateLayoutConfig(config.layout || {});\n    if (!compatible) {\n      const hostElement = part.parentNode;\n      this._makeVirtualizer(hostElement, config);\n    }\n    this._virtualizer.items = this._items;\n  }\n  _setFunctions(config) {\n    const {\n      renderItem,\n      keyFunction\n    } = config;\n    if (renderItem) {\n      this._renderItem = (item, idx) => renderItem(item, idx + this._first);\n    }\n    if (keyFunction) {\n      this._keyFunction = (item, idx) => keyFunction(item, idx + this._first);\n    }\n  }\n  _makeVirtualizer(hostElement, config) {\n    if (this._virtualizer) {\n      this._virtualizer.disconnected();\n    }\n    const {\n      layout,\n      scroller,\n      items\n    } = config;\n    this._virtualizer = new _Virtualizer_js__WEBPACK_IMPORTED_MODULE_4__.Virtualizer({\n      hostElement,\n      layout,\n      scroller\n    });\n    this._virtualizer.items = items;\n    this._virtualizer.connected();\n  }\n  _initialize(part, config) {\n    const hostElement = part.parentNode;\n    if (hostElement && hostElement.nodeType === 1) {\n      hostElement.addEventListener('rangeChanged', e => {\n        this._first = e.first;\n        this._last = e.last;\n        this.setValue(this.render());\n      });\n      this._makeVirtualizer(hostElement, config);\n    }\n  }\n  disconnected() {\n    var _this$_virtualizer;\n    (_this$_virtualizer = this._virtualizer) === null || _this$_virtualizer === void 0 || _this$_virtualizer.disconnected();\n  }\n  reconnected() {\n    var _this$_virtualizer2;\n    (_this$_virtualizer2 = this._virtualizer) === null || _this$_virtualizer2 === void 0 || _this$_virtualizer2.connected();\n  }\n}\nconst virtualize = (0,lit_directive_js__WEBPACK_IMPORTED_MODULE_1__.directive)(VirtualizeDirective);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGxpdC1sYWJzL3ZpcnR1YWxpemVyL3ZpcnR1YWxpemUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBOEJBO0FBQ0E7QUFLQTtBQVVBO0FBQ0E7QUFWQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFJQTtBQUNBOztBQUlBO0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBRUE7QUFJQTtBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUVBO0FBSUE7QUFDQTs7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7O0FBR0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ob21lLWFzc2lzdGFudC1mcm9udGVuZC9zcmMvdmlydHVhbGl6ZS50cz81ZTg3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuXG5pbXBvcnQge1RlbXBsYXRlUmVzdWx0LCBDaGlsZFBhcnQsIGh0bWwsIG5vQ2hhbmdlfSBmcm9tICdsaXQnO1xuaW1wb3J0IHtkaXJlY3RpdmUsIERpcmVjdGl2ZVJlc3VsdCwgUGFydEluZm8sIFBhcnRUeXBlfSBmcm9tICdsaXQvZGlyZWN0aXZlLmpzJztcbmltcG9ydCB7QXN5bmNEaXJlY3RpdmV9IGZyb20gJ2xpdC9hc3luYy1kaXJlY3RpdmUuanMnO1xuaW1wb3J0IHtyZXBlYXQsIEtleUZufSBmcm9tICdsaXQvZGlyZWN0aXZlcy9yZXBlYXQuanMnO1xuaW1wb3J0IHtWaXJ0dWFsaXplcn0gZnJvbSAnLi9WaXJ0dWFsaXplci5qcyc7XG5pbXBvcnQge1JhbmdlQ2hhbmdlZEV2ZW50fSBmcm9tICcuL2V2ZW50cy5qcyc7XG5pbXBvcnQge0xheW91dENvbmZpZ1ZhbHVlfSBmcm9tICcuL2xheW91dHMvc2hhcmVkL0xheW91dC5qcyc7XG5cbmV4cG9ydCB7dmlydHVhbGl6ZXJSZWYsIFZpcnR1YWxpemVySG9zdEVsZW1lbnR9IGZyb20gJy4vVmlydHVhbGl6ZXIuanMnO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIHZpcnR1YWxpemUgZGlyZWN0aXZlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFZpcnR1YWxpemVEaXJlY3RpdmVDb25maWc8VD4ge1xuICAvKipcbiAgICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBsaXQtaHRtbCBUZW1wbGF0ZVJlc3VsdC4gSXQgd2lsbCBiZSB1c2VkXG4gICAqIHRvIGdlbmVyYXRlIHRoZSBET00gZm9yIGVhY2ggaXRlbSBpbiB0aGUgdmlydHVhbCBsaXN0LlxuICAgKi9cbiAgcmVuZGVySXRlbT86IFJlbmRlckl0ZW1GdW5jdGlvbjxUPjtcblxuICBrZXlGdW5jdGlvbj86IEtleUZuPFQ+O1xuXG4gIHNjcm9sbGVyPzogYm9vbGVhbjtcblxuICAvLyBUT0RPIChncmF5bm9ydG9uKTogRG9jdW1lbnQuLi5cbiAgbGF5b3V0PzogTGF5b3V0Q29uZmlnVmFsdWU7XG5cbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIGl0ZW1zIHRvIGRpc3BsYXkgdmlhIHRoZSByZW5kZXJJdGVtIGZ1bmN0aW9uLlxuICAgKi9cbiAgaXRlbXM/OiBBcnJheTxUPjtcbn1cblxuZXhwb3J0IHR5cGUgUmVuZGVySXRlbUZ1bmN0aW9uPFQgPSB1bmtub3duPiA9IChcbiAgaXRlbTogVCxcbiAgaW5kZXg6IG51bWJlclxuKSA9PiBUZW1wbGF0ZVJlc3VsdDtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRLZXlGdW5jdGlvbjogS2V5Rm48dW5rbm93bj4gPSAoaXRlbTogdW5rbm93bikgPT4gaXRlbTtcbmV4cG9ydCBjb25zdCBkZWZhdWx0UmVuZGVySXRlbTogUmVuZGVySXRlbUZ1bmN0aW9uPHVua25vd24+ID0gKFxuICBpdGVtOiB1bmtub3duLFxuICBpZHg6IG51bWJlclxuKSA9PiBodG1sYCR7aWR4fTogJHtKU09OLnN0cmluZ2lmeShpdGVtLCBudWxsLCAyKX1gO1xuXG5jbGFzcyBWaXJ0dWFsaXplRGlyZWN0aXZlPFQgPSB1bmtub3duPiBleHRlbmRzIEFzeW5jRGlyZWN0aXZlIHtcbiAgX3ZpcnR1YWxpemVyOiBWaXJ0dWFsaXplciB8IG51bGwgPSBudWxsO1xuICBfZmlyc3QgPSAwO1xuICBfbGFzdCA9IC0xO1xuICBfcmVuZGVySXRlbTogUmVuZGVySXRlbUZ1bmN0aW9uPFQ+ID0gKGl0ZW06IFQsIGlkeDogbnVtYmVyKSA9PlxuICAgIGRlZmF1bHRSZW5kZXJJdGVtKGl0ZW0sIGlkeCArIHRoaXMuX2ZpcnN0KTtcbiAgX2tleUZ1bmN0aW9uOiBLZXlGbjxUPiA9IChpdGVtOiBULCBpZHg6IG51bWJlcikgPT5cbiAgICBkZWZhdWx0S2V5RnVuY3Rpb24oaXRlbSwgaWR4ICsgdGhpcy5fZmlyc3QpO1xuICBfaXRlbXM6IEFycmF5PFQ+ID0gW107XG5cbiAgY29uc3RydWN0b3IocGFydDogUGFydEluZm8pIHtcbiAgICBzdXBlcihwYXJ0KTtcbiAgICBpZiAocGFydC50eXBlICE9PSBQYXJ0VHlwZS5DSElMRCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHZpcnR1YWxpemUgZGlyZWN0aXZlIGNhbiBvbmx5IGJlIHVzZWQgaW4gY2hpbGQgZXhwcmVzc2lvbnMnXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcihjb25maWc/OiBWaXJ0dWFsaXplRGlyZWN0aXZlQ29uZmlnPFQ+KSB7XG4gICAgaWYgKGNvbmZpZykge1xuICAgICAgdGhpcy5fc2V0RnVuY3Rpb25zKGNvbmZpZyk7XG4gICAgfVxuICAgIGNvbnN0IGl0ZW1zVG9SZW5kZXI6IEFycmF5PFQ+ID0gW107XG5cbiAgICBpZiAodGhpcy5fZmlyc3QgPj0gMCAmJiB0aGlzLl9sYXN0ID49IHRoaXMuX2ZpcnN0KSB7XG4gICAgICBmb3IgKGxldCBpID0gdGhpcy5fZmlyc3Q7IGkgPD0gdGhpcy5fbGFzdDsgaSsrKSB7XG4gICAgICAgIGl0ZW1zVG9SZW5kZXIucHVzaCh0aGlzLl9pdGVtc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXBlYXQoaXRlbXNUb1JlbmRlciwgdGhpcy5fa2V5RnVuY3Rpb24sIHRoaXMuX3JlbmRlckl0ZW0pO1xuICB9XG5cbiAgdXBkYXRlKHBhcnQ6IENoaWxkUGFydCwgW2NvbmZpZ106IFtWaXJ0dWFsaXplRGlyZWN0aXZlQ29uZmlnPFQ+XSkge1xuICAgIHRoaXMuX3NldEZ1bmN0aW9ucyhjb25maWcpO1xuICAgIGNvbnN0IGl0ZW1zQ2hhbmdlZCA9IHRoaXMuX2l0ZW1zICE9PSBjb25maWcuaXRlbXM7XG4gICAgdGhpcy5faXRlbXMgPSBjb25maWcuaXRlbXMgfHwgW107XG4gICAgaWYgKHRoaXMuX3ZpcnR1YWxpemVyKSB7XG4gICAgICB0aGlzLl91cGRhdGVWaXJ0dWFsaXplckNvbmZpZyhwYXJ0LCBjb25maWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9pbml0aWFsaXplKHBhcnQsIGNvbmZpZyk7XG4gICAgfVxuICAgIHJldHVybiBpdGVtc0NoYW5nZWQgPyBub0NoYW5nZSA6IHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIF91cGRhdGVWaXJ0dWFsaXplckNvbmZpZyhcbiAgICBwYXJ0OiBDaGlsZFBhcnQsXG4gICAgY29uZmlnOiBWaXJ0dWFsaXplRGlyZWN0aXZlQ29uZmlnPFQ+XG4gICkge1xuICAgIGNvbnN0IGNvbXBhdGlibGUgPSBhd2FpdCB0aGlzLl92aXJ0dWFsaXplciEudXBkYXRlTGF5b3V0Q29uZmlnKFxuICAgICAgY29uZmlnLmxheW91dCB8fCB7fVxuICAgICk7XG4gICAgaWYgKCFjb21wYXRpYmxlKSB7XG4gICAgICBjb25zdCBob3N0RWxlbWVudCA9IHBhcnQucGFyZW50Tm9kZSBhcyBIVE1MRWxlbWVudDtcbiAgICAgIHRoaXMuX21ha2VWaXJ0dWFsaXplcihob3N0RWxlbWVudCwgY29uZmlnKTtcbiAgICB9XG4gICAgdGhpcy5fdmlydHVhbGl6ZXIhLml0ZW1zID0gdGhpcy5faXRlbXM7XG4gIH1cblxuICBwcml2YXRlIF9zZXRGdW5jdGlvbnMoY29uZmlnOiBWaXJ0dWFsaXplRGlyZWN0aXZlQ29uZmlnPFQ+KSB7XG4gICAgY29uc3Qge3JlbmRlckl0ZW0sIGtleUZ1bmN0aW9ufSA9IGNvbmZpZztcbiAgICBpZiAocmVuZGVySXRlbSkge1xuICAgICAgdGhpcy5fcmVuZGVySXRlbSA9IChpdGVtLCBpZHgpID0+IHJlbmRlckl0ZW0oaXRlbSwgaWR4ICsgdGhpcy5fZmlyc3QpO1xuICAgIH1cbiAgICBpZiAoa2V5RnVuY3Rpb24pIHtcbiAgICAgIHRoaXMuX2tleUZ1bmN0aW9uID0gKGl0ZW0sIGlkeCkgPT4ga2V5RnVuY3Rpb24oaXRlbSwgaWR4ICsgdGhpcy5fZmlyc3QpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX21ha2VWaXJ0dWFsaXplcihcbiAgICBob3N0RWxlbWVudDogSFRNTEVsZW1lbnQsXG4gICAgY29uZmlnOiBWaXJ0dWFsaXplRGlyZWN0aXZlQ29uZmlnPFQ+XG4gICkge1xuICAgIGlmICh0aGlzLl92aXJ0dWFsaXplcikge1xuICAgICAgdGhpcy5fdmlydHVhbGl6ZXIuZGlzY29ubmVjdGVkKCk7XG4gICAgfVxuICAgIGNvbnN0IHtsYXlvdXQsIHNjcm9sbGVyLCBpdGVtc30gPSBjb25maWc7XG4gICAgdGhpcy5fdmlydHVhbGl6ZXIgPSBuZXcgVmlydHVhbGl6ZXIoe2hvc3RFbGVtZW50LCBsYXlvdXQsIHNjcm9sbGVyfSk7XG4gICAgdGhpcy5fdmlydHVhbGl6ZXIuaXRlbXMgPSBpdGVtcztcbiAgICB0aGlzLl92aXJ0dWFsaXplci5jb25uZWN0ZWQoKTtcbiAgfVxuXG4gIHByaXZhdGUgX2luaXRpYWxpemUocGFydDogQ2hpbGRQYXJ0LCBjb25maWc6IFZpcnR1YWxpemVEaXJlY3RpdmVDb25maWc8VD4pIHtcbiAgICBjb25zdCBob3N0RWxlbWVudCA9IHBhcnQucGFyZW50Tm9kZSBhcyBIVE1MRWxlbWVudDtcbiAgICBpZiAoaG9zdEVsZW1lbnQgJiYgaG9zdEVsZW1lbnQubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgIGhvc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3JhbmdlQ2hhbmdlZCcsIChlOiBSYW5nZUNoYW5nZWRFdmVudCkgPT4ge1xuICAgICAgICB0aGlzLl9maXJzdCA9IGUuZmlyc3Q7XG4gICAgICAgIHRoaXMuX2xhc3QgPSBlLmxhc3Q7XG4gICAgICAgIHRoaXMuc2V0VmFsdWUodGhpcy5yZW5kZXIoKSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX21ha2VWaXJ0dWFsaXplcihob3N0RWxlbWVudCwgY29uZmlnKTtcbiAgICB9XG4gIH1cblxuICBkaXNjb25uZWN0ZWQoKSB7XG4gICAgdGhpcy5fdmlydHVhbGl6ZXI/LmRpc2Nvbm5lY3RlZCgpO1xuICB9XG5cbiAgcmVjb25uZWN0ZWQoKSB7XG4gICAgdGhpcy5fdmlydHVhbGl6ZXI/LmNvbm5lY3RlZCgpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCB2aXJ0dWFsaXplID0gZGlyZWN0aXZlKFZpcnR1YWxpemVEaXJlY3RpdmUpIGFzIDxUPihcbiAgY29uZmlnPzogVmlydHVhbGl6ZURpcmVjdGl2ZUNvbmZpZzxUPlxuKSA9PiBEaXJlY3RpdmVSZXN1bHQ8dHlwZW9mIFZpcnR1YWxpemVEaXJlY3RpdmU+O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@lit-labs/virtualizer/virtualize.js\n");

/***/ }),

/***/ "./node_modules/lit-html/development/async-directive.js":
/*!**************************************************************!*\
  !*** ./node_modules/lit-html/development/async-directive.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncDirective: () => (/* binding */ AsyncDirective),\n/* harmony export */   Directive: () => (/* reexport safe */ _directive_js__WEBPACK_IMPORTED_MODULE_1__.Directive),\n/* harmony export */   PartType: () => (/* reexport safe */ _directive_js__WEBPACK_IMPORTED_MODULE_1__.PartType),\n/* harmony export */   directive: () => (/* reexport safe */ _directive_js__WEBPACK_IMPORTED_MODULE_1__.directive)\n/* harmony export */ });\n/* harmony import */ var _directive_helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./directive-helpers.js */ \"./node_modules/lit-html/development/directive-helpers.js\");\n/* harmony import */ var _directive_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./directive.js */ \"./node_modules/lit-html/development/directive.js\");\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n\n\nconst DEV_MODE = true;\n/**\n * Recursively walks down the tree of Parts/TemplateInstances/Directives to set\n * the connected state of directives and run `disconnected`/ `reconnected`\n * callbacks.\n *\n * @return True if there were children to disconnect; false otherwise\n */\nconst notifyChildrenConnectedChanged = (parent, isConnected) => {\n  var _a, _b;\n  const children = parent._$disconnectableChildren;\n  if (children === undefined) {\n    return false;\n  }\n  for (const obj of children) {\n    // The existence of `_$notifyDirectiveConnectionChanged` is used as a \"brand\" to\n    // disambiguate AsyncDirectives from other DisconnectableChildren\n    // (as opposed to using an instanceof check to know when to call it); the\n    // redundancy of \"Directive\" in the API name is to avoid conflicting with\n    // `_$notifyConnectionChanged`, which exists `ChildParts` which are also in\n    // this list\n    // Disconnect Directive (and any nested directives contained within)\n    // This property needs to remain unminified.\n    (_b = (_a = obj)['_$notifyDirectiveConnectionChanged']) === null || _b === void 0 ? void 0 : _b.call(_a, isConnected, false);\n    // Disconnect Part/TemplateInstance\n    notifyChildrenConnectedChanged(obj, isConnected);\n  }\n  return true;\n};\n/**\n * Removes the given child from its parent list of disconnectable children, and\n * if the parent list becomes empty as a result, removes the parent from its\n * parent, and so forth up the tree when that causes subsequent parent lists to\n * become empty.\n */\nconst removeDisconnectableFromParent = obj => {\n  let parent, children;\n  do {\n    if ((parent = obj._$parent) === undefined) {\n      break;\n    }\n    children = parent._$disconnectableChildren;\n    children.delete(obj);\n    obj = parent;\n  } while ((children === null || children === void 0 ? void 0 : children.size) === 0);\n};\nconst addDisconnectableToParent = obj => {\n  // Climb the parent tree, creating a sparse tree of children needing\n  // disconnection\n  for (let parent; parent = obj._$parent; obj = parent) {\n    let children = parent._$disconnectableChildren;\n    if (children === undefined) {\n      parent._$disconnectableChildren = children = new Set();\n    } else if (children.has(obj)) {\n      // Once we've reached a parent that already contains this child, we\n      // can short-circuit\n      break;\n    }\n    children.add(obj);\n    installDisconnectAPI(parent);\n  }\n};\n/**\n * Changes the parent reference of the ChildPart, and updates the sparse tree of\n * Disconnectable children accordingly.\n *\n * Note, this method will be patched onto ChildPart instances and called from\n * the core code when parts are moved between different parents.\n */\nfunction reparentDisconnectables(newParent) {\n  if (this._$disconnectableChildren !== undefined) {\n    removeDisconnectableFromParent(this);\n    this._$parent = newParent;\n    addDisconnectableToParent(this);\n  } else {\n    this._$parent = newParent;\n  }\n}\n/**\n * Sets the connected state on any directives contained within the committed\n * value of this part (i.e. within a TemplateInstance or iterable of\n * ChildParts) and runs their `disconnected`/`reconnected`s, as well as within\n * any directives stored on the ChildPart (when `valueOnly` is false).\n *\n * `isClearingValue` should be passed as `true` on a top-level part that is\n * clearing itself, and not as a result of recursively disconnecting directives\n * as part of a `clear` operation higher up the tree. This both ensures that any\n * directive on this ChildPart that produced a value that caused the clear\n * operation is not disconnected, and also serves as a performance optimization\n * to avoid needless bookkeeping when a subtree is going away; when clearing a\n * subtree, only the top-most part need to remove itself from the parent.\n *\n * `fromPartIndex` is passed only in the case of a partial `_clear` running as a\n * result of truncating an iterable.\n *\n * Note, this method will be patched onto ChildPart instances and called from the\n * core code when parts are cleared or the connection state is changed by the\n * user.\n */\nfunction notifyChildPartConnectedChanged(isConnected, isClearingValue = false, fromPartIndex = 0) {\n  const value = this._$committedValue;\n  const children = this._$disconnectableChildren;\n  if (children === undefined || children.size === 0) {\n    return;\n  }\n  if (isClearingValue) {\n    if (Array.isArray(value)) {\n      // Iterable case: Any ChildParts created by the iterable should be\n      // disconnected and removed from this ChildPart's disconnectable\n      // children (starting at `fromPartIndex` in the case of truncation)\n      for (let i = fromPartIndex; i < value.length; i++) {\n        notifyChildrenConnectedChanged(value[i], false);\n        removeDisconnectableFromParent(value[i]);\n      }\n    } else if (value != null) {\n      // TemplateInstance case: If the value has disconnectable children (will\n      // only be in the case that it is a TemplateInstance), we disconnect it\n      // and remove it from this ChildPart's disconnectable children\n      notifyChildrenConnectedChanged(value, false);\n      removeDisconnectableFromParent(value);\n    }\n  } else {\n    notifyChildrenConnectedChanged(this, isConnected);\n  }\n}\n/**\n * Patches disconnection API onto ChildParts.\n */\nconst installDisconnectAPI = obj => {\n  var _a, _b;\n  var _c, _d;\n  if (obj.type == _directive_js__WEBPACK_IMPORTED_MODULE_1__.PartType.CHILD) {\n    (_a = (_c = obj)._$notifyConnectionChanged) !== null && _a !== void 0 ? _a : _c._$notifyConnectionChanged = notifyChildPartConnectedChanged;\n    (_b = (_d = obj)._$reparentDisconnectables) !== null && _b !== void 0 ? _b : _d._$reparentDisconnectables = reparentDisconnectables;\n  }\n};\n/**\n * An abstract `Directive` base class whose `disconnected` method will be\n * called when the part containing the directive is cleared as a result of\n * re-rendering, or when the user calls `part.setConnected(false)` on\n * a part that was previously rendered containing the directive (as happens\n * when e.g. a LitElement disconnects from the DOM).\n *\n * If `part.setConnected(true)` is subsequently called on a\n * containing part, the directive's `reconnected` method will be called prior\n * to its next `update`/`render` callbacks. When implementing `disconnected`,\n * `reconnected` should also be implemented to be compatible with reconnection.\n *\n * Note that updates may occur while the directive is disconnected. As such,\n * directives should generally check the `this.isConnected` flag during\n * render/update to determine whether it is safe to subscribe to resources\n * that may prevent garbage collection.\n */\nclass AsyncDirective extends _directive_js__WEBPACK_IMPORTED_MODULE_1__.Directive {\n  constructor() {\n    super(...arguments);\n    // @internal\n    this._$disconnectableChildren = undefined;\n  }\n  /**\n   * Initialize the part with internal fields\n   * @param part\n   * @param parent\n   * @param attributeIndex\n   */\n  _$initialize(part, parent, attributeIndex) {\n    super._$initialize(part, parent, attributeIndex);\n    addDisconnectableToParent(this);\n    this.isConnected = part._$isConnected;\n  }\n  // This property needs to remain unminified.\n  /**\n   * Called from the core code when a directive is going away from a part (in\n   * which case `shouldRemoveFromParent` should be true), and from the\n   * `setChildrenConnected` helper function when recursively changing the\n   * connection state of a tree (in which case `shouldRemoveFromParent` should\n   * be false).\n   *\n   * @param isConnected\n   * @param isClearingDirective - True when the directive itself is being\n   *     removed; false when the tree is being disconnected\n   * @internal\n   */\n  ['_$notifyDirectiveConnectionChanged'](isConnected, isClearingDirective = true) {\n    var _a, _b;\n    if (isConnected !== this.isConnected) {\n      this.isConnected = isConnected;\n      if (isConnected) {\n        (_a = this.reconnected) === null || _a === void 0 ? void 0 : _a.call(this);\n      } else {\n        (_b = this.disconnected) === null || _b === void 0 ? void 0 : _b.call(this);\n      }\n    }\n    if (isClearingDirective) {\n      notifyChildrenConnectedChanged(this, isConnected);\n      removeDisconnectableFromParent(this);\n    }\n  }\n  /**\n   * Sets the value of the directive's Part outside the normal `update`/`render`\n   * lifecycle of a directive.\n   *\n   * This method should not be called synchronously from a directive's `update`\n   * or `render`.\n   *\n   * @param directive The directive to update\n   * @param value The value to set\n   */\n  setValue(value) {\n    if ((0,_directive_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isSingleExpression)(this.__part)) {\n      this.__part._$setValue(value, this);\n    } else {\n      // this.__attributeIndex will be defined in this case, but\n      // assert it in dev mode\n      if (DEV_MODE && this.__attributeIndex === undefined) {\n        throw new Error(`Expected this.__attributeIndex to be a number`);\n      }\n      const newValues = [...this.__part._$committedValue];\n      newValues[this.__attributeIndex] = value;\n      this.__part._$setValue(newValues, this, 0);\n    }\n  }\n  /**\n   * User callbacks for implementing logic to release any resources/subscriptions\n   * that may have been retained by this directive. Since directives may also be\n   * re-connected, `reconnected` should also be implemented to restore the\n   * working state of the directive prior to the next render.\n   */\n  disconnected() {}\n  reconnected() {}\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/lit-html/development/async-directive.js\n");

/***/ }),

/***/ "./node_modules/lit-html/development/directive-helpers.js":
/*!****************************************************************!*\
  !*** ./node_modules/lit-html/development/directive-helpers.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TemplateResultType: () => (/* binding */ TemplateResultType),\n/* harmony export */   clearPart: () => (/* binding */ clearPart),\n/* harmony export */   getCommittedValue: () => (/* binding */ getCommittedValue),\n/* harmony export */   getDirectiveClass: () => (/* binding */ getDirectiveClass),\n/* harmony export */   insertPart: () => (/* binding */ insertPart),\n/* harmony export */   isCompiledTemplateResult: () => (/* binding */ isCompiledTemplateResult),\n/* harmony export */   isDirectiveResult: () => (/* binding */ isDirectiveResult),\n/* harmony export */   isPrimitive: () => (/* binding */ isPrimitive),\n/* harmony export */   isSingleExpression: () => (/* binding */ isSingleExpression),\n/* harmony export */   isTemplateResult: () => (/* binding */ isTemplateResult),\n/* harmony export */   removePart: () => (/* binding */ removePart),\n/* harmony export */   setChildPartValue: () => (/* binding */ setChildPartValue),\n/* harmony export */   setCommittedValue: () => (/* binding */ setCommittedValue)\n/* harmony export */ });\n/* harmony import */ var _lit_html_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lit-html.js */ \"./node_modules/lit-html/development/lit-html.js\");\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar _a, _b;\n\nconst {\n  _ChildPart: ChildPart\n} = _lit_html_js__WEBPACK_IMPORTED_MODULE_0__._$LH;\nconst ENABLE_SHADYDOM_NOPATCH = true;\nconst wrap = ENABLE_SHADYDOM_NOPATCH && ((_a = window.ShadyDOM) === null || _a === void 0 ? void 0 : _a.inUse) && ((_b = window.ShadyDOM) === null || _b === void 0 ? void 0 : _b.noPatch) === true ? window.ShadyDOM.wrap : node => node;\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nconst isPrimitive = value => value === null || typeof value != 'object' && typeof value != 'function';\nconst TemplateResultType = {\n  HTML: 1,\n  SVG: 2\n};\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nconst isTemplateResult = (value, type) => type === undefined ?\n// This property needs to remain unminified.\n(value === null || value === void 0 ? void 0 : value['_$litType$']) !== undefined : (value === null || value === void 0 ? void 0 : value['_$litType$']) === type;\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nconst isCompiledTemplateResult = value => {\n  var _a;\n  return ((_a = value === null || value === void 0 ? void 0 : value['_$litType$']) === null || _a === void 0 ? void 0 : _a.h) != null;\n};\n/**\n * Tests if a value is a DirectiveResult.\n */\nconst isDirectiveResult = value =>\n// This property needs to remain unminified.\n(value === null || value === void 0 ? void 0 : value['_$litDirective$']) !== undefined;\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nconst getDirectiveClass = value =>\n// This property needs to remain unminified.\nvalue === null || value === void 0 ? void 0 : value['_$litDirective$'];\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nconst isSingleExpression = part => part.strings === undefined;\nconst createMarker = () => document.createComment('');\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nconst insertPart = (containerPart, refPart, part) => {\n  var _a;\n  const container = wrap(containerPart._$startNode).parentNode;\n  const refNode = refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(startNode, endNode, containerPart, containerPart.options);\n  } else {\n    const endNode = wrap(part._$endNode).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      (_a = part._$reparentDisconnectables) === null || _a === void 0 ? void 0 : _a.call(part, containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (part._$notifyConnectionChanged !== undefined && (newConnectionState = containerPart._$isConnected) !== oldParent._$isConnected) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start = part._$startNode;\n      while (start !== endNode) {\n        const n = wrap(start).nextSibling;\n        wrap(container).insertBefore(start, refNode);\n        start = n;\n      }\n    }\n  }\n  return part;\n};\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nconst setChildPartValue = (part, value, directiveParent = part) => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nconst setCommittedValue = (part, value = RESET_VALUE) => part._$committedValue = value;\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nconst getCommittedValue = part => part._$committedValue;\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nconst removePart = part => {\n  var _a;\n  (_a = part._$notifyConnectionChanged) === null || _a === void 0 ? void 0 : _a.call(part, false, true);\n  let start = part._$startNode;\n  const end = wrap(part._$endNode).nextSibling;\n  while (start !== end) {\n    const n = wrap(start).nextSibling;\n    wrap(start).remove();\n    start = n;\n  }\n};\nconst clearPart = part => {\n  part._$clear();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/lit-html/development/directive-helpers.js\n");

/***/ }),

/***/ "./node_modules/lit/async-directive.js":
/*!*********************************************!*\
  !*** ./node_modules/lit/async-directive.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AsyncDirective: () => (/* reexport safe */ lit_html_async_directive_js__WEBPACK_IMPORTED_MODULE_0__.AsyncDirective),
/* harmony export */   Directive: () => (/* reexport safe */ lit_html_async_directive_js__WEBPACK_IMPORTED_MODULE_0__.Directive),
/* harmony export */   PartType: () => (/* reexport safe */ lit_html_async_directive_js__WEBPACK_IMPORTED_MODULE_0__.PartType),
/* harmony export */   directive: () => (/* reexport safe */ lit_html_async_directive_js__WEBPACK_IMPORTED_MODULE_0__.directive)
/* harmony export */ });
/* harmony import */ var lit_html_async_directive_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit-html/async-directive.js */ "./node_modules/lit-html/development/async-directive.js");


/***/ }),

/***/ "./node_modules/lit/decorators/property.js":
/*!*************************************************!*\
  !*** ./node_modules/lit/decorators/property.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   property: () => (/* reexport safe */ _lit_reactive_element_decorators_property_js__WEBPACK_IMPORTED_MODULE_0__.property)
/* harmony export */ });
/* harmony import */ var _lit_reactive_element_decorators_property_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lit/reactive-element/decorators/property.js */ "./node_modules/@lit/reactive-element/development/decorators/property.js");


/***/ }),

/***/ "./node_modules/lit/directive.js":
/*!***************************************!*\
  !*** ./node_modules/lit/directive.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Directive: () => (/* reexport safe */ lit_html_directive_js__WEBPACK_IMPORTED_MODULE_0__.Directive),
/* harmony export */   PartType: () => (/* reexport safe */ lit_html_directive_js__WEBPACK_IMPORTED_MODULE_0__.PartType),
/* harmony export */   directive: () => (/* reexport safe */ lit_html_directive_js__WEBPACK_IMPORTED_MODULE_0__.directive)
/* harmony export */ });
/* harmony import */ var lit_html_directive_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit-html/directive.js */ "./node_modules/lit-html/development/directive.js");


/***/ })

};
