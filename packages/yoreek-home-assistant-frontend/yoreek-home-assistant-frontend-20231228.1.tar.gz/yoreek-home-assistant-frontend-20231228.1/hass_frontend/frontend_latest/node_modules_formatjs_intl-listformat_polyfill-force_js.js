/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
export const id = "node_modules_formatjs_intl-listformat_polyfill-force_js";
export const ids = ["node_modules_formatjs_intl-listformat_polyfill-force_js"];
export const modules = {

/***/ "./node_modules/@formatjs/intl-listformat/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@formatjs/intl-listformat/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\nvar ecma402_abstract_1 = __webpack_require__(/*! @formatjs/ecma402-abstract */ \"./node_modules/@formatjs/ecma402-abstract/lib/index.js\");\nvar intl_localematcher_1 = __webpack_require__(/*! @formatjs/intl-localematcher */ \"./node_modules/@formatjs/intl-localematcher/lib/index.js\");\nfunction validateInstance(instance, method) {\n  if (!(instance instanceof ListFormat)) {\n    throw new TypeError(\"Method Intl.ListFormat.prototype.\".concat(method, \" called on incompatible receiver \").concat(String(instance)));\n  }\n}\n/**\n * https://tc39.es/proposal-intl-list-format/#sec-createstringlistfromiterable\n * @param list list\n */\nfunction stringListFromIterable(list) {\n  if (list === undefined) {\n    return [];\n  }\n  var result = [];\n  for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {\n    var el = list_1[_i];\n    if (typeof el !== 'string') {\n      throw new TypeError(\"array list[\".concat(list.indexOf(el), \"] is not type String\"));\n    }\n    result.push(el);\n  }\n  return result;\n}\nfunction createPartsFromList(internalSlotMap, lf, list) {\n  var size = list.length;\n  if (size === 0) {\n    return [];\n  }\n  if (size === 2) {\n    var pattern = (0, ecma402_abstract_1.getInternalSlot)(internalSlotMap, lf, 'templatePair');\n    var first = {\n      type: 'element',\n      value: list[0]\n    };\n    var second = {\n      type: 'element',\n      value: list[1]\n    };\n    return deconstructPattern(pattern, {\n      '0': first,\n      '1': second\n    });\n  }\n  var last = {\n    type: 'element',\n    value: list[size - 1]\n  };\n  var parts = last;\n  var i = size - 2;\n  while (i >= 0) {\n    var pattern = void 0;\n    if (i === 0) {\n      pattern = (0, ecma402_abstract_1.getInternalSlot)(internalSlotMap, lf, 'templateStart');\n    } else if (i < size - 2) {\n      pattern = (0, ecma402_abstract_1.getInternalSlot)(internalSlotMap, lf, 'templateMiddle');\n    } else {\n      pattern = (0, ecma402_abstract_1.getInternalSlot)(internalSlotMap, lf, 'templateEnd');\n    }\n    var head = {\n      type: 'element',\n      value: list[i]\n    };\n    parts = deconstructPattern(pattern, {\n      '0': head,\n      '1': parts\n    });\n    i--;\n  }\n  return parts;\n}\nfunction deconstructPattern(pattern, placeables) {\n  var patternParts = (0, ecma402_abstract_1.PartitionPattern)(pattern);\n  var result = [];\n  for (var _i = 0, patternParts_1 = patternParts; _i < patternParts_1.length; _i++) {\n    var patternPart = patternParts_1[_i];\n    var part = patternPart.type;\n    if ((0, ecma402_abstract_1.isLiteralPart)(patternPart)) {\n      result.push({\n        type: 'literal',\n        value: patternPart.value\n      });\n    } else {\n      (0, ecma402_abstract_1.invariant)(part in placeables, \"\".concat(part, \" is missing from placables\"));\n      var subst = placeables[part];\n      if (Array.isArray(subst)) {\n        result.push.apply(result, subst);\n      } else {\n        result.push(subst);\n      }\n    }\n  }\n  return result;\n}\nvar ListFormat = /** @class */function () {\n  function ListFormat(locales, options) {\n    // test262/test/intl402/ListFormat/constructor/constructor/newtarget-undefined.js\n    // Cannot use `new.target` bc of IE11 & TS transpiles it to something else\n    var newTarget = this && this instanceof ListFormat ? this.constructor : void 0;\n    if (!newTarget) {\n      throw new TypeError(\"Intl.ListFormat must be called with 'new'\");\n    }\n    (0, ecma402_abstract_1.setInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'initializedListFormat', true);\n    var requestedLocales = (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales);\n    var opt = Object.create(null);\n    var opts = (0, ecma402_abstract_1.GetOptionsObject)(options);\n    var matcher = (0, ecma402_abstract_1.GetOption)(opts, 'localeMatcher', 'string', ['best fit', 'lookup'], 'best fit');\n    opt.localeMatcher = matcher;\n    var localeData = ListFormat.localeData;\n    var r = (0, intl_localematcher_1.ResolveLocale)(ListFormat.availableLocales, requestedLocales, opt, ListFormat.relevantExtensionKeys, localeData, ListFormat.getDefaultLocale);\n    (0, ecma402_abstract_1.setInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'locale', r.locale);\n    var type = (0, ecma402_abstract_1.GetOption)(opts, 'type', 'string', ['conjunction', 'disjunction', 'unit'], 'conjunction');\n    (0, ecma402_abstract_1.setInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'type', type);\n    var style = (0, ecma402_abstract_1.GetOption)(opts, 'style', 'string', ['long', 'short', 'narrow'], 'long');\n    (0, ecma402_abstract_1.setInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'style', style);\n    var dataLocale = r.dataLocale;\n    var dataLocaleData = localeData[dataLocale];\n    (0, ecma402_abstract_1.invariant)(!!dataLocaleData, \"Missing locale data for \".concat(dataLocale));\n    var dataLocaleTypes = dataLocaleData[type];\n    var templates = dataLocaleTypes[style];\n    (0, ecma402_abstract_1.setInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'templatePair', templates.pair);\n    (0, ecma402_abstract_1.setInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'templateStart', templates.start);\n    (0, ecma402_abstract_1.setInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'templateMiddle', templates.middle);\n    (0, ecma402_abstract_1.setInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'templateEnd', templates.end);\n  }\n  ListFormat.prototype.format = function (elements) {\n    validateInstance(this, 'format');\n    var result = '';\n    var parts = createPartsFromList(ListFormat.__INTERNAL_SLOT_MAP__, this, stringListFromIterable(elements));\n    if (!Array.isArray(parts)) {\n      return parts.value;\n    }\n    for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {\n      var p = parts_1[_i];\n      result += p.value;\n    }\n    return result;\n  };\n  ListFormat.prototype.formatToParts = function (elements) {\n    validateInstance(this, 'format');\n    var parts = createPartsFromList(ListFormat.__INTERNAL_SLOT_MAP__, this, stringListFromIterable(elements));\n    if (!Array.isArray(parts)) {\n      return [parts];\n    }\n    var result = [];\n    for (var _i = 0, parts_2 = parts; _i < parts_2.length; _i++) {\n      var part = parts_2[_i];\n      result.push(tslib_1.__assign({}, part));\n    }\n    return result;\n  };\n  ListFormat.prototype.resolvedOptions = function () {\n    validateInstance(this, 'resolvedOptions');\n    return {\n      locale: (0, ecma402_abstract_1.getInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'locale'),\n      type: (0, ecma402_abstract_1.getInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'type'),\n      style: (0, ecma402_abstract_1.getInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'style')\n    };\n  };\n  ListFormat.supportedLocalesOf = function (locales, options) {\n    // test262/test/intl402/ListFormat/constructor/supportedLocalesOf/result-type.js\n    return (0, ecma402_abstract_1.SupportedLocales)(ListFormat.availableLocales, (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales), options);\n  };\n  ListFormat.__addLocaleData = function () {\n    var data = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      data[_i] = arguments[_i];\n    }\n    for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {\n      var _b = data_1[_a],\n        d = _b.data,\n        locale = _b.locale;\n      var minimizedLocale = new Intl.Locale(locale).minimize().toString();\n      ListFormat.localeData[locale] = ListFormat.localeData[minimizedLocale] = d;\n      ListFormat.availableLocales.add(minimizedLocale);\n      ListFormat.availableLocales.add(locale);\n      if (!ListFormat.__defaultLocale) {\n        ListFormat.__defaultLocale = minimizedLocale;\n      }\n    }\n  };\n  ListFormat.getDefaultLocale = function () {\n    return ListFormat.__defaultLocale;\n  };\n  ListFormat.localeData = {};\n  ListFormat.availableLocales = new Set();\n  ListFormat.__defaultLocale = '';\n  ListFormat.relevantExtensionKeys = [];\n  ListFormat.polyfilled = true;\n  ListFormat.__INTERNAL_SLOT_MAP__ = new WeakMap();\n  return ListFormat;\n}();\nexports[\"default\"] = ListFormat;\ntry {\n  // IE11 does not have Symbol\n  if (typeof Symbol !== 'undefined') {\n    Object.defineProperty(ListFormat.prototype, Symbol.toStringTag, {\n      value: 'Intl.ListFormat',\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  // https://github.com/tc39/test262/blob/master/test/intl402/ListFormat/constructor/length.js\n  Object.defineProperty(ListFormat.prototype.constructor, 'length', {\n    value: 0,\n    writable: false,\n    enumerable: false,\n    configurable: true\n  });\n  // https://github.com/tc39/test262/blob/master/test/intl402/ListFormat/constructor/supportedLocalesOf/length.js\n  Object.defineProperty(ListFormat.supportedLocalesOf, 'length', {\n    value: 1,\n    writable: false,\n    enumerable: false,\n    configurable: true\n  });\n} catch (e) {\n  // Meta fix so we're test262-compliant, not important\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@formatjs/intl-listformat/index.js\n");

/***/ }),

/***/ "./node_modules/@formatjs/intl-listformat/polyfill-force.js":
/*!******************************************************************!*\
  !*** ./node_modules/@formatjs/intl-listformat/polyfill-force.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\nvar _1 = tslib_1.__importDefault(__webpack_require__(/*! ./ */ \"./node_modules/@formatjs/intl-listformat/index.js\"));\nObject.defineProperty(Intl, 'ListFormat', {\n  value: _1.default,\n  writable: true,\n  enumerable: false,\n  configurable: true\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ludGwtbGlzdGZvcm1hdC9wb2x5ZmlsbC1mb3JjZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaG9tZS1hc3Npc3RhbnQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ludGwtbGlzdGZvcm1hdC9wb2x5ZmlsbC1mb3JjZS5qcz8zODgyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG52YXIgXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9cIikpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGwsICdMaXN0Rm9ybWF0Jywge1xuICAgIHZhbHVlOiBfMS5kZWZhdWx0LFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbn0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@formatjs/intl-listformat/polyfill-force.js\n");

/***/ })

};
