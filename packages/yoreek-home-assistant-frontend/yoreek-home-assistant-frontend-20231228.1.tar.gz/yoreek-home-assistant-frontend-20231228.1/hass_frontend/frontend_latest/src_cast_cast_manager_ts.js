/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
export const id = "src_cast_cast_manager_ts";
export const ids = ["src_cast_cast_manager_ts"];
export const modules = {

/***/ "./src/cast/cast_framework.ts":
/*!************************************!*\
  !*** ./src/cast/cast_framework.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   castApiAvailable: () => (/* binding */ castApiAvailable)\n/* harmony export */ });\n/* harmony import */ var _common_dom_load_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/dom/load_resource */ \"./src/common/dom/load_resource.ts\");\n\nlet loadedPromise;\nconst castApiAvailable = () => {\n  if (loadedPromise) {\n    return loadedPromise;\n  }\n  loadedPromise = new Promise(resolve => {\n    window.__onGCastApiAvailable = resolve;\n  });\n  // Any element with a specific ID will get set as a JS variable on window\n  // This will override the cast SDK if the iconset is loaded afterwards.\n  // Conflicting IDs will no longer mess with window, so we'll just append one.\n  const el = document.createElement(\"div\");\n  el.id = \"cast\";\n  document.body.append(el);\n  (0,_common_dom_load_resource__WEBPACK_IMPORTED_MODULE_0__.loadJS)(\"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\");\n  return loadedPromise;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY2FzdC9jYXN0X2ZyYW1ld29yay50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbWUtYXNzaXN0YW50LWZyb250ZW5kLy4vc3JjL2Nhc3QvY2FzdF9mcmFtZXdvcmsudHM/NjQyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2FkSlMgfSBmcm9tIFwiLi4vY29tbW9uL2RvbS9sb2FkX3Jlc291cmNlXCI7XG5cbmxldCBsb2FkZWRQcm9taXNlOiBQcm9taXNlPGJvb2xlYW4+IHwgdW5kZWZpbmVkO1xuXG5leHBvcnQgY29uc3QgY2FzdEFwaUF2YWlsYWJsZSA9ICgpID0+IHtcbiAgaWYgKGxvYWRlZFByb21pc2UpIHtcbiAgICByZXR1cm4gbG9hZGVkUHJvbWlzZTtcbiAgfVxuXG4gIGxvYWRlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICh3aW5kb3cgYXMgYW55KS5fX29uR0Nhc3RBcGlBdmFpbGFibGUgPSByZXNvbHZlO1xuICB9KTtcbiAgLy8gQW55IGVsZW1lbnQgd2l0aCBhIHNwZWNpZmljIElEIHdpbGwgZ2V0IHNldCBhcyBhIEpTIHZhcmlhYmxlIG9uIHdpbmRvd1xuICAvLyBUaGlzIHdpbGwgb3ZlcnJpZGUgdGhlIGNhc3QgU0RLIGlmIHRoZSBpY29uc2V0IGlzIGxvYWRlZCBhZnRlcndhcmRzLlxuICAvLyBDb25mbGljdGluZyBJRHMgd2lsbCBubyBsb25nZXIgbWVzcyB3aXRoIHdpbmRvdywgc28gd2UnbGwganVzdCBhcHBlbmQgb25lLlxuICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGVsLmlkID0gXCJjYXN0XCI7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kKGVsKTtcblxuICBsb2FkSlMoXG4gICAgXCJodHRwczovL3d3dy5nc3RhdGljLmNvbS9jdi9qcy9zZW5kZXIvdjEvY2FzdF9zZW5kZXIuanM/bG9hZENhc3RGcmFtZXdvcms9MVwiXG4gICk7XG4gIHJldHVybiBsb2FkZWRQcm9taXNlO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/cast/cast_framework.ts\n");

/***/ }),

/***/ "./src/cast/cast_manager.ts":
/*!**********************************!*\
  !*** ./src/cast/cast_manager.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CastManager: () => (/* binding */ CastManager),\n/* harmony export */   getCastManager: () => (/* binding */ getCastManager)\n/* harmony export */ });\n/* harmony import */ var _cast_framework__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cast_framework */ \"./src/cast/cast_framework.ts\");\n/* harmony import */ var _const__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./const */ \"./src/cast/const.ts\");\n/* harmony import */ var _dev_const__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dev_const */ \"./src/cast/dev_const.ts\");\n/* harmony import */ var _receiver_messages__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./receiver_messages */ \"./src/cast/receiver_messages.ts\");\n/* eslint-disable no-console */\n\n\n\n\n\nlet managerProm;\n\n/*\nGeneral flow of Chromecast:\n\nChromecast sessions are started via the Chromecast button. When clicked, session\nstate changes to started. We then send authentication, which will cause the\nreceiver app to send a status update.\n\nIf a session is already active, we query the status to see what it is up to. If\na user presses the cast button we send auth if not connected yet, then send\ncommand as usual.\n*/\n\nclass CastManager {\n  constructor(auth) {\n    this.auth = void 0;\n    // If the cast connection is connected to our Hass.\n    this.status = void 0;\n    this._eventListeners = {};\n    this._sessionStateChanged = ev => {\n      if (true) {\n        console.log(\"Cast session state changed\", ev.sessionState);\n      }\n      // On Android, opening a new session always results in SESSION_RESUMED.\n      // So treat both as the same.\n      if (ev.sessionState === \"SESSION_STARTED\" || ev.sessionState === \"SESSION_RESUMED\") {\n        if (this.auth) {\n          (0,_receiver_messages__WEBPACK_IMPORTED_MODULE_3__.castSendAuth)(this, this.auth);\n        } else {\n          // Only do if no auth, as this is done as part of sendAuth.\n          this.sendMessage({\n            type: \"get_status\"\n          });\n        }\n        this._attachMessageListener();\n      } else if (ev.sessionState === \"SESSION_ENDED\") {\n        this.status = undefined;\n        this._fireEvent(\"connection-changed\");\n      }\n    };\n    this._castStateChanged = ev => {\n      if (true) {\n        console.log(\"Cast state changed\", ev.castState);\n      }\n      this._fireEvent(\"state-changed\");\n    };\n    this.auth = auth;\n    const context = this.castContext;\n    context.setOptions({\n      receiverApplicationId: _const__WEBPACK_IMPORTED_MODULE_1__.CAST_APP_ID,\n      autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED\n    });\n    context.addEventListener(cast.framework.CastContextEventType.SESSION_STATE_CHANGED, this._sessionStateChanged);\n    context.addEventListener(cast.framework.CastContextEventType.CAST_STATE_CHANGED, this._castStateChanged);\n  }\n  addEventListener(event, listener) {\n    if (!(event in this._eventListeners)) {\n      this._eventListeners[event] = [];\n    }\n    this._eventListeners[event].push(listener);\n    return () => {\n      this._eventListeners[event].splice(this._eventListeners[event].indexOf(listener));\n    };\n  }\n  get castConnectedToOurHass() {\n    return this.status !== undefined && this.auth !== undefined && this.status.connected && (this.status.hassUrl === this.auth.data.hassUrl || _const__WEBPACK_IMPORTED_MODULE_1__.CAST_DEV && this.status.hassUrl === _dev_const__WEBPACK_IMPORTED_MODULE_2__.CAST_DEV_HASS_URL);\n  }\n  sendMessage(msg) {\n    if (true) {\n      console.log(\"Sending cast message\", msg);\n    }\n    this.castSession.sendMessage(_const__WEBPACK_IMPORTED_MODULE_1__.CAST_NS, msg);\n  }\n  get castState() {\n    return this.castContext.getCastState();\n  }\n  get castContext() {\n    // @ts-ignore\n    return cast.framework.CastContext.getInstance();\n  }\n  get castSession() {\n    return this.castContext.getCurrentSession();\n  }\n  requestSession() {\n    return this.castContext.requestSession();\n  }\n  _fireEvent(event) {\n    for (const listener of this._eventListeners[event] || []) {\n      listener();\n    }\n  }\n  _receiveMessage(msg) {\n    if (true) {\n      console.log(\"Received cast message\", msg);\n    }\n    if (msg.type === \"receiver_status\") {\n      this.status = msg;\n      this._fireEvent(\"connection-changed\");\n    }\n  }\n  _attachMessageListener() {\n    const session = this.castSession;\n    session.addMessageListener(_const__WEBPACK_IMPORTED_MODULE_1__.CAST_NS, (_ns, msg) => this._receiveMessage(JSON.parse(msg)));\n  }\n}\nconst getCastManager = auth => {\n  if (!managerProm) {\n    managerProm = (0,_cast_framework__WEBPACK_IMPORTED_MODULE_0__.castApiAvailable)().then(isAvailable => {\n      if (!isAvailable) {\n        throw new Error(\"No Cast API available\");\n      }\n      return new CastManager(auth);\n    });\n  }\n  return managerProm;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY2FzdC9jYXN0X21hbmFnZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBO0FBUUE7QUFBQTtBQUxBO0FBQUE7QUFDQTtBQUVBO0FBbUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUEzR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQU9BO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZ0NBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaG9tZS1hc3Npc3RhbnQtZnJvbnRlbmQvLi9zcmMvY2FzdC9jYXN0X21hbmFnZXIudHM/MGRkNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG5cbmltcG9ydCB7IEF1dGggfSBmcm9tIFwiaG9tZS1hc3Npc3RhbnQtanMtd2Vic29ja2V0XCI7XG5pbXBvcnQgeyBjYXN0QXBpQXZhaWxhYmxlIH0gZnJvbSBcIi4vY2FzdF9mcmFtZXdvcmtcIjtcbmltcG9ydCB7IENBU1RfQVBQX0lELCBDQVNUX0RFViwgQ0FTVF9OUyB9IGZyb20gXCIuL2NvbnN0XCI7XG5pbXBvcnQgeyBDQVNUX0RFVl9IQVNTX1VSTCB9IGZyb20gXCIuL2Rldl9jb25zdFwiO1xuaW1wb3J0IHtcbiAgY2FzdFNlbmRBdXRoLFxuICBIYXNzTWVzc2FnZSBhcyBSZWNlaXZlck1lc3NhZ2UsXG59IGZyb20gXCIuL3JlY2VpdmVyX21lc3NhZ2VzXCI7XG5pbXBvcnQgeyBSZWNlaXZlclN0YXR1c01lc3NhZ2UsIFNlbmRlck1lc3NhZ2UgfSBmcm9tIFwiLi9zZW5kZXJfbWVzc2FnZXNcIjtcblxubGV0IG1hbmFnZXJQcm9tOiBQcm9taXNlPENhc3RNYW5hZ2VyPiB8IHVuZGVmaW5lZDtcblxudHlwZSBDYXN0RXZlbnRMaXN0ZW5lciA9ICgpID0+IHZvaWQ7XG5cbi8qXG5HZW5lcmFsIGZsb3cgb2YgQ2hyb21lY2FzdDpcblxuQ2hyb21lY2FzdCBzZXNzaW9ucyBhcmUgc3RhcnRlZCB2aWEgdGhlIENocm9tZWNhc3QgYnV0dG9uLiBXaGVuIGNsaWNrZWQsIHNlc3Npb25cbnN0YXRlIGNoYW5nZXMgdG8gc3RhcnRlZC4gV2UgdGhlbiBzZW5kIGF1dGhlbnRpY2F0aW9uLCB3aGljaCB3aWxsIGNhdXNlIHRoZVxucmVjZWl2ZXIgYXBwIHRvIHNlbmQgYSBzdGF0dXMgdXBkYXRlLlxuXG5JZiBhIHNlc3Npb24gaXMgYWxyZWFkeSBhY3RpdmUsIHdlIHF1ZXJ5IHRoZSBzdGF0dXMgdG8gc2VlIHdoYXQgaXQgaXMgdXAgdG8uIElmXG5hIHVzZXIgcHJlc3NlcyB0aGUgY2FzdCBidXR0b24gd2Ugc2VuZCBhdXRoIGlmIG5vdCBjb25uZWN0ZWQgeWV0LCB0aGVuIHNlbmRcbmNvbW1hbmQgYXMgdXN1YWwuXG4qL1xuXG50eXBlIENhc3RFdmVudCA9IFwiY29ubmVjdGlvbi1jaGFuZ2VkXCIgfCBcInN0YXRlLWNoYW5nZWRcIjtcblxuZXhwb3J0IGNsYXNzIENhc3RNYW5hZ2VyIHtcbiAgcHVibGljIGF1dGg/OiBBdXRoO1xuXG4gIC8vIElmIHRoZSBjYXN0IGNvbm5lY3Rpb24gaXMgY29ubmVjdGVkIHRvIG91ciBIYXNzLlxuICBwdWJsaWMgc3RhdHVzPzogUmVjZWl2ZXJTdGF0dXNNZXNzYWdlO1xuXG4gIHByaXZhdGUgX2V2ZW50TGlzdGVuZXJzOiB7IFtldmVudDogc3RyaW5nXTogQ2FzdEV2ZW50TGlzdGVuZXJbXSB9ID0ge307XG5cbiAgY29uc3RydWN0b3IoYXV0aD86IEF1dGgpIHtcbiAgICB0aGlzLmF1dGggPSBhdXRoO1xuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmNhc3RDb250ZXh0O1xuICAgIGNvbnRleHQuc2V0T3B0aW9ucyh7XG4gICAgICByZWNlaXZlckFwcGxpY2F0aW9uSWQ6IENBU1RfQVBQX0lELFxuICAgICAgYXV0b0pvaW5Qb2xpY3k6IGNocm9tZS5jYXN0LkF1dG9Kb2luUG9saWN5Lk9SSUdJTl9TQ09QRUQsXG4gICAgfSk7XG4gICAgY29udGV4dC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgY2FzdC5mcmFtZXdvcmsuQ2FzdENvbnRleHRFdmVudFR5cGUuU0VTU0lPTl9TVEFURV9DSEFOR0VELFxuICAgICAgdGhpcy5fc2Vzc2lvblN0YXRlQ2hhbmdlZFxuICAgICk7XG4gICAgY29udGV4dC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgY2FzdC5mcmFtZXdvcmsuQ2FzdENvbnRleHRFdmVudFR5cGUuQ0FTVF9TVEFURV9DSEFOR0VELFxuICAgICAgdGhpcy5fY2FzdFN0YXRlQ2hhbmdlZFxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgYWRkRXZlbnRMaXN0ZW5lcihldmVudDogQ2FzdEV2ZW50LCBsaXN0ZW5lcjogQ2FzdEV2ZW50TGlzdGVuZXIpIHtcbiAgICBpZiAoIShldmVudCBpbiB0aGlzLl9ldmVudExpc3RlbmVycykpIHtcbiAgICAgIHRoaXMuX2V2ZW50TGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgIH1cbiAgICB0aGlzLl9ldmVudExpc3RlbmVyc1tldmVudF0ucHVzaChsaXN0ZW5lcik7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdGhpcy5fZXZlbnRMaXN0ZW5lcnNbZXZlbnRdLnNwbGljZShcbiAgICAgICAgdGhpcy5fZXZlbnRMaXN0ZW5lcnNbZXZlbnRdLmluZGV4T2YobGlzdGVuZXIpXG4gICAgICApO1xuICAgIH07XG4gIH1cblxuICBwdWJsaWMgZ2V0IGNhc3RDb25uZWN0ZWRUb091ckhhc3MoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuc3RhdHVzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIHRoaXMuYXV0aCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICB0aGlzLnN0YXR1cy5jb25uZWN0ZWQgJiZcbiAgICAgICh0aGlzLnN0YXR1cy5oYXNzVXJsID09PSB0aGlzLmF1dGguZGF0YS5oYXNzVXJsIHx8XG4gICAgICAgIChDQVNUX0RFViAmJiB0aGlzLnN0YXR1cy5oYXNzVXJsID09PSBDQVNUX0RFVl9IQVNTX1VSTCkpXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBzZW5kTWVzc2FnZShtc2c6IFJlY2VpdmVyTWVzc2FnZSkge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIlNlbmRpbmcgY2FzdCBtZXNzYWdlXCIsIG1zZyk7XG4gICAgfVxuICAgIHRoaXMuY2FzdFNlc3Npb24uc2VuZE1lc3NhZ2UoQ0FTVF9OUywgbXNnKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgY2FzdFN0YXRlKCkge1xuICAgIHJldHVybiB0aGlzLmNhc3RDb250ZXh0LmdldENhc3RTdGF0ZSgpO1xuICB9XG5cbiAgcHVibGljIGdldCBjYXN0Q29udGV4dCgpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIGNhc3QuZnJhbWV3b3JrLkNhc3RDb250ZXh0LmdldEluc3RhbmNlKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGNhc3RTZXNzaW9uKCkge1xuICAgIHJldHVybiB0aGlzLmNhc3RDb250ZXh0LmdldEN1cnJlbnRTZXNzaW9uKCkhO1xuICB9XG5cbiAgcHVibGljIHJlcXVlc3RTZXNzaW9uKCkge1xuICAgIHJldHVybiB0aGlzLmNhc3RDb250ZXh0LnJlcXVlc3RTZXNzaW9uKCk7XG4gIH1cblxuICBwcml2YXRlIF9maXJlRXZlbnQoZXZlbnQ6IENhc3RFdmVudCkge1xuICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgdGhpcy5fZXZlbnRMaXN0ZW5lcnNbZXZlbnRdIHx8IFtdKSB7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX3JlY2VpdmVNZXNzYWdlKG1zZzogU2VuZGVyTWVzc2FnZSkge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIlJlY2VpdmVkIGNhc3QgbWVzc2FnZVwiLCBtc2cpO1xuICAgIH1cbiAgICBpZiAobXNnLnR5cGUgPT09IFwicmVjZWl2ZXJfc3RhdHVzXCIpIHtcbiAgICAgIHRoaXMuc3RhdHVzID0gbXNnO1xuICAgICAgdGhpcy5fZmlyZUV2ZW50KFwiY29ubmVjdGlvbi1jaGFuZ2VkXCIpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX3Nlc3Npb25TdGF0ZUNoYW5nZWQgPSAoZXY6IGNhc3QuZnJhbWV3b3JrLlNlc3Npb25TdGF0ZUV2ZW50RGF0YSkgPT4ge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkNhc3Qgc2Vzc2lvbiBzdGF0ZSBjaGFuZ2VkXCIsIGV2LnNlc3Npb25TdGF0ZSk7XG4gICAgfVxuICAgIC8vIE9uIEFuZHJvaWQsIG9wZW5pbmcgYSBuZXcgc2Vzc2lvbiBhbHdheXMgcmVzdWx0cyBpbiBTRVNTSU9OX1JFU1VNRUQuXG4gICAgLy8gU28gdHJlYXQgYm90aCBhcyB0aGUgc2FtZS5cbiAgICBpZiAoXG4gICAgICBldi5zZXNzaW9uU3RhdGUgPT09IFwiU0VTU0lPTl9TVEFSVEVEXCIgfHxcbiAgICAgIGV2LnNlc3Npb25TdGF0ZSA9PT0gXCJTRVNTSU9OX1JFU1VNRURcIlxuICAgICkge1xuICAgICAgaWYgKHRoaXMuYXV0aCkge1xuICAgICAgICBjYXN0U2VuZEF1dGgodGhpcywgdGhpcy5hdXRoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE9ubHkgZG8gaWYgbm8gYXV0aCwgYXMgdGhpcyBpcyBkb25lIGFzIHBhcnQgb2Ygc2VuZEF1dGguXG4gICAgICAgIHRoaXMuc2VuZE1lc3NhZ2UoeyB0eXBlOiBcImdldF9zdGF0dXNcIiB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2F0dGFjaE1lc3NhZ2VMaXN0ZW5lcigpO1xuICAgIH0gZWxzZSBpZiAoZXYuc2Vzc2lvblN0YXRlID09PSBcIlNFU1NJT05fRU5ERURcIikge1xuICAgICAgdGhpcy5zdGF0dXMgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9maXJlRXZlbnQoXCJjb25uZWN0aW9uLWNoYW5nZWRcIik7XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgX2Nhc3RTdGF0ZUNoYW5nZWQgPSAoZXY6IGNhc3QuZnJhbWV3b3JrLkNhc3RTdGF0ZUV2ZW50RGF0YSkgPT4ge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkNhc3Qgc3RhdGUgY2hhbmdlZFwiLCBldi5jYXN0U3RhdGUpO1xuICAgIH1cbiAgICB0aGlzLl9maXJlRXZlbnQoXCJzdGF0ZS1jaGFuZ2VkXCIpO1xuICB9O1xuXG4gIHByaXZhdGUgX2F0dGFjaE1lc3NhZ2VMaXN0ZW5lcigpIHtcbiAgICBjb25zdCBzZXNzaW9uID0gdGhpcy5jYXN0U2Vzc2lvbjtcbiAgICBzZXNzaW9uLmFkZE1lc3NhZ2VMaXN0ZW5lcihDQVNUX05TLCAoX25zLCBtc2cpID0+XG4gICAgICB0aGlzLl9yZWNlaXZlTWVzc2FnZShKU09OLnBhcnNlKG1zZykpXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZ2V0Q2FzdE1hbmFnZXIgPSAoYXV0aD86IEF1dGgpID0+IHtcbiAgaWYgKCFtYW5hZ2VyUHJvbSkge1xuICAgIG1hbmFnZXJQcm9tID0gY2FzdEFwaUF2YWlsYWJsZSgpLnRoZW4oKGlzQXZhaWxhYmxlKSA9PiB7XG4gICAgICBpZiAoIWlzQXZhaWxhYmxlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIENhc3QgQVBJIGF2YWlsYWJsZVwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgQ2FzdE1hbmFnZXIoYXV0aCk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG1hbmFnZXJQcm9tO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/cast/cast_manager.ts\n");

/***/ }),

/***/ "./src/common/dom/load_resource.ts":
/*!*****************************************!*\
  !*** ./src/common/dom/load_resource.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadCSS: () => (/* binding */ loadCSS),\n/* harmony export */   loadImg: () => (/* binding */ loadImg),\n/* harmony export */   loadJS: () => (/* binding */ loadJS),\n/* harmony export */   loadModule: () => (/* binding */ loadModule)\n/* harmony export */ });\n// Load a resource and get a promise when loading done.\n// From: https://davidwalsh.name/javascript-loader\n\nconst _load = (tag, url, type) =>\n// This promise will be used by Promise.all to determine success or failure\nnew Promise((resolve, reject) => {\n  const element = document.createElement(tag);\n  let attr = \"src\";\n  let parent = \"body\";\n\n  // Important success and error for the promise\n  element.onload = () => resolve(url);\n  element.onerror = () => reject(url);\n\n  // Need to set different attributes depending on tag type\n  switch (tag) {\n    case \"script\":\n      element.async = true;\n      if (type) {\n        element.type = type;\n      }\n      break;\n    case \"link\":\n      element.type = \"text/css\";\n      element.rel = \"stylesheet\";\n      attr = \"href\";\n      parent = \"head\";\n  }\n\n  // Inject into document to kick off loading\n  element[attr] = url;\n  document[parent].appendChild(element);\n});\nconst loadCSS = url => _load(\"link\", url);\nconst loadJS = url => _load(\"script\", url);\nconst loadImg = url => _load(\"img\", url);\nconst loadModule = url => _load(\"script\", url, \"module\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tbW9uL2RvbS9sb2FkX3Jlc291cmNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaG9tZS1hc3Npc3RhbnQtZnJvbnRlbmQvLi9zcmMvY29tbW9uL2RvbS9sb2FkX3Jlc291cmNlLnRzPzVjMzYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTG9hZCBhIHJlc291cmNlIGFuZCBnZXQgYSBwcm9taXNlIHdoZW4gbG9hZGluZyBkb25lLlxuLy8gRnJvbTogaHR0cHM6Ly9kYXZpZHdhbHNoLm5hbWUvamF2YXNjcmlwdC1sb2FkZXJcblxuY29uc3QgX2xvYWQgPSAodGFnOiBcImxpbmtcIiB8IFwic2NyaXB0XCIgfCBcImltZ1wiLCB1cmw6IHN0cmluZywgdHlwZT86IFwibW9kdWxlXCIpID0+XG4gIC8vIFRoaXMgcHJvbWlzZSB3aWxsIGJlIHVzZWQgYnkgUHJvbWlzZS5hbGwgdG8gZGV0ZXJtaW5lIHN1Y2Nlc3Mgb3IgZmFpbHVyZVxuICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgICBsZXQgYXR0ciA9IFwic3JjXCI7XG4gICAgbGV0IHBhcmVudCA9IFwiYm9keVwiO1xuXG4gICAgLy8gSW1wb3J0YW50IHN1Y2Nlc3MgYW5kIGVycm9yIGZvciB0aGUgcHJvbWlzZVxuICAgIGVsZW1lbnQub25sb2FkID0gKCkgPT4gcmVzb2x2ZSh1cmwpO1xuICAgIGVsZW1lbnQub25lcnJvciA9ICgpID0+IHJlamVjdCh1cmwpO1xuXG4gICAgLy8gTmVlZCB0byBzZXQgZGlmZmVyZW50IGF0dHJpYnV0ZXMgZGVwZW5kaW5nIG9uIHRhZyB0eXBlXG4gICAgc3dpdGNoICh0YWcpIHtcbiAgICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgICAgKGVsZW1lbnQgYXMgSFRNTFNjcmlwdEVsZW1lbnQpLmFzeW5jID0gdHJ1ZTtcbiAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAoZWxlbWVudCBhcyBIVE1MU2NyaXB0RWxlbWVudCkudHlwZSA9IHR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwibGlua1wiOlxuICAgICAgICAoZWxlbWVudCBhcyBIVE1MTGlua0VsZW1lbnQpLnR5cGUgPSBcInRleHQvY3NzXCI7XG4gICAgICAgIChlbGVtZW50IGFzIEhUTUxMaW5rRWxlbWVudCkucmVsID0gXCJzdHlsZXNoZWV0XCI7XG4gICAgICAgIGF0dHIgPSBcImhyZWZcIjtcbiAgICAgICAgcGFyZW50ID0gXCJoZWFkXCI7XG4gICAgfVxuXG4gICAgLy8gSW5qZWN0IGludG8gZG9jdW1lbnQgdG8ga2ljayBvZmYgbG9hZGluZ1xuICAgIGVsZW1lbnRbYXR0cl0gPSB1cmw7XG4gICAgZG9jdW1lbnRbcGFyZW50XS5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgfSk7XG5leHBvcnQgY29uc3QgbG9hZENTUyA9ICh1cmw6IHN0cmluZykgPT4gX2xvYWQoXCJsaW5rXCIsIHVybCk7XG5leHBvcnQgY29uc3QgbG9hZEpTID0gKHVybDogc3RyaW5nKSA9PiBfbG9hZChcInNjcmlwdFwiLCB1cmwpO1xuZXhwb3J0IGNvbnN0IGxvYWRJbWcgPSAodXJsOiBzdHJpbmcpID0+IF9sb2FkKFwiaW1nXCIsIHVybCk7XG5leHBvcnQgY29uc3QgbG9hZE1vZHVsZSA9ICh1cmw6IHN0cmluZykgPT4gX2xvYWQoXCJzY3JpcHRcIiwgdXJsLCBcIm1vZHVsZVwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/common/dom/load_resource.ts\n");

/***/ })

};
