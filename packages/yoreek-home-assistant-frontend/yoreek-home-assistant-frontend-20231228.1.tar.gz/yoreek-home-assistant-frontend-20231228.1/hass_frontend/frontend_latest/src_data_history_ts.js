/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
export const id = "src_data_history_ts";
export const ids = ["src_data_history_ts"];
export const modules = {

/***/ "./src/data/history.ts":
/*!*****************************!*\
  !*** ./src/data/history.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeGroupKey: () => (/* binding */ computeGroupKey),\n/* harmony export */   computeHistory: () => (/* binding */ computeHistory),\n/* harmony export */   entityIdHistoryNeedsAttributes: () => (/* binding */ entityIdHistoryNeedsAttributes),\n/* harmony export */   fetchDateWS: () => (/* binding */ fetchDateWS),\n/* harmony export */   subscribeHistory: () => (/* binding */ subscribeHistory),\n/* harmony export */   subscribeHistoryStatesTimeWindow: () => (/* binding */ subscribeHistoryStatesTimeWindow)\n/* harmony export */ });\n/* harmony import */ var _common_entity_compute_domain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/entity/compute_domain */ \"./src/common/entity/compute_domain.ts\");\n/* harmony import */ var _common_entity_compute_state_display__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/entity/compute_state_display */ \"./src/common/entity/compute_state_display.ts\");\n/* harmony import */ var _common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/entity/compute_state_name */ \"./src/common/entity/compute_state_name.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_common_entity_compute_state_display__WEBPACK_IMPORTED_MODULE_1__]);\n_common_entity_compute_state_display__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nconst DOMAINS_USE_LAST_UPDATED = [\"climate\", \"humidifier\", \"water_heater\"];\nconst NEED_ATTRIBUTE_DOMAINS = [\"climate\", \"humidifier\", \"input_datetime\", \"thermostat\", \"water_heater\", \"person\", \"device_tracker\"];\nconst LINE_ATTRIBUTES_TO_KEEP = [\"temperature\", \"current_temperature\", \"target_temp_low\", \"target_temp_high\", \"hvac_action\", \"humidity\", \"mode\", \"action\", \"current_humidity\"];\nconst entityIdHistoryNeedsAttributes = (hass, entityId) => !hass.states[entityId] || NEED_ATTRIBUTE_DOMAINS.includes((0,_common_entity_compute_domain__WEBPACK_IMPORTED_MODULE_0__.computeDomain)(entityId));\nconst fetchDateWS = (hass, startTime, endTime, entityIds) => {\n  const params = {\n    type: \"history/history_during_period\",\n    start_time: startTime.toISOString(),\n    end_time: endTime.toISOString(),\n    minimal_response: true,\n    no_attributes: !entityIds.some(entityId => entityIdHistoryNeedsAttributes(hass, entityId))\n  };\n  if (entityIds.length !== 0) {\n    return hass.callWS({\n      ...params,\n      entity_ids: entityIds\n    });\n  }\n  return hass.callWS(params);\n};\nconst subscribeHistory = (hass, callbackFunction, startTime, endTime, entityIds) => {\n  const params = {\n    type: \"history/stream\",\n    entity_ids: entityIds,\n    start_time: startTime.toISOString(),\n    end_time: endTime.toISOString(),\n    minimal_response: true,\n    no_attributes: !entityIds.some(entityId => entityIdHistoryNeedsAttributes(hass, entityId))\n  };\n  const stream = new HistoryStream(hass);\n  return hass.connection.subscribeMessage(message => callbackFunction(stream.processMessage(message)), params);\n};\nclass HistoryStream {\n  constructor(hass, hoursToShow) {\n    this.hass = void 0;\n    this.hoursToShow = void 0;\n    this.combinedHistory = void 0;\n    this.hass = hass;\n    this.hoursToShow = hoursToShow;\n    this.combinedHistory = {};\n  }\n  processMessage(streamMessage) {\n    if (!this.combinedHistory || !Object.keys(this.combinedHistory).length) {\n      this.combinedHistory = streamMessage.states;\n      return this.combinedHistory;\n    }\n    if (!Object.keys(streamMessage.states).length) {\n      // Empty messages are still sent to\n      // indicate no more historical events\n      return this.combinedHistory;\n    }\n    const purgeBeforePythonTime = this.hoursToShow ? (new Date().getTime() - 60 * 60 * this.hoursToShow * 1000) / 1000 : undefined;\n    const newHistory = {};\n    for (const entityId of Object.keys(this.combinedHistory)) {\n      newHistory[entityId] = [];\n    }\n    for (const entityId of Object.keys(streamMessage.states)) {\n      newHistory[entityId] = [];\n    }\n    for (const entityId of Object.keys(newHistory)) {\n      if (entityId in this.combinedHistory && entityId in streamMessage.states) {\n        const entityCombinedHistory = this.combinedHistory[entityId];\n        const lastEntityCombinedHistory = entityCombinedHistory[entityCombinedHistory.length - 1];\n        newHistory[entityId] = entityCombinedHistory.concat(streamMessage.states[entityId]);\n        if (streamMessage.states[entityId][0].lu < lastEntityCombinedHistory.lu) {\n          // If the history is out of order we have to sort it.\n          newHistory[entityId] = newHistory[entityId].sort((a, b) => a.lu - b.lu);\n        }\n      } else if (entityId in this.combinedHistory) {\n        newHistory[entityId] = this.combinedHistory[entityId];\n      } else {\n        newHistory[entityId] = streamMessage.states[entityId];\n      }\n      // Remove old history\n      if (purgeBeforePythonTime && entityId in this.combinedHistory) {\n        const expiredStates = newHistory[entityId].filter(state => state.lu < purgeBeforePythonTime);\n        if (!expiredStates.length) {\n          continue;\n        }\n        newHistory[entityId] = newHistory[entityId].filter(state => state.lu >= purgeBeforePythonTime);\n        if (newHistory[entityId].length && newHistory[entityId][0].lu === purgeBeforePythonTime) {\n          continue;\n        }\n        // Update the first entry to the start time state\n        // as we need to preserve the start time state and\n        // only expire the rest of the history as it ages.\n        const lastExpiredState = expiredStates[expiredStates.length - 1];\n        lastExpiredState.lu = purgeBeforePythonTime;\n        newHistory[entityId].unshift(lastExpiredState);\n      }\n    }\n    this.combinedHistory = newHistory;\n    return this.combinedHistory;\n  }\n}\nconst subscribeHistoryStatesTimeWindow = (hass, callbackFunction, hoursToShow, entityIds, minimalResponse = true, significantChangesOnly = true, noAttributes) => {\n  const params = {\n    type: \"history/stream\",\n    entity_ids: entityIds,\n    start_time: new Date(new Date().getTime() - 60 * 60 * hoursToShow * 1000).toISOString(),\n    minimal_response: minimalResponse,\n    significant_changes_only: significantChangesOnly,\n    no_attributes: noAttributes !== null && noAttributes !== void 0 ? noAttributes : !entityIds.some(entityId => entityIdHistoryNeedsAttributes(hass, entityId))\n  };\n  const stream = new HistoryStream(hass, hoursToShow);\n  return hass.connection.subscribeMessage(message => callbackFunction(stream.processMessage(message)), params);\n};\nconst equalState = (obj1, obj2) => obj1.state === obj2.state && (\n// Only compare attributes if both states have an attributes object.\n// When `minimal_response` is sent, only the first and last state\n// will have attributes except for domains in DOMAINS_USE_LAST_UPDATED.\n!obj1.attributes || !obj2.attributes || LINE_ATTRIBUTES_TO_KEEP.every(attr => obj1.attributes[attr] === obj2.attributes[attr]));\nconst processTimelineEntity = (localize, locale, config, entities, entityId, states, current_state) => {\n  const data = [];\n  const first = states[0];\n  for (const state of states) {\n    if (data.length > 0 && state.s === data[data.length - 1].state) {\n      continue;\n    }\n    const currentAttributes = {};\n    if (current_state !== null && current_state !== void 0 && current_state.attributes.device_class) {\n      currentAttributes.device_class = current_state === null || current_state === void 0 ? void 0 : current_state.attributes.device_class;\n    }\n    data.push({\n      state_localize: (0,_common_entity_compute_state_display__WEBPACK_IMPORTED_MODULE_1__.computeStateDisplayFromEntityAttributes)(localize, locale, config, entities[entityId], entityId, {\n        ...(state.a || first.a),\n        ...currentAttributes\n      }, state.s),\n      state: state.s,\n      // lc (last_changed) may be omitted if its the same\n      // as lu (last_updated).\n      last_changed: (state.lc ? state.lc : state.lu) * 1000\n    });\n  }\n  return {\n    name: (0,_common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_2__.computeStateNameFromEntityAttributes)(entityId, (current_state === null || current_state === void 0 ? void 0 : current_state.attributes) || first.a),\n    entity_id: entityId,\n    data\n  };\n};\nconst processLineChartEntities = (unit, device_class, entities, hassEntities) => {\n  const data = [];\n  Object.keys(entities).forEach(entityId => {\n    const states = entities[entityId];\n    const first = states[0];\n    const domain = (0,_common_entity_compute_domain__WEBPACK_IMPORTED_MODULE_0__.computeDomain)(entityId);\n    const processedStates = [];\n    for (const state of states) {\n      let processedState;\n      if (DOMAINS_USE_LAST_UPDATED.includes(domain)) {\n        processedState = {\n          state: state.s,\n          last_changed: state.lu * 1000,\n          attributes: {}\n        };\n        for (const attr of LINE_ATTRIBUTES_TO_KEEP) {\n          if (attr in state.a) {\n            processedState.attributes[attr] = state.a[attr];\n          }\n        }\n      } else {\n        processedState = {\n          state: state.s,\n          // lc (last_changed) may be omitted if its the same\n          // as lu (last_updated).\n          last_changed: (state.lc ? state.lc : state.lu) * 1000,\n          attributes: {}\n        };\n      }\n      if (processedStates.length > 1 && equalState(processedState, processedStates[processedStates.length - 1]) && equalState(processedState, processedStates[processedStates.length - 2])) {\n        continue;\n      }\n      processedStates.push(processedState);\n    }\n    const attributes = entityId in hassEntities ? hassEntities[entityId].attributes : \"friendly_name\" in first.a ? first.a : undefined;\n    data.push({\n      domain,\n      name: (0,_common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_2__.computeStateNameFromEntityAttributes)(entityId, attributes || {}),\n      entity_id: entityId,\n      states: processedStates\n    });\n  });\n  return {\n    unit,\n    device_class,\n    identifier: Object.keys(entities).join(\"\"),\n    data\n  };\n};\nconst NUMERICAL_DOMAINS = [\"counter\", \"input_number\", \"number\"];\nconst isNumericFromDomain = domain => NUMERICAL_DOMAINS.includes(domain);\nconst isNumericFromAttributes = attributes => \"unit_of_measurement\" in attributes || \"state_class\" in attributes;\nconst isNumericSensorEntity = (stateObj, sensorNumericalDeviceClasses) => stateObj.attributes.device_class != null && sensorNumericalDeviceClasses.includes(stateObj.attributes.device_class);\nconst BLANK_UNIT = \" \";\nconst computeHistory = (hass, stateHistory, localize, sensorNumericalDeviceClasses, splitDeviceClasses = false) => {\n  const lineChartDevices = {};\n  const timelineDevices = [];\n  if (!stateHistory) {\n    return {\n      line: [],\n      timeline: []\n    };\n  }\n  Object.keys(stateHistory).forEach(entityId => {\n    var _ref;\n    const stateInfo = stateHistory[entityId];\n    if (stateInfo.length === 0) {\n      return;\n    }\n    const domain = (0,_common_entity_compute_domain__WEBPACK_IMPORTED_MODULE_0__.computeDomain)(entityId);\n    const currentState = entityId in hass.states ? hass.states[entityId] : undefined;\n    const numericStateFromHistory = currentState || isNumericFromDomain(domain) ? undefined : stateInfo.find(state => state.a && isNumericFromAttributes(state.a));\n    let unit;\n    const isNumeric = isNumericFromDomain(domain) || currentState != null && isNumericFromAttributes(currentState.attributes) || currentState != null && domain === \"sensor\" && isNumericSensorEntity(currentState, sensorNumericalDeviceClasses) || numericStateFromHistory != null;\n    if (isNumeric) {\n      unit = (currentState === null || currentState === void 0 ? void 0 : currentState.attributes.unit_of_measurement) || (numericStateFromHistory === null || numericStateFromHistory === void 0 ? void 0 : numericStateFromHistory.a.unit_of_measurement) || BLANK_UNIT;\n    } else {\n      unit = {\n        zone: localize(\"ui.dialogs.more_info_control.zone.graph_unit\"),\n        climate: hass.config.unit_system.temperature,\n        humidifier: \"%\",\n        water_heater: hass.config.unit_system.temperature\n      }[domain];\n    }\n    const deviceClass = (_ref = (currentState === null || currentState === void 0 ? void 0 : currentState.attributes) || (numericStateFromHistory === null || numericStateFromHistory === void 0 ? void 0 : numericStateFromHistory.a)) === null || _ref === void 0 ? void 0 : _ref.device_class;\n    const key = computeGroupKey(unit, deviceClass, splitDeviceClasses);\n    if (!unit) {\n      timelineDevices.push(processTimelineEntity(localize, hass.locale, hass.config, hass.entities, entityId, stateInfo, currentState));\n    } else if (key && key in lineChartDevices && entityId in lineChartDevices[key]) {\n      lineChartDevices[key][entityId].push(...stateInfo);\n    } else if (key) {\n      if (!(key in lineChartDevices)) {\n        lineChartDevices[key] = {};\n      }\n      lineChartDevices[key][entityId] = stateInfo;\n    }\n  });\n  const unitStates = Object.keys(lineChartDevices).map(key => {\n    const splitKey = key.split(\"_\");\n    const unit = splitKey[0];\n    const deviceClass = splitKey[1] || undefined;\n    return processLineChartEntities(unit, deviceClass, lineChartDevices[key], hass.states);\n  });\n  return {\n    line: unitStates,\n    timeline: timelineDevices\n  };\n};\nconst computeGroupKey = (unit, device_class, splitDeviceClasses) => splitDeviceClasses ? `${unit}_${device_class || \"\"}` : unit;\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/data/history.ts\n");

/***/ })

};
