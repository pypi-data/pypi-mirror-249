/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
export const id = "vendors-node_modules_qr-scanner_qr-scanner_min_js";
export const ids = ["vendors-node_modules_qr-scanner_qr-scanner_min_js"];
export const modules = {

/***/ "./node_modules/qr-scanner/qr-scanner.min.js":
/*!***************************************************!*\
  !*** ./node_modules/qr-scanner/qr-scanner.min.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass e {\n  constructor(a, b, c, d, f) {\n    this._legacyCanvasSize = e.DEFAULT_CANVAS_SIZE;\n    this._preferredCamera = \"environment\";\n    this._maxScansPerSecond = 25;\n    this._lastScanTimestamp = -1;\n    this._destroyed = this._flashOn = this._paused = this._active = !1;\n    this.$video = a;\n    this.$canvas = document.createElement(\"canvas\");\n    c && \"object\" === typeof c ? this._onDecode = b : (c || d || f ? console.warn(\"You're using a deprecated version of the QrScanner constructor which will be removed in the future\") : console.warn(\"Note that the type of the scan result passed to onDecode will change in the future. To already switch to the new api today, you can pass returnDetailedScanResult: true.\"), this._legacyOnDecode = b);\n    b = \"object\" === typeof c ? c : {};\n    this._onDecodeError = b.onDecodeError || (\"function\" === typeof c ? c : this._onDecodeError);\n    this._calculateScanRegion = b.calculateScanRegion || (\"function\" === typeof d ? d : this._calculateScanRegion);\n    this._preferredCamera = b.preferredCamera || f || this._preferredCamera;\n    this._legacyCanvasSize = \"number\" === typeof c ? c : \"number\" === typeof d ? d : this._legacyCanvasSize;\n    this._maxScansPerSecond = b.maxScansPerSecond || this._maxScansPerSecond;\n    this._onPlay = this._onPlay.bind(this);\n    this._onLoadedMetaData = this._onLoadedMetaData.bind(this);\n    this._onVisibilityChange = this._onVisibilityChange.bind(this);\n    this._updateOverlay = this._updateOverlay.bind(this);\n    a.disablePictureInPicture = !0;\n    a.playsInline = !0;\n    a.muted = !0;\n    let h = !1;\n    a.hidden && (a.hidden = !1, h = !0);\n    document.body.contains(a) || (document.body.appendChild(a), h = !0);\n    c = a.parentElement;\n    if (b.highlightScanRegion || b.highlightCodeOutline) {\n      d = !!b.overlay;\n      this.$overlay = b.overlay || document.createElement(\"div\");\n      f = this.$overlay.style;\n      f.position = \"absolute\";\n      f.display = \"none\";\n      f.pointerEvents = \"none\";\n      this.$overlay.classList.add(\"scan-region-highlight\");\n      if (!d && b.highlightScanRegion) {\n        this.$overlay.innerHTML = '<svg class=\"scan-region-highlight-svg\" viewBox=\"0 0 238 238\" preserveAspectRatio=\"none\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;fill:none;stroke:#e9b213;stroke-width:4;stroke-linecap:round;stroke-linejoin:round\"><path d=\"M31 2H10a8 8 0 0 0-8 8v21M207 2h21a8 8 0 0 1 8 8v21m0 176v21a8 8 0 0 1-8 8h-21m-176 0H10a8 8 0 0 1-8-8v-21\"/></svg>';\n        try {\n          this.$overlay.firstElementChild.animate({\n            transform: [\"scale(.98)\", \"scale(1.01)\"]\n          }, {\n            duration: 400,\n            iterations: Infinity,\n            direction: \"alternate\",\n            easing: \"ease-in-out\"\n          });\n        } catch (m) {}\n        c.insertBefore(this.$overlay, this.$video.nextSibling);\n      }\n      b.highlightCodeOutline && (this.$overlay.insertAdjacentHTML(\"beforeend\", '<svg class=\"code-outline-highlight\" preserveAspectRatio=\"none\" style=\"display:none;width:100%;height:100%;fill:none;stroke:#e9b213;stroke-width:5;stroke-dasharray:25;stroke-linecap:round;stroke-linejoin:round\"><polygon/></svg>'), this.$codeOutlineHighlight = this.$overlay.lastElementChild);\n    }\n    this._scanRegion = this._calculateScanRegion(a);\n    requestAnimationFrame(() => {\n      let m = window.getComputedStyle(a);\n      \"none\" === m.display && (a.style.setProperty(\"display\", \"block\", \"important\"), h = !0);\n      \"visible\" !== m.visibility && (a.style.setProperty(\"visibility\", \"visible\", \"important\"), h = !0);\n      h && (console.warn(\"QrScanner has overwritten the video hiding style to avoid Safari stopping the playback.\"), a.style.opacity = \"0\", a.style.width = \"0\", a.style.height = \"0\", this.$overlay && this.$overlay.parentElement && this.$overlay.parentElement.removeChild(this.$overlay), delete this.$overlay, delete this.$codeOutlineHighlight);\n      this.$overlay && this._updateOverlay();\n    });\n    a.addEventListener(\"play\", this._onPlay);\n    a.addEventListener(\"loadedmetadata\", this._onLoadedMetaData);\n    document.addEventListener(\"visibilitychange\", this._onVisibilityChange);\n    window.addEventListener(\"resize\", this._updateOverlay);\n    this._qrEnginePromise = e.createQrEngine();\n  }\n  static set WORKER_PATH(a) {\n    console.warn(\"Setting QrScanner.WORKER_PATH is not required and not supported anymore. Have a look at the README for new setup instructions.\");\n  }\n  static async hasCamera() {\n    try {\n      return !!(await e.listCameras(!1)).length;\n    } catch (a) {\n      return !1;\n    }\n  }\n  static async listCameras(a = !1) {\n    if (!navigator.mediaDevices) return [];\n    let b = async () => (await navigator.mediaDevices.enumerateDevices()).filter(d => \"videoinput\" === d.kind),\n      c;\n    try {\n      a && (await b()).every(d => !d.label) && (c = await navigator.mediaDevices.getUserMedia({\n        audio: !1,\n        video: !0\n      }));\n    } catch (d) {}\n    try {\n      return (await b()).map((d, f) => ({\n        id: d.deviceId,\n        label: d.label || (0 === f ? \"Default Camera\" : `Camera ${f + 1}`)\n      }));\n    } finally {\n      c && (console.warn(\"Call listCameras after successfully starting a QR scanner to avoid creating a temporary video stream\"), e._stopVideoStream(c));\n    }\n  }\n  async hasFlash() {\n    let a;\n    try {\n      if (this.$video.srcObject) {\n        if (!(this.$video.srcObject instanceof MediaStream)) return !1;\n        a = this.$video.srcObject;\n      } else a = (await this._getCameraStream()).stream;\n      return \"torch\" in a.getVideoTracks()[0].getSettings();\n    } catch (b) {\n      return !1;\n    } finally {\n      a && a !== this.$video.srcObject && (console.warn(\"Call hasFlash after successfully starting the scanner to avoid creating a temporary video stream\"), e._stopVideoStream(a));\n    }\n  }\n  isFlashOn() {\n    return this._flashOn;\n  }\n  async toggleFlash() {\n    this._flashOn ? await this.turnFlashOff() : await this.turnFlashOn();\n  }\n  async turnFlashOn() {\n    if (!this._flashOn && !this._destroyed && (this._flashOn = !0, this._active && !this._paused)) try {\n      if (!(await this.hasFlash())) throw \"No flash available\";\n      await this.$video.srcObject.getVideoTracks()[0].applyConstraints({\n        advanced: [{\n          torch: !0\n        }]\n      });\n    } catch (a) {\n      throw this._flashOn = !1, a;\n    }\n  }\n  async turnFlashOff() {\n    this._flashOn && (this._flashOn = !1, await this._restartVideoStream());\n  }\n  destroy() {\n    this.$video.removeEventListener(\"loadedmetadata\", this._onLoadedMetaData);\n    this.$video.removeEventListener(\"play\", this._onPlay);\n    document.removeEventListener(\"visibilitychange\", this._onVisibilityChange);\n    window.removeEventListener(\"resize\", this._updateOverlay);\n    this._destroyed = !0;\n    this._flashOn = !1;\n    this.stop();\n    e._postWorkerMessage(this._qrEnginePromise, \"close\");\n  }\n  async start() {\n    if (this._destroyed) throw Error(\"The QR scanner can not be started as it had been destroyed.\");\n    if (!this._active || this._paused) if (\"https:\" !== window.location.protocol && console.warn(\"The camera stream is only accessible if the page is transferred via https.\"), this._active = !0, !document.hidden) if (this._paused = !1, this.$video.srcObject) await this.$video.play();else try {\n      let {\n        stream: a,\n        facingMode: b\n      } = await this._getCameraStream();\n      !this._active || this._paused ? e._stopVideoStream(a) : (this._setVideoMirror(b), this.$video.srcObject = a, await this.$video.play(), this._flashOn && (this._flashOn = !1, this.turnFlashOn().catch(() => {})));\n    } catch (a) {\n      if (!this._paused) throw this._active = !1, a;\n    }\n  }\n  stop() {\n    this.pause();\n    this._active = !1;\n  }\n  async pause(a = !1) {\n    this._paused = !0;\n    if (!this._active) return !0;\n    this.$video.pause();\n    this.$overlay && (this.$overlay.style.display = \"none\");\n    let b = () => {\n      this.$video.srcObject instanceof MediaStream && (e._stopVideoStream(this.$video.srcObject), this.$video.srcObject = null);\n    };\n    if (a) return b(), !0;\n    await new Promise(c => setTimeout(c, 300));\n    if (!this._paused) return !1;\n    b();\n    return !0;\n  }\n  async setCamera(a) {\n    a !== this._preferredCamera && (this._preferredCamera = a, await this._restartVideoStream());\n  }\n  static async scanImage(a, b, c, d, f = !1, h = !1) {\n    let m,\n      n = !1;\n    b && (\"scanRegion\" in b || \"qrEngine\" in b || \"canvas\" in b || \"disallowCanvasResizing\" in b || \"alsoTryWithoutScanRegion\" in b || \"returnDetailedScanResult\" in b) ? (m = b.scanRegion, c = b.qrEngine, d = b.canvas, f = b.disallowCanvasResizing || !1, h = b.alsoTryWithoutScanRegion || !1, n = !0) : b || c || d || f || h ? console.warn(\"You're using a deprecated api for scanImage which will be removed in the future.\") : console.warn(\"Note that the return type of scanImage will change in the future. To already switch to the new api today, you can pass returnDetailedScanResult: true.\");\n    b = !!c;\n    try {\n      let p, k;\n      [c, p] = await Promise.all([c || e.createQrEngine(), e._loadImage(a)]);\n      [d, k] = e._drawToCanvas(p, m, d, f);\n      let q;\n      if (c instanceof Worker) {\n        let g = c;\n        b || e._postWorkerMessageSync(g, \"inversionMode\", \"both\");\n        q = await new Promise((l, v) => {\n          let w,\n            u,\n            r,\n            y = -1;\n          u = t => {\n            t.data.id === y && (g.removeEventListener(\"message\", u), g.removeEventListener(\"error\", r), clearTimeout(w), null !== t.data.data ? l({\n              data: t.data.data,\n              cornerPoints: e._convertPoints(t.data.cornerPoints, m)\n            }) : v(e.NO_QR_CODE_FOUND));\n          };\n          r = t => {\n            g.removeEventListener(\"message\", u);\n            g.removeEventListener(\"error\", r);\n            clearTimeout(w);\n            v(\"Scanner error: \" + (t ? t.message || t : \"Unknown Error\"));\n          };\n          g.addEventListener(\"message\", u);\n          g.addEventListener(\"error\", r);\n          w = setTimeout(() => r(\"timeout\"), 1E4);\n          let x = k.getImageData(0, 0, d.width, d.height);\n          y = e._postWorkerMessageSync(g, \"decode\", x, [x.data.buffer]);\n        });\n      } else q = await Promise.race([new Promise((g, l) => window.setTimeout(() => l(\"Scanner error: timeout\"), 1E4)), (async () => {\n        try {\n          var [g] = await c.detect(d);\n          if (!g) throw e.NO_QR_CODE_FOUND;\n          return {\n            data: g.rawValue,\n            cornerPoints: e._convertPoints(g.cornerPoints, m)\n          };\n        } catch (l) {\n          g = l.message || l;\n          if (/not implemented|service unavailable/.test(g)) return e._disableBarcodeDetector = !0, e.scanImage(a, {\n            scanRegion: m,\n            canvas: d,\n            disallowCanvasResizing: f,\n            alsoTryWithoutScanRegion: h\n          });\n          throw `Scanner error: ${g}`;\n        }\n      })()]);\n      return n ? q : q.data;\n    } catch (p) {\n      if (!m || !h) throw p;\n      let k = await e.scanImage(a, {\n        qrEngine: c,\n        canvas: d,\n        disallowCanvasResizing: f\n      });\n      return n ? k : k.data;\n    } finally {\n      b || e._postWorkerMessage(c, \"close\");\n    }\n  }\n  setGrayscaleWeights(a, b, c, d = !0) {\n    e._postWorkerMessage(this._qrEnginePromise, \"grayscaleWeights\", {\n      red: a,\n      green: b,\n      blue: c,\n      useIntegerApproximation: d\n    });\n  }\n  setInversionMode(a) {\n    e._postWorkerMessage(this._qrEnginePromise, \"inversionMode\", a);\n  }\n  static async createQrEngine(a) {\n    a && console.warn(\"Specifying a worker path is not required and not supported anymore.\");\n    a = () => __webpack_require__.e(/*! import() */ \"vendors-node_modules_qr-scanner_qr-scanner-worker_min_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./qr-scanner-worker.min.js */ \"./node_modules/qr-scanner/qr-scanner-worker.min.js\")).then(c => c.createWorker());\n    if (!(!e._disableBarcodeDetector && \"BarcodeDetector\" in window && BarcodeDetector.getSupportedFormats && (await BarcodeDetector.getSupportedFormats()).includes(\"qr_code\"))) return a();\n    let b = navigator.userAgentData;\n    return b && b.brands.some(({\n      brand: c\n    }) => /Chromium/i.test(c)) && /mac ?OS/i.test(b.platform) && (await b.getHighEntropyValues([\"architecture\", \"platformVersion\"]).then(({\n      architecture: c,\n      platformVersion: d\n    }) => /arm/i.test(c || \"arm\") && 13 <= parseInt(d || \"13\")).catch(() => !0)) ? a() : new BarcodeDetector({\n      formats: [\"qr_code\"]\n    });\n  }\n  _onPlay() {\n    this._scanRegion = this._calculateScanRegion(this.$video);\n    this._updateOverlay();\n    this.$overlay && (this.$overlay.style.display = \"\");\n    this._scanFrame();\n  }\n  _onLoadedMetaData() {\n    this._scanRegion = this._calculateScanRegion(this.$video);\n    this._updateOverlay();\n  }\n  _onVisibilityChange() {\n    document.hidden ? this.pause() : this._active && this.start();\n  }\n  _calculateScanRegion(a) {\n    let b = Math.round(2 / 3 * Math.min(a.videoWidth, a.videoHeight));\n    return {\n      x: Math.round((a.videoWidth - b) / 2),\n      y: Math.round((a.videoHeight - b) / 2),\n      width: b,\n      height: b,\n      downScaledWidth: this._legacyCanvasSize,\n      downScaledHeight: this._legacyCanvasSize\n    };\n  }\n  _updateOverlay() {\n    requestAnimationFrame(() => {\n      if (this.$overlay) {\n        var a = this.$video,\n          b = a.videoWidth,\n          c = a.videoHeight,\n          d = a.offsetWidth,\n          f = a.offsetHeight,\n          h = a.offsetLeft,\n          m = a.offsetTop,\n          n = window.getComputedStyle(a),\n          p = n.objectFit,\n          k = b / c,\n          q = d / f;\n        switch (p) {\n          case \"none\":\n            var g = b;\n            var l = c;\n            break;\n          case \"fill\":\n            g = d;\n            l = f;\n            break;\n          default:\n            (\"cover\" === p ? k > q : k < q) ? (l = f, g = l * k) : (g = d, l = g / k), \"scale-down\" === p && (g = Math.min(g, b), l = Math.min(l, c));\n        }\n        var [v, w] = n.objectPosition.split(\" \").map((r, y) => {\n          const x = parseFloat(r);\n          return r.endsWith(\"%\") ? (y ? f - l : d - g) * x / 100 : x;\n        });\n        n = this._scanRegion.width || b;\n        q = this._scanRegion.height || c;\n        p = this._scanRegion.x || 0;\n        var u = this._scanRegion.y || 0;\n        k = this.$overlay.style;\n        k.width = `${n / b * g}px`;\n        k.height = `${q / c * l}px`;\n        k.top = `${m + w + u / c * l}px`;\n        c = /scaleX\\(-1\\)/.test(a.style.transform);\n        k.left = `${h + (c ? d - v - g : v) + (c ? b - p - n : p) / b * g}px`;\n        k.transform = a.style.transform;\n      }\n    });\n  }\n  static _convertPoints(a, b) {\n    if (!b) return a;\n    let c = b.x || 0,\n      d = b.y || 0,\n      f = b.width && b.downScaledWidth ? b.width / b.downScaledWidth : 1;\n    b = b.height && b.downScaledHeight ? b.height / b.downScaledHeight : 1;\n    for (let h of a) h.x = h.x * f + c, h.y = h.y * b + d;\n    return a;\n  }\n  _scanFrame() {\n    !this._active || this.$video.paused || this.$video.ended || (\"requestVideoFrameCallback\" in this.$video ? this.$video.requestVideoFrameCallback.bind(this.$video) : requestAnimationFrame)(async () => {\n      if (!(1 >= this.$video.readyState)) {\n        var a = Date.now() - this._lastScanTimestamp,\n          b = 1E3 / this._maxScansPerSecond;\n        a < b && (await new Promise(d => setTimeout(d, b - a)));\n        this._lastScanTimestamp = Date.now();\n        try {\n          var c = await e.scanImage(this.$video, {\n            scanRegion: this._scanRegion,\n            qrEngine: this._qrEnginePromise,\n            canvas: this.$canvas\n          });\n        } catch (d) {\n          if (!this._active) return;\n          this._onDecodeError(d);\n        }\n        !e._disableBarcodeDetector || (await this._qrEnginePromise) instanceof Worker || (this._qrEnginePromise = e.createQrEngine());\n        c ? (this._onDecode ? this._onDecode(c) : this._legacyOnDecode && this._legacyOnDecode(c.data), this.$codeOutlineHighlight && (clearTimeout(this._codeOutlineHighlightRemovalTimeout), this._codeOutlineHighlightRemovalTimeout = void 0, this.$codeOutlineHighlight.setAttribute(\"viewBox\", `${this._scanRegion.x || 0} ` + `${this._scanRegion.y || 0} ` + `${this._scanRegion.width || this.$video.videoWidth} ` + `${this._scanRegion.height || this.$video.videoHeight}`), this.$codeOutlineHighlight.firstElementChild.setAttribute(\"points\", c.cornerPoints.map(({\n          x: d,\n          y: f\n        }) => `${d},${f}`).join(\" \")), this.$codeOutlineHighlight.style.display = \"\")) : this.$codeOutlineHighlight && !this._codeOutlineHighlightRemovalTimeout && (this._codeOutlineHighlightRemovalTimeout = setTimeout(() => this.$codeOutlineHighlight.style.display = \"none\", 100));\n      }\n      this._scanFrame();\n    });\n  }\n  _onDecodeError(a) {\n    a !== e.NO_QR_CODE_FOUND && console.log(a);\n  }\n  async _getCameraStream() {\n    if (!navigator.mediaDevices) throw \"Camera not found.\";\n    let a = /^(environment|user)$/.test(this._preferredCamera) ? \"facingMode\" : \"deviceId\",\n      b = [{\n        width: {\n          min: 1024\n        }\n      }, {\n        width: {\n          min: 768\n        }\n      }, {}],\n      c = b.map(d => Object.assign({}, d, {\n        [a]: {\n          exact: this._preferredCamera\n        }\n      }));\n    for (let d of [...c, ...b]) try {\n      let f = await navigator.mediaDevices.getUserMedia({\n          video: d,\n          audio: !1\n        }),\n        h = this._getFacingMode(f) || (d.facingMode ? this._preferredCamera : \"environment\" === this._preferredCamera ? \"user\" : \"environment\");\n      return {\n        stream: f,\n        facingMode: h\n      };\n    } catch (f) {}\n    throw \"Camera not found.\";\n  }\n  async _restartVideoStream() {\n    let a = this._paused;\n    (await this.pause(!0)) && !a && this._active && (await this.start());\n  }\n  static _stopVideoStream(a) {\n    for (let b of a.getTracks()) b.stop(), a.removeTrack(b);\n  }\n  _setVideoMirror(a) {\n    this.$video.style.transform = \"scaleX(\" + (\"user\" === a ? -1 : 1) + \")\";\n  }\n  _getFacingMode(a) {\n    return (a = a.getVideoTracks()[0]) ? /rear|back|environment/i.test(a.label) ? \"environment\" : /front|user|face/i.test(a.label) ? \"user\" : null : null;\n  }\n  static _drawToCanvas(a, b, c, d = !1) {\n    c = c || document.createElement(\"canvas\");\n    let f = b && b.x ? b.x : 0,\n      h = b && b.y ? b.y : 0,\n      m = b && b.width ? b.width : a.videoWidth || a.width,\n      n = b && b.height ? b.height : a.videoHeight || a.height;\n    d || (d = b && b.downScaledWidth ? b.downScaledWidth : m, b = b && b.downScaledHeight ? b.downScaledHeight : n, c.width !== d && (c.width = d), c.height !== b && (c.height = b));\n    b = c.getContext(\"2d\", {\n      alpha: !1\n    });\n    b.imageSmoothingEnabled = !1;\n    b.drawImage(a, f, h, m, n, 0, 0, c.width, c.height);\n    return [c, b];\n  }\n  static async _loadImage(a) {\n    if (a instanceof Image) return await e._awaitImageLoad(a), a;\n    if (a instanceof HTMLVideoElement || a instanceof HTMLCanvasElement || a instanceof SVGImageElement || \"OffscreenCanvas\" in window && a instanceof OffscreenCanvas || \"ImageBitmap\" in window && a instanceof ImageBitmap) return a;\n    if (a instanceof File || a instanceof Blob || a instanceof URL || \"string\" === typeof a) {\n      let b = new Image();\n      b.src = a instanceof File || a instanceof Blob ? URL.createObjectURL(a) : a.toString();\n      try {\n        return await e._awaitImageLoad(b), b;\n      } finally {\n        (a instanceof File || a instanceof Blob) && URL.revokeObjectURL(b.src);\n      }\n    } else throw \"Unsupported image type.\";\n  }\n  static async _awaitImageLoad(a) {\n    a.complete && 0 !== a.naturalWidth || (await new Promise((b, c) => {\n      let d = f => {\n        a.removeEventListener(\"load\", d);\n        a.removeEventListener(\"error\", d);\n        f instanceof ErrorEvent ? c(\"Image load error\") : b();\n      };\n      a.addEventListener(\"load\", d);\n      a.addEventListener(\"error\", d);\n    }));\n  }\n  static async _postWorkerMessage(a, b, c, d) {\n    return e._postWorkerMessageSync(await a, b, c, d);\n  }\n  static _postWorkerMessageSync(a, b, c, d) {\n    if (!(a instanceof Worker)) return -1;\n    let f = e._workerMessageId++;\n    a.postMessage({\n      id: f,\n      type: b,\n      data: c\n    }, d);\n    return f;\n  }\n}\ne.DEFAULT_CANVAS_SIZE = 400;\ne.NO_QR_CODE_FOUND = \"No QR code found\";\ne._disableBarcodeDetector = !1;\ne._workerMessageId = 0;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (e);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/qr-scanner/qr-scanner.min.js\n");

/***/ })

};
