{"version":3,"sources":["streamlit_copilot.tsx","index.tsx"],"names":["Copilot","StreamlitComponentBase","userTextarea","suggestionTextarea","state","requestsThisMinute","currentMinute","Math","floor","Date","now","render","theme","this","props","height_int","args","font_fam","font","f_height","f_focused","primaryColor","f_not_focused","secondaryBackgroundColor","tabIndex","style","height","width","border","isFocused","borderRadius","overflowY","overflowX","position","backgroundColor","onFocus","_onFocus","onBlur","_onBlur","marginLeft","fontFamily","marginTop","whiteSpace","outline","color","base","padding","value","suggestion","readOnly","ref","textarea","textColor","text","onChange","onKeyDown","_onTextAreaBlur","onScroll","forceUpdate","event","target","api_upl","setState","trim","callApi","then","key","preventDefault","prevState","syntheticEvent","textAreaIsFocused","Streamlit","setComponentValue","abortController","AbortController","async","abort","Promise","resolve","setTimeout","prompt_template","api_url","model_kwargs","payload","prompt","replace","echo","headers","response","fetch","method","body","JSON","stringify","signal","ok","Error","status","json","error","name","console","componentDidUpdate","scrollTop","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9652d827.chunk.js","sourcesContent":["import {\n  StreamlitComponentBase,\n  withStreamlitConnection,\n  Streamlit,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  text: string\n  suggestion: string\n  isFocused: boolean\n  textAreaIsFocused: boolean\n  requestsThisMinute: number\n  currentMinute: number\n}\n\nclass Copilot extends StreamlitComponentBase<State> {\n\n  private userTextarea: HTMLTextAreaElement | null = null;\n  private suggestionTextarea: HTMLTextAreaElement | null = null;\n  public state = {\n    \"text\": \"\",\n    \"suggestion\": \"\",\n    \"isFocused\": false,\n    'textAreaIsFocused': false,\n    requestsThisMinute: 0,\n    currentMinute: Math.floor(Date.now() / 60000)\n  }\n\n  public render = (): ReactNode => {\n    const { theme } = this.props\n    if (!theme) {\n      return <div>Theme is undefined, please check streamlit version.</div>\n    }\n    const height_int = this.props.args[\"height\"]\n    const font_fam = theme.font;\n\n    const f_height = height_int + 'px';\n\n    const f_focused = '1px solid ' + theme.primaryColor;\n    const f_not_focused = '1px solid ' + theme.secondaryBackgroundColor;\n\n    return (\n        <div\n          tabIndex={0}\n          style={\n            {\n              height:f_height,\n              width:'auto',\n              border:this.state.isFocused ? f_focused: f_not_focused,\n              borderRadius:'0.5em',\n              overflowY:'scroll',\n              overflowX:'hidden',\n              position: 'relative',\n              backgroundColor: theme.secondaryBackgroundColor\n            }\n          }\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n        >\n          <textarea\n  style={\n    {\n      marginLeft:'0.5em',\n      fontFamily:font_fam,\n      marginTop:'0.2em',\n      whiteSpace: 'pre-wrap',\n      width:  'calc(100% - 1.2em)',\n      height: '100%',\n      border: 'none',\n      outline: 'none',\n      position: 'absolute',\n      backgroundColor: 'transparent',\n      color: theme.base === 'light' ? 'rgba(41,51,62,0.5)' : 'rgba(255,255,255,0.5)',\n      padding: '0'\n    }\n  }\n  value={this.state.suggestion}\n  readOnly\n  ref={(textarea) => { this.suggestionTextarea = textarea; }}\n/>\n          <textarea\n            style={\n            {\n              marginLeft:'0.5em',\n              fontFamily:font_fam,\n              marginTop:'0.2em',\n              whiteSpace: 'pre-wrap',\n              width:  'calc(100% - 1.2em)',\n              height: '100%',\n              border: 'none',\n              outline: 'none',\n              position: 'absolute',\n              backgroundColor: 'transparent',\n              color:theme.textColor,\n              padding: '0'\n            }\n          }\n            value={this.state.text}\n            onChange={this.onChange}\n            onKeyDown={this.onKeyDown}\n            onBlur={this._onTextAreaBlur}\n            onScroll={this.onScroll}\n            ref={(textarea) => { this.userTextarea = textarea; }}\n          />\n        </div>\n    )\n  }\n\n  public componentDidUpdate(): void {\n  if (this.userTextarea && this.suggestionTextarea) {\n    this.suggestionTextarea.scrollTop = this.userTextarea.scrollTop;\n  }\n}\nprivate onScroll = (): void => {\n    this.forceUpdate();\n  }\n  private onChange = (event: React.ChangeEvent<HTMLTextAreaElement>): void => {\n  const text = event.target.value\n  const api_upl = this.props.args[\"api_url\"]\n  this.setState({ text, suggestion: \"\" }, () => {\n    if (text.trim() !== \"\") {\n      this.callApi(text, api_upl).then(suggestion => {\n         if (this.state.text.trim() !== \"\") {\n          this.setState({ suggestion: this.state.text + suggestion })\n        }\n      })\n    }\n  })\n}\n\n\n  private onKeyDown = (event: React.KeyboardEvent<HTMLTextAreaElement>): void => {\n  if (event.key === 'Enter') {\n    event.preventDefault()\n    this.setState(prevState => ({\n      text: prevState.suggestion,\n      suggestion: ''\n    }), () => {\n      // Create a synthetic event and call onChange manually\n      const syntheticEvent = {\n        target: { value: this.state.text }\n      } as React.ChangeEvent<HTMLTextAreaElement>;\n      this.onChange(syntheticEvent);\n    })\n  }\n}\n\n  private _onTextAreaBlur = (): void => {\n    this.setState({ textAreaIsFocused: false }, () => {\n      Streamlit.setComponentValue(this.state.text);\n      this.setState({ suggestion: '' });\n    });\n  }\n\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n\n  private abortController = new AbortController();\n\nprivate callApi = async (text: string, api_upl: string): Promise<string> => {\n  // Abort the previous request\n  this.abortController.abort();\n  this.abortController = new AbortController();\n\n  if (text.trim() === \"\") {\n    return \"\";\n  }\n\n  const currentMinute = Math.floor(Date.now() / 60000);\n  if (currentMinute > this.state.currentMinute) {\n    this.setState({\n      currentMinute: currentMinute,\n      requestsThisMinute: 0\n    });\n  } else if (this.state.requestsThisMinute > this.props.args[\"rpm_limit\"]) {\n    // Retry after 1 second if limit is exceeded\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(this.callApi(text, api_upl));\n      }, 1000);\n    });\n  }\n\n  const {prompt_template, api_url, height, fontFamily, border, ...model_kwargs} = this.props.args;\n  const prompt = prompt_template.replace(\"{text}\", text); // format the prompt\n  const payload = {\n    prompt: prompt,\n    ...model_kwargs,\n    echo: false\n  };\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n\n  try {\n    const response = await fetch(api_upl, {\n      method: \"POST\",\n      headers: headers,\n      body: JSON.stringify(payload),\n      signal: this.abortController.signal\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    this.setState(prevState => ({\n    requestsThisMinute: prevState.requestsThisMinute + 1\n  }));\n\n    const responseJson = await response.json();\n    return responseJson[\"choices\"][0][\"text\"];\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      return \"\";  // Return empty string if request was aborted\n    }\n    console.error(\"Error decoding response\", error);\n    return \"\";\n  }\n}\n}\n\nexport default withStreamlitConnection(Copilot)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport ScrollableText from \"./streamlit_copilot\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ScrollableText />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}