stages:
  - setup
  - static-analysis
  - package
  - tests
  - publish

variables:
  BUILD_IMAGE_PATH: ${CI_REGISTRY_IMAGE}/build-image:${CI_COMMIT_SHORT_SHA}
  BUILD_IMAGE_VENV_PATH: /venv

  FLIT_ROOT_INSTALL: 1
  GIT_STRATEGY: clone
  GIT_DEPTH: "0"
  BUILDHARNESS_LOG_LEVEL: debug

  PACKAGE_NAME: click_logging_config
  PROJECT_NAME: click-logging-config

  PYPI_API_USER: __token__

  # Don't forget to update the coverage threshold in .pre-commit-config.yaml
  UNITTEST_COVERAGE_THRESHOLD: 90

  VENV_BIN: /venv/bin


workflow:
  rules:
    # NOTE: Gitlab-CI conditionals are not strictly shell compliant and must not use
    #       curly brackets.
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'


.declare-artifacts: &declare-artifacts
  artifacts:
    expire_in: 1 week
    paths:
      - dist/


.build-harness-target:
  image: ${BUILD_IMAGE_PATH}
  script:
    - ${VENV_BIN}/pip install .
    - |
      ${VENV_BIN}/build-harness \
        --log-console-enable \
        --log-file-enable \
        --log-level ${BUILDHARNESS_LOG_LEVEL} \
        ${TARGET}


.git-work-around:
  before_script:
    # https://gitlab.com/gitlab-org/gitlab/-/issues/350100#note_946527787
    # HACK This is a workaround for the GitLab Runner bug
    #      <https://gitlab.com/gitlab-org/gitlab/-/issues/350100>.
    # If we are on CI,
    # and we are (supposed to be) building a branch,
    # and the SHA of that branch is given
    # and the branch to be built does not exist, locally,
    # create it,
    # check it out,
    # and set its remote tracking branch, if available.
    # NOTE This should also work on local machines,
    #      GitHub Actions and other CI systems,
    #      as there it should result in a no-op,
    #      because the `CI_*` variables will not be set,
    #      and the branch will already exist.
    - |
      if \
          [ -n "$CI" ] && \
          [ -n "$CI_COMMIT_BRANCH" ] && \
          [ -n "$CI_COMMIT_SHA" ] && \
          ! git show-ref --verify --quiet "refs/heads/$CI_COMMIT_BRANCH"
      then
          git branch "$CI_COMMIT_BRANCH" "$CI_COMMIT_SHA"
          git checkout "$CI_COMMIT_BRANCH"
          # Sets the upstream branch, if it exists
          if git show-ref --verify --quiet "refs/remotes/origin/$CI_COMMIT_BRANCH"
          then
              git branch --set-upstream-to="origin/$CI_COMMIT_BRANCH"
          fi
      fi


.pyenv-setup:
  before_script:
    - |
      command -v pyenv >/dev/null || export PATH="${PYENV_ROOT}/bin:${PATH}"
      eval "$(pyenv init -)"
      pyenv shell ${python_version}
      python3 --version
      /venv/bin/python3 --version


check-dockerfile:
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    expire_in: 1 day
    when: always
    reports:
      codequality:
        - "reports/*"
    paths:
      - "reports/*"
  image:
    name: hadolint/hadolint:2.5.0-debian
  stage: setup

  script:
    - mkdir -p reports
    - |
      hadolint \
        -f gitlab_codeclimate \
        "${CI_PROJECT_DIR}/docker/ci/Dockerfile" \
        > "reports/hadolint-$(md5sum ${CI_PROJECT_DIR}/docker/ci/Dockerfile | cut -d" " -f1).json"


construct-build-image:
  # https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
  # Run this build on Gitlab shared runners since it is IO intensive.
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  stage: setup
  variables:
    KANIKO_DOCKER_DIR: /kaniko/.docker

  script:
    - mkdir -p "${KANIKO_DOCKER_DIR}"
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > "${KANIKO_DOCKER_DIR}/config.json"
    - |
      /kaniko/executor \
        --build-arg venv_path="${BUILD_IMAGE_VENV_PATH}" \
        --build-arg project_dir="${CI_PROJECT_DIR}" \
        --build-arg project_name="${PROJECT_NAME}" \
        --context "${CI_PROJECT_DIR}" \
        --dockerfile "${CI_PROJECT_DIR}/docker/ci/Dockerfile" \
        --destination "${BUILD_IMAGE_PATH}"


formatting-check:
  extends:
    - .build-harness-target
  stage: static-analysis
  variables:
    TARGET: formatting --check


flake8-check:
  extends:
    - .build-harness-target
    - .pyenv-setup
  parallel:
    matrix:
      - python_version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
  stage: static-analysis
  variables:
    TARGET: static-analysis --analysis flake8


mypy-check:
  extends:
    - .build-harness-target
    - .pyenv-setup
  parallel:
    matrix:
      - python_version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
  stage: static-analysis
  variables:
    TARGET: static-analysis --analysis mypy


run-tests:
  extends:
    - .build-harness-target
    - .pyenv-setup
  parallel:
    matrix:
      - python_version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
  stage: tests
  # Use Gitlab shared runners (untagged) for IO intensive test
  tags:
  variables:
    TARGET: unit-test


run-tests-coverage:
  extends:
    - .git-work-around
    - .build-harness-target
  stage: tests
  # Use Gitlab shared runners (untagged) for IO intensive test
  tags:
  variables:
    TARGET: unit-test --check ${UNITTEST_COVERAGE_THRESHOLD}

  <<: *declare-artifacts


build-packages:
  artifacts:
    expire_in: 1 week
    paths:
      - dist/
      - build_harness.log
      - release_flow.log
    when: always
  image: ${BUILD_IMAGE_PATH}
  stage: package
  script:
    - ${VENV_BIN}/pip uninstall -y click_logging_config
    - ${VENV_BIN}/pip install .
    - echo "${CI_DEFAULT_BRANCH}"
    - ${VENV_BIN}/release-flow --version
    - |
      echo $(${VENV_BIN}/release-flow \
        --log-console-enable \
        --log-file-enable \
        --log-level ${BUILDHARNESS_LOG_LEVEL} \
        --default-branch "${CI_DEFAULT_BRANCH}")
    - |
      export THIS_VERSION=$(${VENV_BIN}/release-flow \
      --log-console-disable \
      --log-file-enable \
      --log-level ${BUILDHARNESS_LOG_LEVEL} \
      --default-branch "${CI_DEFAULT_BRANCH}")
    # log THIS_VERSION to pipeline log for debugging
    - echo "${THIS_VERSION}"
    - |
      ${VENV_BIN}/build-harness \
        --log-console-disable \
        --log-file-enable \
        --log-level ${BUILDHARNESS_LOG_LEVEL} \
        package \
          --release-id "${THIS_VERSION}"


install-check:
  extends:
    - .build-harness-target
  image: ${BUILD_IMAGE_PATH}
  needs:
    - job: build-packages
      artifacts: true
  script:
    - ls -l dist/
    - ${VENV_BIN}/pip install dist/${PACKAGE_NAME}*.whl
  stage: tests


publish-packages:
  artifacts:
    expire_in: 1 week
    paths:
      - build_harness.log
      - publish_flow.log
    when: on_failure
  image: ${BUILD_IMAGE_PATH}
  needs:
    - job: build-packages
      artifacts: true
  stage: publish
  script:
    - ${VENV_BIN}/pip uninstall -y click_logging_config
    - ${VENV_BIN}/pip install .
    - echo "${CI_DEFAULT_BRANCH}"
    - echo "${CI_COMMIT_BRANCH}"
    - echo "${CI_COMMIT_REF_NAME}"
    - |
      if [ "${CI_PIPELINE_SOURCE}" == "merge_request_event" ] || [[ "${CI_COMMIT_BRANCH}" =~ ^feature/ ]]; then \
        export PUBLISH_THIS="dryrun"; \
      elif [ "${CI_COMMIT_BRANCH}" == "${CI_DEFAULT_BRANCH}" ]; then \
        export PUBLISH_THIS="yes"; \
      else \
        export PUBLISH_THIS=$( \
          ${VENV_BIN}/publish-flow \
            --log-console-disable \
            --log-file-enable \
            --log-level ${BUILDHARNESS_LOG_LEVEL} \
            --default-branch "${CI_DEFAULT_BRANCH}" \
            --disable-pr-publish "${CI_PIPELINE_SOURCE}" \
            --publish-prerelease \
        ); \
      fi
    # log PUBLISH_THIS to pipeline log for debugging
    - echo ${PUBLISH_THIS}
    # NOTE: using the `--password` option to read from environment variable as
    # this is the most likely to be available in a CI system (but not
    # necessarily the most secure).
    - |
      ${VENV_BIN}/build-harness \
        --log-console-enable \
        --log-file-enable \
        --log-level ${BUILDHARNESS_LOG_LEVEL} \
        publish \
          --user $PYPI_API_USER \
          --password $PYPI_API_TOKEN \
          --publish ${PUBLISH_THIS}
