Metadata-Version: 2.1
Name: bardata
Version: 0.0.1
Summary: Bar data manipulation utilities
Author-email: Furechan <furechan@xsmail.com>
License: Copyright (c) 2016 The Python Packaging Authority (PyPA)
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of
        this software and associated documentation files (the "Software"), to deal in
        the Software without restriction, including without limitation the rights to
        use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
        of the Software, and to permit persons to whom the Software is furnished to do
        so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
License-File: LICENSE.txt
Keywords: data,finance
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.9
Requires-Dist: importlib-metadata; python_version < '3.10'
Requires-Dist: numpy
Requires-Dist: pandas
Requires-Dist: python-dateutil
Requires-Dist: requests
Description-Content-Type: text/markdown

# Bar data utilities in Python

This package includes utilities and a plugin model to fetch and manipulate bar data
for stocks and other financial series. This is work in progress.

Bar data is represented as a datafrane with a `date` timestamp index
and `open`, `high`, `low`, `close`, `volume` columns all in lower case.
Data for stocks prices is always assumed adjusted.

The main conventions are:
- data sources are referenced by an opaque `source` parameter
- flexible definition of frequencies with the `freq` parameter
- maximum number of bars is indicated with the `max_bars` parameter
- date range is optional with `start_date` and `end_date` parameters

## Typical Usage

```python
from bardata import get_tickers, get_prices

SOURCE = 'sample'
FREQ = 'daily'

tickers = get_tickers(source=SOURCE)

for ticker in tickers:
    prices = get_prices(ticker, freq=FREQ, source=SOURCE)
    ...
```


