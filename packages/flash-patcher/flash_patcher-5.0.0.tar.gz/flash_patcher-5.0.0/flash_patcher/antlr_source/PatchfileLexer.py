# Generated from ../flash_patcher/antlr_source/PatchfileLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,15,279,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,
        7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
        2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,
        7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,
        2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,
        7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,
        2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,
        1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,123,8,2,
        1,2,4,2,126,8,2,11,2,12,2,127,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,3,2,142,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,
        5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,
        12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,
        19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,
        25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,
        32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,4,
        38,236,8,38,11,38,12,38,237,1,39,1,39,1,40,4,40,243,8,40,11,40,12,
        40,244,1,41,4,41,248,8,41,11,41,12,41,249,1,41,1,41,1,42,1,42,5,
        42,256,8,42,10,42,12,42,259,9,42,1,42,1,42,1,43,1,43,1,43,1,43,1,
        43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,4,44,276,8,44,11,44,12,
        44,277,2,127,277,0,45,2,1,4,2,6,3,8,4,10,5,12,6,14,7,16,8,18,0,20,
        0,22,0,24,0,26,0,28,0,30,0,32,0,34,0,36,0,38,0,40,0,42,0,44,0,46,
        0,48,0,50,0,52,0,54,0,56,0,58,0,60,0,62,0,64,0,66,0,68,0,70,0,72,
        0,74,0,76,0,78,9,80,10,82,11,84,12,86,13,88,14,90,15,2,0,1,32,2,
        0,65,65,97,97,2,0,66,66,98,98,2,0,67,67,99,99,2,0,68,68,100,100,
        2,0,69,69,101,101,2,0,70,70,102,102,2,0,71,71,103,103,2,0,72,72,
        104,104,2,0,73,73,105,105,2,0,74,74,106,106,2,0,75,75,107,107,2,
        0,76,76,108,108,2,0,77,77,109,109,2,0,78,78,110,110,2,0,79,79,111,
        111,2,0,80,80,112,112,2,0,81,81,113,113,2,0,82,82,114,114,2,0,83,
        83,115,115,2,0,84,84,116,116,2,0,85,85,117,117,2,0,86,86,118,118,
        2,0,87,87,119,119,2,0,88,88,120,120,2,0,89,89,121,121,2,0,90,90,
        122,122,2,0,65,90,97,122,1,0,48,57,2,0,47,47,92,92,4,0,10,10,13,
        13,32,32,45,45,3,0,9,10,12,13,32,32,2,0,10,10,13,13,255,0,2,1,0,
        0,0,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,
        0,0,14,1,0,0,0,0,16,1,0,0,0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,1,0,0,
        0,0,84,1,0,0,0,0,86,1,0,0,0,1,88,1,0,0,0,1,90,1,0,0,0,2,92,1,0,0,
        0,4,96,1,0,0,0,6,141,1,0,0,0,8,143,1,0,0,0,10,157,1,0,0,0,12,166,
        1,0,0,0,14,170,1,0,0,0,16,172,1,0,0,0,18,174,1,0,0,0,20,176,1,0,
        0,0,22,178,1,0,0,0,24,180,1,0,0,0,26,182,1,0,0,0,28,184,1,0,0,0,
        30,186,1,0,0,0,32,188,1,0,0,0,34,190,1,0,0,0,36,192,1,0,0,0,38,194,
        1,0,0,0,40,196,1,0,0,0,42,198,1,0,0,0,44,200,1,0,0,0,46,202,1,0,
        0,0,48,204,1,0,0,0,50,206,1,0,0,0,52,208,1,0,0,0,54,210,1,0,0,0,
        56,212,1,0,0,0,58,214,1,0,0,0,60,216,1,0,0,0,62,218,1,0,0,0,64,220,
        1,0,0,0,66,222,1,0,0,0,68,224,1,0,0,0,70,226,1,0,0,0,72,228,1,0,
        0,0,74,230,1,0,0,0,76,232,1,0,0,0,78,235,1,0,0,0,80,239,1,0,0,0,
        82,242,1,0,0,0,84,247,1,0,0,0,86,253,1,0,0,0,88,262,1,0,0,0,90,275,
        1,0,0,0,92,93,3,18,8,0,93,94,3,24,11,0,94,95,3,24,11,0,95,3,1,0,
        0,0,96,97,3,52,25,0,97,98,3,26,12,0,98,99,3,42,20,0,99,100,3,46,
        22,0,100,101,3,60,29,0,101,102,3,26,12,0,102,5,1,0,0,0,103,104,3,
        24,11,0,104,105,3,26,12,0,105,106,3,28,13,0,106,107,3,34,16,0,107,
        108,3,44,21,0,108,109,3,26,12,0,109,110,3,54,26,0,110,111,3,48,23,
        0,111,112,3,52,25,0,112,113,3,34,16,0,113,114,3,56,27,0,114,115,
        3,26,12,0,115,123,1,0,0,0,116,117,3,28,13,0,117,118,3,52,25,0,118,
        119,3,18,8,0,119,120,3,42,20,0,120,121,3,26,12,0,121,123,1,0,0,0,
        122,103,1,0,0,0,122,116,1,0,0,0,123,125,1,0,0,0,124,126,9,0,0,0,
        125,124,1,0,0,0,126,127,1,0,0,0,127,128,1,0,0,0,127,125,1,0,0,0,
        128,129,1,0,0,0,129,130,5,46,0,0,130,131,5,97,0,0,131,132,5,115,
        0,0,132,142,1,0,0,0,133,134,3,54,26,0,134,135,3,62,30,0,135,136,
        3,28,13,0,136,137,5,46,0,0,137,138,5,120,0,0,138,139,5,109,0,0,139,
        140,5,108,0,0,140,142,1,0,0,0,141,122,1,0,0,0,141,133,1,0,0,0,142,
        7,1,0,0,0,143,144,3,20,9,0,144,145,3,26,12,0,145,146,3,30,14,0,146,
        147,3,34,16,0,147,148,3,44,21,0,148,149,5,45,0,0,149,150,3,48,23,
        0,150,151,3,18,8,0,151,152,3,56,27,0,152,153,3,22,10,0,153,154,3,
        32,15,0,154,155,1,0,0,0,155,156,6,3,0,0,156,9,1,0,0,0,157,158,3,
        28,13,0,158,159,3,58,28,0,159,160,3,44,21,0,160,161,3,22,10,0,161,
        162,3,56,27,0,162,163,3,34,16,0,163,164,3,46,22,0,164,165,3,44,21,
        0,165,11,1,0,0,0,166,167,3,26,12,0,167,168,3,44,21,0,168,169,3,24,
        11,0,169,13,1,0,0,0,170,171,5,40,0,0,171,15,1,0,0,0,172,173,5,41,
        0,0,173,17,1,0,0,0,174,175,7,0,0,0,175,19,1,0,0,0,176,177,7,1,0,
        0,177,21,1,0,0,0,178,179,7,2,0,0,179,23,1,0,0,0,180,181,7,3,0,0,
        181,25,1,0,0,0,182,183,7,4,0,0,183,27,1,0,0,0,184,185,7,5,0,0,185,
        29,1,0,0,0,186,187,7,6,0,0,187,31,1,0,0,0,188,189,7,7,0,0,189,33,
        1,0,0,0,190,191,7,8,0,0,191,35,1,0,0,0,192,193,7,9,0,0,193,37,1,
        0,0,0,194,195,7,10,0,0,195,39,1,0,0,0,196,197,7,11,0,0,197,41,1,
        0,0,0,198,199,7,12,0,0,199,43,1,0,0,0,200,201,7,13,0,0,201,45,1,
        0,0,0,202,203,7,14,0,0,203,47,1,0,0,0,204,205,7,15,0,0,205,49,1,
        0,0,0,206,207,7,16,0,0,207,51,1,0,0,0,208,209,7,17,0,0,209,53,1,
        0,0,0,210,211,7,18,0,0,211,55,1,0,0,0,212,213,7,19,0,0,213,57,1,
        0,0,0,214,215,7,20,0,0,215,59,1,0,0,0,216,217,7,21,0,0,217,61,1,
        0,0,0,218,219,7,22,0,0,219,63,1,0,0,0,220,221,7,23,0,0,221,65,1,
        0,0,0,222,223,7,24,0,0,223,67,1,0,0,0,224,225,7,25,0,0,225,69,1,
        0,0,0,226,227,7,26,0,0,227,71,1,0,0,0,228,229,7,27,0,0,229,73,1,
        0,0,0,230,231,5,32,0,0,231,75,1,0,0,0,232,233,7,28,0,0,233,77,1,
        0,0,0,234,236,3,72,35,0,235,234,1,0,0,0,236,237,1,0,0,0,237,235,
        1,0,0,0,237,238,1,0,0,0,238,79,1,0,0,0,239,240,5,45,0,0,240,81,1,
        0,0,0,241,243,8,29,0,0,242,241,1,0,0,0,243,244,1,0,0,0,244,242,1,
        0,0,0,244,245,1,0,0,0,245,83,1,0,0,0,246,248,7,30,0,0,247,246,1,
        0,0,0,248,249,1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,251,1,
        0,0,0,251,252,6,41,1,0,252,85,1,0,0,0,253,257,5,35,0,0,254,256,8,
        31,0,0,255,254,1,0,0,0,256,259,1,0,0,0,257,255,1,0,0,0,257,258,1,
        0,0,0,258,260,1,0,0,0,259,257,1,0,0,0,260,261,6,42,1,0,261,87,1,
        0,0,0,262,263,3,26,12,0,263,264,3,44,21,0,264,265,3,24,11,0,265,
        266,5,45,0,0,266,267,3,48,23,0,267,268,3,18,8,0,268,269,3,56,27,
        0,269,270,3,22,10,0,270,271,3,32,15,0,271,272,1,0,0,0,272,273,6,
        43,2,0,273,89,1,0,0,0,274,276,9,0,0,0,275,274,1,0,0,0,276,277,1,
        0,0,0,277,278,1,0,0,0,277,275,1,0,0,0,278,91,1,0,0,0,10,0,1,122,
        127,141,237,244,249,257,277,3,2,1,0,6,0,0,2,0,0
    ]

class PatchfileLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ADD_BLOCK_MODE = 1

    ADD = 1
    REMOVE = 2
    FILENAME = 3
    BEGIN_PATCH = 4
    FUNCTION = 5
    END = 6
    OPEN_BLOCK = 7
    CLOSE_BLOCK = 8
    INTEGER = 9
    DASH = 10
    FUNCTION_NAME = 11
    WHITESPACE = 12
    COMMENT = 13
    END_PATCH = 14
    AS_TEXT = 15

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "ADD_BLOCK_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "ADD", "REMOVE", "FILENAME", "BEGIN_PATCH", "FUNCTION", "END", 
            "OPEN_BLOCK", "CLOSE_BLOCK", "INTEGER", "DASH", "FUNCTION_NAME", 
            "WHITESPACE", "COMMENT", "END_PATCH", "AS_TEXT" ]

    ruleNames = [ "ADD", "REMOVE", "FILENAME", "BEGIN_PATCH", "FUNCTION", 
                  "END", "OPEN_BLOCK", "CLOSE_BLOCK", "A", "B", "C", "D", 
                  "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", 
                  "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", 
                  "LETTER", "NUMBER", "SPACE", "SLASH", "INTEGER", "DASH", 
                  "FUNCTION_NAME", "WHITESPACE", "COMMENT", "END_PATCH", 
                  "AS_TEXT" ]

    grammarFileName = "PatchfileLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


