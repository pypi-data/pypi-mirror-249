# coding: utf-8

"""
    rds_mysql_v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DataForDescribeEventsOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_version': 'str',
        'cost_time_ms': 'int',
        'event_action': 'str',
        'event_category': 'str',
        'event_desc': 'str',
        'event_id': 'str',
        'event_params': 'str',
        'event_reason': 'str',
        'event_result': 'str',
        'event_source': 'str',
        'event_type': 'str',
        'extend': 'str',
        'finish_time': 'str',
        'instance_id': 'str',
        'instance_name': 'str',
        'modify_time': 'str',
        'operation_time': 'str',
        'owner_host_ip': 'str',
        'owner_ip': 'str',
        'owner_name': 'str',
        'resource_name': 'str',
        'resource_type': 'str'
    }

    attribute_map = {
        'api_version': 'APIVersion',
        'cost_time_ms': 'CostTimeMS',
        'event_action': 'EventAction',
        'event_category': 'EventCategory',
        'event_desc': 'EventDesc',
        'event_id': 'EventId',
        'event_params': 'EventParams',
        'event_reason': 'EventReason',
        'event_result': 'EventResult',
        'event_source': 'EventSource',
        'event_type': 'EventType',
        'extend': 'Extend',
        'finish_time': 'FinishTime',
        'instance_id': 'InstanceID',
        'instance_name': 'InstanceName',
        'modify_time': 'ModifyTime',
        'operation_time': 'OperationTime',
        'owner_host_ip': 'OwnerHostIP',
        'owner_ip': 'OwnerIP',
        'owner_name': 'OwnerName',
        'resource_name': 'ResourceName',
        'resource_type': 'ResourceType'
    }

    def __init__(self, api_version=None, cost_time_ms=None, event_action=None, event_category=None, event_desc=None, event_id=None, event_params=None, event_reason=None, event_result=None, event_source=None, event_type=None, extend=None, finish_time=None, instance_id=None, instance_name=None, modify_time=None, operation_time=None, owner_host_ip=None, owner_ip=None, owner_name=None, resource_name=None, resource_type=None, _configuration=None):  # noqa: E501
        """DataForDescribeEventsOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._api_version = None
        self._cost_time_ms = None
        self._event_action = None
        self._event_category = None
        self._event_desc = None
        self._event_id = None
        self._event_params = None
        self._event_reason = None
        self._event_result = None
        self._event_source = None
        self._event_type = None
        self._extend = None
        self._finish_time = None
        self._instance_id = None
        self._instance_name = None
        self._modify_time = None
        self._operation_time = None
        self._owner_host_ip = None
        self._owner_ip = None
        self._owner_name = None
        self._resource_name = None
        self._resource_type = None
        self.discriminator = None

        if api_version is not None:
            self.api_version = api_version
        if cost_time_ms is not None:
            self.cost_time_ms = cost_time_ms
        if event_action is not None:
            self.event_action = event_action
        if event_category is not None:
            self.event_category = event_category
        if event_desc is not None:
            self.event_desc = event_desc
        if event_id is not None:
            self.event_id = event_id
        if event_params is not None:
            self.event_params = event_params
        if event_reason is not None:
            self.event_reason = event_reason
        if event_result is not None:
            self.event_result = event_result
        if event_source is not None:
            self.event_source = event_source
        if event_type is not None:
            self.event_type = event_type
        if extend is not None:
            self.extend = extend
        if finish_time is not None:
            self.finish_time = finish_time
        if instance_id is not None:
            self.instance_id = instance_id
        if instance_name is not None:
            self.instance_name = instance_name
        if modify_time is not None:
            self.modify_time = modify_time
        if operation_time is not None:
            self.operation_time = operation_time
        if owner_host_ip is not None:
            self.owner_host_ip = owner_host_ip
        if owner_ip is not None:
            self.owner_ip = owner_ip
        if owner_name is not None:
            self.owner_name = owner_name
        if resource_name is not None:
            self.resource_name = resource_name
        if resource_type is not None:
            self.resource_type = resource_type

    @property
    def api_version(self):
        """Gets the api_version of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The api_version of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this DataForDescribeEventsOutput.


        :param api_version: The api_version of this DataForDescribeEventsOutput.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def cost_time_ms(self):
        """Gets the cost_time_ms of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The cost_time_ms of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: int
        """
        return self._cost_time_ms

    @cost_time_ms.setter
    def cost_time_ms(self, cost_time_ms):
        """Sets the cost_time_ms of this DataForDescribeEventsOutput.


        :param cost_time_ms: The cost_time_ms of this DataForDescribeEventsOutput.  # noqa: E501
        :type: int
        """

        self._cost_time_ms = cost_time_ms

    @property
    def event_action(self):
        """Gets the event_action of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The event_action of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._event_action

    @event_action.setter
    def event_action(self, event_action):
        """Sets the event_action of this DataForDescribeEventsOutput.


        :param event_action: The event_action of this DataForDescribeEventsOutput.  # noqa: E501
        :type: str
        """

        self._event_action = event_action

    @property
    def event_category(self):
        """Gets the event_category of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The event_category of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._event_category

    @event_category.setter
    def event_category(self, event_category):
        """Sets the event_category of this DataForDescribeEventsOutput.


        :param event_category: The event_category of this DataForDescribeEventsOutput.  # noqa: E501
        :type: str
        """

        self._event_category = event_category

    @property
    def event_desc(self):
        """Gets the event_desc of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The event_desc of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._event_desc

    @event_desc.setter
    def event_desc(self, event_desc):
        """Sets the event_desc of this DataForDescribeEventsOutput.


        :param event_desc: The event_desc of this DataForDescribeEventsOutput.  # noqa: E501
        :type: str
        """

        self._event_desc = event_desc

    @property
    def event_id(self):
        """Gets the event_id of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The event_id of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this DataForDescribeEventsOutput.


        :param event_id: The event_id of this DataForDescribeEventsOutput.  # noqa: E501
        :type: str
        """

        self._event_id = event_id

    @property
    def event_params(self):
        """Gets the event_params of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The event_params of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._event_params

    @event_params.setter
    def event_params(self, event_params):
        """Sets the event_params of this DataForDescribeEventsOutput.


        :param event_params: The event_params of this DataForDescribeEventsOutput.  # noqa: E501
        :type: str
        """

        self._event_params = event_params

    @property
    def event_reason(self):
        """Gets the event_reason of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The event_reason of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._event_reason

    @event_reason.setter
    def event_reason(self, event_reason):
        """Sets the event_reason of this DataForDescribeEventsOutput.


        :param event_reason: The event_reason of this DataForDescribeEventsOutput.  # noqa: E501
        :type: str
        """

        self._event_reason = event_reason

    @property
    def event_result(self):
        """Gets the event_result of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The event_result of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._event_result

    @event_result.setter
    def event_result(self, event_result):
        """Sets the event_result of this DataForDescribeEventsOutput.


        :param event_result: The event_result of this DataForDescribeEventsOutput.  # noqa: E501
        :type: str
        """

        self._event_result = event_result

    @property
    def event_source(self):
        """Gets the event_source of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The event_source of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._event_source

    @event_source.setter
    def event_source(self, event_source):
        """Sets the event_source of this DataForDescribeEventsOutput.


        :param event_source: The event_source of this DataForDescribeEventsOutput.  # noqa: E501
        :type: str
        """

        self._event_source = event_source

    @property
    def event_type(self):
        """Gets the event_type of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The event_type of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this DataForDescribeEventsOutput.


        :param event_type: The event_type of this DataForDescribeEventsOutput.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def extend(self):
        """Gets the extend of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The extend of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._extend

    @extend.setter
    def extend(self, extend):
        """Sets the extend of this DataForDescribeEventsOutput.


        :param extend: The extend of this DataForDescribeEventsOutput.  # noqa: E501
        :type: str
        """

        self._extend = extend

    @property
    def finish_time(self):
        """Gets the finish_time of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The finish_time of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time):
        """Sets the finish_time of this DataForDescribeEventsOutput.


        :param finish_time: The finish_time of this DataForDescribeEventsOutput.  # noqa: E501
        :type: str
        """

        self._finish_time = finish_time

    @property
    def instance_id(self):
        """Gets the instance_id of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The instance_id of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this DataForDescribeEventsOutput.


        :param instance_id: The instance_id of this DataForDescribeEventsOutput.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def instance_name(self):
        """Gets the instance_name of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The instance_name of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this DataForDescribeEventsOutput.


        :param instance_name: The instance_name of this DataForDescribeEventsOutput.  # noqa: E501
        :type: str
        """

        self._instance_name = instance_name

    @property
    def modify_time(self):
        """Gets the modify_time of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The modify_time of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._modify_time

    @modify_time.setter
    def modify_time(self, modify_time):
        """Sets the modify_time of this DataForDescribeEventsOutput.


        :param modify_time: The modify_time of this DataForDescribeEventsOutput.  # noqa: E501
        :type: str
        """

        self._modify_time = modify_time

    @property
    def operation_time(self):
        """Gets the operation_time of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The operation_time of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._operation_time

    @operation_time.setter
    def operation_time(self, operation_time):
        """Sets the operation_time of this DataForDescribeEventsOutput.


        :param operation_time: The operation_time of this DataForDescribeEventsOutput.  # noqa: E501
        :type: str
        """

        self._operation_time = operation_time

    @property
    def owner_host_ip(self):
        """Gets the owner_host_ip of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The owner_host_ip of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._owner_host_ip

    @owner_host_ip.setter
    def owner_host_ip(self, owner_host_ip):
        """Sets the owner_host_ip of this DataForDescribeEventsOutput.


        :param owner_host_ip: The owner_host_ip of this DataForDescribeEventsOutput.  # noqa: E501
        :type: str
        """

        self._owner_host_ip = owner_host_ip

    @property
    def owner_ip(self):
        """Gets the owner_ip of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The owner_ip of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._owner_ip

    @owner_ip.setter
    def owner_ip(self, owner_ip):
        """Sets the owner_ip of this DataForDescribeEventsOutput.


        :param owner_ip: The owner_ip of this DataForDescribeEventsOutput.  # noqa: E501
        :type: str
        """

        self._owner_ip = owner_ip

    @property
    def owner_name(self):
        """Gets the owner_name of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The owner_name of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this DataForDescribeEventsOutput.


        :param owner_name: The owner_name of this DataForDescribeEventsOutput.  # noqa: E501
        :type: str
        """

        self._owner_name = owner_name

    @property
    def resource_name(self):
        """Gets the resource_name of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The resource_name of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this DataForDescribeEventsOutput.


        :param resource_name: The resource_name of this DataForDescribeEventsOutput.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def resource_type(self):
        """Gets the resource_type of this DataForDescribeEventsOutput.  # noqa: E501


        :return: The resource_type of this DataForDescribeEventsOutput.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this DataForDescribeEventsOutput.


        :param resource_type: The resource_type of this DataForDescribeEventsOutput.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataForDescribeEventsOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataForDescribeEventsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataForDescribeEventsOutput):
            return True

        return self.to_dict() != other.to_dict()
