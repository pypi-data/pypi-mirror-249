# coding: utf-8

"""
    rds_mysql_v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DescribeEventsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_time': 'str',
        'event_action': 'str',
        'event_result': 'str',
        'event_source': 'str',
        'event_type': 'str',
        'finish_end_time': 'str',
        'finish_start_time': 'str',
        'instance_id': 'str',
        'limit': 'int',
        'offset': 'int',
        'project_name': 'str',
        'start_time': 'str'
    }

    attribute_map = {
        'end_time': 'EndTime',
        'event_action': 'EventAction',
        'event_result': 'EventResult',
        'event_source': 'EventSource',
        'event_type': 'EventType',
        'finish_end_time': 'FinishEndTime',
        'finish_start_time': 'FinishStartTime',
        'instance_id': 'InstanceId',
        'limit': 'Limit',
        'offset': 'Offset',
        'project_name': 'ProjectName',
        'start_time': 'StartTime'
    }

    def __init__(self, end_time=None, event_action=None, event_result=None, event_source=None, event_type=None, finish_end_time=None, finish_start_time=None, instance_id=None, limit=None, offset=None, project_name=None, start_time=None, _configuration=None):  # noqa: E501
        """DescribeEventsRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._end_time = None
        self._event_action = None
        self._event_result = None
        self._event_source = None
        self._event_type = None
        self._finish_end_time = None
        self._finish_start_time = None
        self._instance_id = None
        self._limit = None
        self._offset = None
        self._project_name = None
        self._start_time = None
        self.discriminator = None

        if end_time is not None:
            self.end_time = end_time
        if event_action is not None:
            self.event_action = event_action
        if event_result is not None:
            self.event_result = event_result
        if event_source is not None:
            self.event_source = event_source
        if event_type is not None:
            self.event_type = event_type
        if finish_end_time is not None:
            self.finish_end_time = finish_end_time
        if finish_start_time is not None:
            self.finish_start_time = finish_start_time
        if instance_id is not None:
            self.instance_id = instance_id
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if project_name is not None:
            self.project_name = project_name
        if start_time is not None:
            self.start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this DescribeEventsRequest.  # noqa: E501


        :return: The end_time of this DescribeEventsRequest.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this DescribeEventsRequest.


        :param end_time: The end_time of this DescribeEventsRequest.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def event_action(self):
        """Gets the event_action of this DescribeEventsRequest.  # noqa: E501


        :return: The event_action of this DescribeEventsRequest.  # noqa: E501
        :rtype: str
        """
        return self._event_action

    @event_action.setter
    def event_action(self, event_action):
        """Sets the event_action of this DescribeEventsRequest.


        :param event_action: The event_action of this DescribeEventsRequest.  # noqa: E501
        :type: str
        """

        self._event_action = event_action

    @property
    def event_result(self):
        """Gets the event_result of this DescribeEventsRequest.  # noqa: E501


        :return: The event_result of this DescribeEventsRequest.  # noqa: E501
        :rtype: str
        """
        return self._event_result

    @event_result.setter
    def event_result(self, event_result):
        """Sets the event_result of this DescribeEventsRequest.


        :param event_result: The event_result of this DescribeEventsRequest.  # noqa: E501
        :type: str
        """

        self._event_result = event_result

    @property
    def event_source(self):
        """Gets the event_source of this DescribeEventsRequest.  # noqa: E501


        :return: The event_source of this DescribeEventsRequest.  # noqa: E501
        :rtype: str
        """
        return self._event_source

    @event_source.setter
    def event_source(self, event_source):
        """Sets the event_source of this DescribeEventsRequest.


        :param event_source: The event_source of this DescribeEventsRequest.  # noqa: E501
        :type: str
        """

        self._event_source = event_source

    @property
    def event_type(self):
        """Gets the event_type of this DescribeEventsRequest.  # noqa: E501


        :return: The event_type of this DescribeEventsRequest.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this DescribeEventsRequest.


        :param event_type: The event_type of this DescribeEventsRequest.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def finish_end_time(self):
        """Gets the finish_end_time of this DescribeEventsRequest.  # noqa: E501


        :return: The finish_end_time of this DescribeEventsRequest.  # noqa: E501
        :rtype: str
        """
        return self._finish_end_time

    @finish_end_time.setter
    def finish_end_time(self, finish_end_time):
        """Sets the finish_end_time of this DescribeEventsRequest.


        :param finish_end_time: The finish_end_time of this DescribeEventsRequest.  # noqa: E501
        :type: str
        """

        self._finish_end_time = finish_end_time

    @property
    def finish_start_time(self):
        """Gets the finish_start_time of this DescribeEventsRequest.  # noqa: E501


        :return: The finish_start_time of this DescribeEventsRequest.  # noqa: E501
        :rtype: str
        """
        return self._finish_start_time

    @finish_start_time.setter
    def finish_start_time(self, finish_start_time):
        """Sets the finish_start_time of this DescribeEventsRequest.


        :param finish_start_time: The finish_start_time of this DescribeEventsRequest.  # noqa: E501
        :type: str
        """

        self._finish_start_time = finish_start_time

    @property
    def instance_id(self):
        """Gets the instance_id of this DescribeEventsRequest.  # noqa: E501


        :return: The instance_id of this DescribeEventsRequest.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this DescribeEventsRequest.


        :param instance_id: The instance_id of this DescribeEventsRequest.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def limit(self):
        """Gets the limit of this DescribeEventsRequest.  # noqa: E501


        :return: The limit of this DescribeEventsRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this DescribeEventsRequest.


        :param limit: The limit of this DescribeEventsRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this DescribeEventsRequest.  # noqa: E501


        :return: The offset of this DescribeEventsRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this DescribeEventsRequest.


        :param offset: The offset of this DescribeEventsRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def project_name(self):
        """Gets the project_name of this DescribeEventsRequest.  # noqa: E501


        :return: The project_name of this DescribeEventsRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this DescribeEventsRequest.


        :param project_name: The project_name of this DescribeEventsRequest.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def start_time(self):
        """Gets the start_time of this DescribeEventsRequest.  # noqa: E501


        :return: The start_time of this DescribeEventsRequest.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this DescribeEventsRequest.


        :param start_time: The start_time of this DescribeEventsRequest.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DescribeEventsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DescribeEventsRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DescribeEventsRequest):
            return True

        return self.to_dict() != other.to_dict()
