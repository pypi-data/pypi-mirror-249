# coding: utf-8

"""
    rds_mysql_v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class PreSchedulePlanForModifyDBInstanceSpecOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_support_migration': 'bool',
        'choose_migration_condition': 'str',
        'choose_migration_finally': 'bool',
        'instance_support_migration': 'bool',
        'rebuild_master_count': 'int',
        'rebuild_read_only_count': 'int',
        'rebuild_slave_count': 'int',
        'resource_support_migration': 'bool',
        'switch_type': 'str',
        'try_choose_migration_by_switch_type_and_condition': 'bool',
        'try_choose_migration_error': 'str'
    }

    attribute_map = {
        'account_support_migration': 'AccountSupportMigration',
        'choose_migration_condition': 'ChooseMigrationCondition',
        'choose_migration_finally': 'ChooseMigrationFinally',
        'instance_support_migration': 'InstanceSupportMigration',
        'rebuild_master_count': 'RebuildMasterCount',
        'rebuild_read_only_count': 'RebuildReadOnlyCount',
        'rebuild_slave_count': 'RebuildSlaveCount',
        'resource_support_migration': 'ResourceSupportMigration',
        'switch_type': 'SwitchType',
        'try_choose_migration_by_switch_type_and_condition': 'TryChooseMigrationBySwitchTypeAndCondition',
        'try_choose_migration_error': 'TryChooseMigrationError'
    }

    def __init__(self, account_support_migration=None, choose_migration_condition=None, choose_migration_finally=None, instance_support_migration=None, rebuild_master_count=None, rebuild_read_only_count=None, rebuild_slave_count=None, resource_support_migration=None, switch_type=None, try_choose_migration_by_switch_type_and_condition=None, try_choose_migration_error=None, _configuration=None):  # noqa: E501
        """PreSchedulePlanForModifyDBInstanceSpecOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_support_migration = None
        self._choose_migration_condition = None
        self._choose_migration_finally = None
        self._instance_support_migration = None
        self._rebuild_master_count = None
        self._rebuild_read_only_count = None
        self._rebuild_slave_count = None
        self._resource_support_migration = None
        self._switch_type = None
        self._try_choose_migration_by_switch_type_and_condition = None
        self._try_choose_migration_error = None
        self.discriminator = None

        if account_support_migration is not None:
            self.account_support_migration = account_support_migration
        if choose_migration_condition is not None:
            self.choose_migration_condition = choose_migration_condition
        if choose_migration_finally is not None:
            self.choose_migration_finally = choose_migration_finally
        if instance_support_migration is not None:
            self.instance_support_migration = instance_support_migration
        if rebuild_master_count is not None:
            self.rebuild_master_count = rebuild_master_count
        if rebuild_read_only_count is not None:
            self.rebuild_read_only_count = rebuild_read_only_count
        if rebuild_slave_count is not None:
            self.rebuild_slave_count = rebuild_slave_count
        if resource_support_migration is not None:
            self.resource_support_migration = resource_support_migration
        if switch_type is not None:
            self.switch_type = switch_type
        if try_choose_migration_by_switch_type_and_condition is not None:
            self.try_choose_migration_by_switch_type_and_condition = try_choose_migration_by_switch_type_and_condition
        if try_choose_migration_error is not None:
            self.try_choose_migration_error = try_choose_migration_error

    @property
    def account_support_migration(self):
        """Gets the account_support_migration of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501


        :return: The account_support_migration of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :rtype: bool
        """
        return self._account_support_migration

    @account_support_migration.setter
    def account_support_migration(self, account_support_migration):
        """Sets the account_support_migration of this PreSchedulePlanForModifyDBInstanceSpecOutput.


        :param account_support_migration: The account_support_migration of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :type: bool
        """

        self._account_support_migration = account_support_migration

    @property
    def choose_migration_condition(self):
        """Gets the choose_migration_condition of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501


        :return: The choose_migration_condition of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :rtype: str
        """
        return self._choose_migration_condition

    @choose_migration_condition.setter
    def choose_migration_condition(self, choose_migration_condition):
        """Sets the choose_migration_condition of this PreSchedulePlanForModifyDBInstanceSpecOutput.


        :param choose_migration_condition: The choose_migration_condition of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :type: str
        """

        self._choose_migration_condition = choose_migration_condition

    @property
    def choose_migration_finally(self):
        """Gets the choose_migration_finally of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501


        :return: The choose_migration_finally of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :rtype: bool
        """
        return self._choose_migration_finally

    @choose_migration_finally.setter
    def choose_migration_finally(self, choose_migration_finally):
        """Sets the choose_migration_finally of this PreSchedulePlanForModifyDBInstanceSpecOutput.


        :param choose_migration_finally: The choose_migration_finally of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :type: bool
        """

        self._choose_migration_finally = choose_migration_finally

    @property
    def instance_support_migration(self):
        """Gets the instance_support_migration of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501


        :return: The instance_support_migration of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :rtype: bool
        """
        return self._instance_support_migration

    @instance_support_migration.setter
    def instance_support_migration(self, instance_support_migration):
        """Sets the instance_support_migration of this PreSchedulePlanForModifyDBInstanceSpecOutput.


        :param instance_support_migration: The instance_support_migration of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :type: bool
        """

        self._instance_support_migration = instance_support_migration

    @property
    def rebuild_master_count(self):
        """Gets the rebuild_master_count of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501


        :return: The rebuild_master_count of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :rtype: int
        """
        return self._rebuild_master_count

    @rebuild_master_count.setter
    def rebuild_master_count(self, rebuild_master_count):
        """Sets the rebuild_master_count of this PreSchedulePlanForModifyDBInstanceSpecOutput.


        :param rebuild_master_count: The rebuild_master_count of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :type: int
        """

        self._rebuild_master_count = rebuild_master_count

    @property
    def rebuild_read_only_count(self):
        """Gets the rebuild_read_only_count of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501


        :return: The rebuild_read_only_count of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :rtype: int
        """
        return self._rebuild_read_only_count

    @rebuild_read_only_count.setter
    def rebuild_read_only_count(self, rebuild_read_only_count):
        """Sets the rebuild_read_only_count of this PreSchedulePlanForModifyDBInstanceSpecOutput.


        :param rebuild_read_only_count: The rebuild_read_only_count of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :type: int
        """

        self._rebuild_read_only_count = rebuild_read_only_count

    @property
    def rebuild_slave_count(self):
        """Gets the rebuild_slave_count of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501


        :return: The rebuild_slave_count of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :rtype: int
        """
        return self._rebuild_slave_count

    @rebuild_slave_count.setter
    def rebuild_slave_count(self, rebuild_slave_count):
        """Sets the rebuild_slave_count of this PreSchedulePlanForModifyDBInstanceSpecOutput.


        :param rebuild_slave_count: The rebuild_slave_count of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :type: int
        """

        self._rebuild_slave_count = rebuild_slave_count

    @property
    def resource_support_migration(self):
        """Gets the resource_support_migration of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501


        :return: The resource_support_migration of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :rtype: bool
        """
        return self._resource_support_migration

    @resource_support_migration.setter
    def resource_support_migration(self, resource_support_migration):
        """Sets the resource_support_migration of this PreSchedulePlanForModifyDBInstanceSpecOutput.


        :param resource_support_migration: The resource_support_migration of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :type: bool
        """

        self._resource_support_migration = resource_support_migration

    @property
    def switch_type(self):
        """Gets the switch_type of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501


        :return: The switch_type of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :rtype: str
        """
        return self._switch_type

    @switch_type.setter
    def switch_type(self, switch_type):
        """Sets the switch_type of this PreSchedulePlanForModifyDBInstanceSpecOutput.


        :param switch_type: The switch_type of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :type: str
        """

        self._switch_type = switch_type

    @property
    def try_choose_migration_by_switch_type_and_condition(self):
        """Gets the try_choose_migration_by_switch_type_and_condition of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501


        :return: The try_choose_migration_by_switch_type_and_condition of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :rtype: bool
        """
        return self._try_choose_migration_by_switch_type_and_condition

    @try_choose_migration_by_switch_type_and_condition.setter
    def try_choose_migration_by_switch_type_and_condition(self, try_choose_migration_by_switch_type_and_condition):
        """Sets the try_choose_migration_by_switch_type_and_condition of this PreSchedulePlanForModifyDBInstanceSpecOutput.


        :param try_choose_migration_by_switch_type_and_condition: The try_choose_migration_by_switch_type_and_condition of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :type: bool
        """

        self._try_choose_migration_by_switch_type_and_condition = try_choose_migration_by_switch_type_and_condition

    @property
    def try_choose_migration_error(self):
        """Gets the try_choose_migration_error of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501


        :return: The try_choose_migration_error of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :rtype: str
        """
        return self._try_choose_migration_error

    @try_choose_migration_error.setter
    def try_choose_migration_error(self, try_choose_migration_error):
        """Sets the try_choose_migration_error of this PreSchedulePlanForModifyDBInstanceSpecOutput.


        :param try_choose_migration_error: The try_choose_migration_error of this PreSchedulePlanForModifyDBInstanceSpecOutput.  # noqa: E501
        :type: str
        """

        self._try_choose_migration_error = try_choose_migration_error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PreSchedulePlanForModifyDBInstanceSpecOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PreSchedulePlanForModifyDBInstanceSpecOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PreSchedulePlanForModifyDBInstanceSpecOutput):
            return True

        return self.to_dict() != other.to_dict()
