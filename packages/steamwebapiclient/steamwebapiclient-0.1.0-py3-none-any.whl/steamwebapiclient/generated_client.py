# This file is generated by the generate_client.py script. Any changes
# made to this file will be overwritten when that script is ran again.
from builtins import int

import requests


class BaseClient:
    key: str
    steam_id: str

    def __init__(self, key: str = "", steam_id: str = ""):
        """Initialize a new Client.

        :param key: Your Steam API key. Only required if you need to call
            non-public API endpoints.
        :type key: string
        :param steam_id: A Steam profile ID.
        :type key: string
        """
        self.key = key
        self.steam_id = steam_id

    def csgoplayers_730_getnextmatchsharingcode(
        self, steamid: int, steamidkey: str, knowncode: str
    ) -> dict:
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/ICSGOPlayers_730/GetNextMatchSharingCode/v0001/"
        params = {
            "steamid": steamid,
            "steamidkey": steamidkey,
            "knowncode": knowncode,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def csgoservers_730_getgamemapsplaytime(
        self, interval: str, gamemode: str, mapgroup: str
    ) -> dict:
        url = "https://api.steampowered.com/ICSGOServers_730/GetGameMapsPlaytime/v0001/"
        params = {
            "interval": interval,
            "gamemode": gamemode,
            "mapgroup": mapgroup,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def csgoservers_730_getgameserversstatus(self) -> dict:
        url = (
            "https://api.steampowered.com/ICSGOServers_730/GetGameServersStatus/v0001/"
        )
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def csgotournaments_730_gettournamentfantasylineup(
        self, event: int, steamid: int, steamidkey: str
    ) -> dict:
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/ICSGOTournaments_730/GetTournamentFantasyLineup/v0001/"
        params = {
            "event": event,
            "steamid": steamid,
            "steamidkey": steamidkey,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def csgotournaments_730_gettournamentitems(
        self, event: int, steamid: int, steamidkey: str
    ) -> dict:
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/ICSGOTournaments_730/GetTournamentItems/v0001/"
        params = {
            "event": event,
            "steamid": steamid,
            "steamidkey": steamidkey,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def csgotournaments_730_gettournamentlayout(self, event: int) -> dict:
        url = "https://api.steampowered.com/ICSGOTournaments_730/GetTournamentLayout/v0001/"
        params = {
            "event": event,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def csgotournaments_730_gettournamentpredictions(
        self, event: int, steamid: int, steamidkey: str
    ) -> dict:
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/ICSGOTournaments_730/GetTournamentPredictions/v0001/"
        params = {
            "event": event,
            "steamid": steamid,
            "steamidkey": steamidkey,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def dota2matchstats_570_getrealtimestats(self, server_steam_id: int) -> dict:
        url = (
            "https://api.steampowered.com/IDOTA2MatchStats_570/GetRealtimeStats/v0001/"
        )
        params = {
            "server_steam_id": server_steam_id,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def dota2match_570_getliveleaguegames(
        self, league_id: int = None, match_id: int = None, dpc: bool = None
    ) -> dict:
        url = "https://api.steampowered.com/IDOTA2Match_570/GetLiveLeagueGames/v0001/"
        params = {}
        if league_id:
            params["league_id"] = league_id
        if match_id:
            params["match_id"] = match_id
        if dpc:
            params["dpc"] = dpc

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def dota2match_570_getmatchdetails(
        self, match_id: int, include_persona_names: bool = None
    ) -> dict:
        url = "https://api.steampowered.com/IDOTA2Match_570/GetMatchDetails/v0001/"
        params = {
            "match_id": match_id,
        }
        if include_persona_names:
            params["include_persona_names"] = include_persona_names

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def dota2match_570_getmatchhistory(
        self,
        hero_id: int = None,
        game_mode: int = None,
        skill: int = None,
        min_players: str = None,
        account_id: str = None,
        league_id: str = None,
        start_at_match_id: int = None,
        matches_requested: str = None,
    ) -> dict:
        url = "https://api.steampowered.com/IDOTA2Match_570/GetMatchHistory/v0001/"
        params = {}
        if hero_id:
            params["hero_id"] = hero_id
        if game_mode:
            params["game_mode"] = game_mode
        if skill:
            params["skill"] = skill
        if min_players:
            params["min_players"] = min_players
        if account_id:
            params["account_id"] = account_id
        if league_id:
            params["league_id"] = league_id
        if start_at_match_id:
            params["start_at_match_id"] = start_at_match_id
        if matches_requested:
            params["matches_requested"] = matches_requested

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def dota2match_570_getmatchhistorybysequencenum(
        self, start_at_match_seq_num: int = None, matches_requested: int = None
    ) -> dict:
        url = "https://api.steampowered.com/IDOTA2Match_570/GetMatchHistoryBySequenceNum/v0001/"
        params = {}
        if start_at_match_seq_num:
            params["start_at_match_seq_num"] = start_at_match_seq_num
        if matches_requested:
            params["matches_requested"] = matches_requested

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def dota2match_570_getteaminfobyteamid(
        self, start_at_team_id: int = None, teams_requested: int = None
    ) -> dict:
        url = "https://api.steampowered.com/IDOTA2Match_570/GetTeamInfoByTeamID/v0001/"
        params = {}
        if start_at_team_id:
            params["start_at_team_id"] = start_at_team_id
        if teams_requested:
            params["teams_requested"] = teams_requested

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def dota2match_570_gettopliveeventgame(self, partner: int) -> dict:
        url = "https://api.steampowered.com/IDOTA2Match_570/GetTopLiveEventGame/v0001/"
        params = {
            "partner": partner,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def dota2match_570_gettoplivegame(self, partner: int) -> dict:
        url = "https://api.steampowered.com/IDOTA2Match_570/GetTopLiveGame/v0001/"
        params = {
            "partner": partner,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def dota2match_570_gettopweekendtourneygames(
        self, partner: int, home_division: int = None
    ) -> dict:
        url = "https://api.steampowered.com/IDOTA2Match_570/GetTopWeekendTourneyGames/v0001/"
        params = {
            "partner": partner,
        }
        if home_division:
            params["home_division"] = home_division

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def dota2match_570_gettournamentplayerstats(
        self,
        account_id: str,
        league_id: str = None,
        hero_id: str = None,
        time_frame: str = None,
        match_id: int = None,
    ) -> dict:
        url = "https://api.steampowered.com/IDOTA2Match_570/GetTournamentPlayerStats/v0001/"
        params = {
            "account_id": account_id,
        }
        if league_id:
            params["league_id"] = league_id
        if hero_id:
            params["hero_id"] = hero_id
        if time_frame:
            params["time_frame"] = time_frame
        if match_id:
            params["match_id"] = match_id

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def dota2match_570_gettournamentplayerstats_2(
        self,
        account_id: str,
        league_id: str = None,
        hero_id: str = None,
        time_frame: str = None,
        match_id: int = None,
        phase_id: int = None,
    ) -> dict:
        url = "https://api.steampowered.com/IDOTA2Match_570/GetTournamentPlayerStats/v0002/"
        params = {
            "account_id": account_id,
        }
        if league_id:
            params["league_id"] = league_id
        if hero_id:
            params["hero_id"] = hero_id
        if time_frame:
            params["time_frame"] = time_frame
        if match_id:
            params["match_id"] = match_id
        if phase_id:
            params["phase_id"] = phase_id

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def dota2streamsystem_570_getbroadcasterinfo(
        self, broadcaster_steam_id: int, league_id: int = None
    ) -> dict:
        url = "https://api.steampowered.com/IDOTA2StreamSystem_570/GetBroadcasterInfo/v0001/"
        params = {
            "broadcaster_steam_id": broadcaster_steam_id,
        }
        if league_id:
            params["league_id"] = league_id

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def dota2ticket_570_getsteamidforbadgeid(self, BadgeID: str) -> dict:
        url = (
            "https://api.steampowered.com/IDOTA2Ticket_570/GetSteamIDForBadgeID/v0001/"
        )
        params = {
            "BadgeID": BadgeID,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def dota2ticket_570_steamaccountvalidforbadgetype(
        self,
        steamid: int,
        ValidBadgeType1: int,
        ValidBadgeType2: int,
        ValidBadgeType3: int,
        ValidBadgeType4: int = None,
    ) -> dict:
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/IDOTA2Ticket_570/SteamAccountValidForBadgeType/v0001/"
        params = {
            "steamid": steamid,
            "ValidBadgeType1": ValidBadgeType1,
            "ValidBadgeType2": ValidBadgeType2,
            "ValidBadgeType3": ValidBadgeType3,
        }
        if ValidBadgeType4:
            params["ValidBadgeType4"] = ValidBadgeType4

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econdota2_570_geteventstatsforaccount(
        self, eventid: int, accountid: int, language: str = None
    ) -> dict:
        url = (
            "https://api.steampowered.com/IEconDOTA2_570/GetEventStatsForAccount/v0001/"
        )
        params = {
            "eventid": eventid,
            "accountid": accountid,
        }
        if language:
            params["language"] = language

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econdota2_570_getheroes(
        self, language: str = None, itemizedonly: bool = None
    ) -> dict:
        url = "https://api.steampowered.com/IEconDOTA2_570/GetHeroes/v0001/"
        params = {}
        if language:
            params["language"] = language
        if itemizedonly:
            params["itemizedonly"] = itemizedonly

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econdota2_570_getitemcreators(self, itemdef: int) -> dict:
        url = "https://api.steampowered.com/IEconDOTA2_570/GetItemCreators/v0001/"
        params = {
            "itemdef": itemdef,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econdota2_570_getitemworkshoppublishedfileids(self, itemdef: int) -> dict:
        url = "https://api.steampowered.com/IEconDOTA2_570/GetItemWorkshopPublishedFileIDs/v0001/"
        params = {
            "itemdef": itemdef,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econdota2_570_getrarities(self, language: str = None) -> dict:
        url = "https://api.steampowered.com/IEconDOTA2_570/GetRarities/v0001/"
        params = {}
        if language:
            params["language"] = language

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econdota2_570_gettournamentprizepool(self, leagueid: int = None) -> dict:
        url = (
            "https://api.steampowered.com/IEconDOTA2_570/GetTournamentPrizePool/v0001/"
        )
        params = {}
        if leagueid:
            params["leagueid"] = leagueid

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econitems_1046930_getplayeritems(self, steamid: int) -> dict:
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/IEconItems_1046930/GetPlayerItems/v0001/"
        params = {
            "steamid": steamid,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econitems_1269260_getequippedplayeritems(
        self, steamid: int, class_id: int
    ) -> dict:
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/IEconItems_1269260/GetEquippedPlayerItems/v0001/"
        params = {
            "steamid": steamid,
            "class_id": class_id,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econitems_221540_getplayeritems(self, steamid: int) -> dict:
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/IEconItems_221540/GetPlayerItems/v0001/"
        params = {
            "steamid": steamid,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econitems_238460_getplayeritems(self, steamid: int) -> dict:
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/IEconItems_238460/GetPlayerItems/v0001/"
        params = {
            "steamid": steamid,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econitems_440_getplayeritems(self, steamid: int) -> dict:
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/IEconItems_440/GetPlayerItems/v0001/"
        params = {
            "steamid": steamid,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econitems_440_getschema(self, language: str = None) -> dict:
        url = "https://api.steampowered.com/IEconItems_440/GetSchema/v0001/"
        params = {}
        if language:
            params["language"] = language

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econitems_440_getschemaitems(
        self, language: str = None, start: int = None
    ) -> dict:
        url = "https://api.steampowered.com/IEconItems_440/GetSchemaItems/v0001/"
        params = {}
        if language:
            params["language"] = language
        if start:
            params["start"] = start

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econitems_440_getschemaoverview(self, language: str = None) -> dict:
        url = "https://api.steampowered.com/IEconItems_440/GetSchemaOverview/v0001/"
        params = {}
        if language:
            params["language"] = language

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econitems_440_getschemaurl(self) -> dict:
        url = "https://api.steampowered.com/IEconItems_440/GetSchemaURL/v0001/"
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econitems_440_getstoremetadata(self, language: str = None) -> dict:
        url = "https://api.steampowered.com/IEconItems_440/GetStoreMetaData/v0001/"
        params = {}
        if language:
            params["language"] = language

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econitems_440_getstorestatus(self) -> dict:
        url = "https://api.steampowered.com/IEconItems_440/GetStoreStatus/v0001/"
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econitems_570_getplayeritems(self, steamid: int) -> dict:
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/IEconItems_570/GetPlayerItems/v0001/"
        params = {
            "steamid": steamid,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econitems_570_getstoremetadata(self, language: str = None) -> dict:
        url = "https://api.steampowered.com/IEconItems_570/GetStoreMetaData/v0001/"
        params = {}
        if language:
            params["language"] = language

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econitems_583950_getequippedplayeritems(
        self, steamid: int, class_id: int
    ) -> dict:
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/IEconItems_583950/GetEquippedPlayerItems/v0001/"
        params = {
            "steamid": steamid,
            "class_id": class_id,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econitems_620_getplayeritems(self, steamid: int) -> dict:
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/IEconItems_620/GetPlayerItems/v0001/"
        params = {
            "steamid": steamid,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econitems_620_getschema(self, language: str = None) -> dict:
        url = "https://api.steampowered.com/IEconItems_620/GetSchema/v0001/"
        params = {}
        if language:
            params["language"] = language

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econitems_730_getplayeritems(self, steamid: int) -> dict:
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/IEconItems_730/GetPlayerItems/v0001/"
        params = {
            "steamid": steamid,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econitems_730_getschema_2(self, language: str = None) -> dict:
        url = "https://api.steampowered.com/IEconItems_730/GetSchema/v0002/"
        params = {}
        if language:
            params["language"] = language

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econitems_730_getschemaurl_2(self) -> dict:
        url = "https://api.steampowered.com/IEconItems_730/GetSchemaURL/v0002/"
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econitems_730_getstoremetadata(self, language: str = None) -> dict:
        url = "https://api.steampowered.com/IEconItems_730/GetStoreMetaData/v0001/"
        params = {}
        if language:
            params["language"] = language

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def gcversion_1046930_getclientversion(self) -> dict:
        url = "https://api.steampowered.com/IGCVersion_1046930/GetClientVersion/v0001/"
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def gcversion_1046930_getserverversion(self) -> dict:
        url = "https://api.steampowered.com/IGCVersion_1046930/GetServerVersion/v0001/"
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def gcversion_1269260_getclientversion(self) -> dict:
        url = "https://api.steampowered.com/IGCVersion_1269260/GetClientVersion/v0001/"
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def gcversion_1269260_getserverversion(self) -> dict:
        url = "https://api.steampowered.com/IGCVersion_1269260/GetServerVersion/v0001/"
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def gcversion_440_getclientversion(self) -> dict:
        url = "https://api.steampowered.com/IGCVersion_440/GetClientVersion/v0001/"
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def gcversion_440_getserverversion(self) -> dict:
        url = "https://api.steampowered.com/IGCVersion_440/GetServerVersion/v0001/"
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def gcversion_570_getclientversion(self) -> dict:
        url = "https://api.steampowered.com/IGCVersion_570/GetClientVersion/v0001/"
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def gcversion_570_getserverversion(self) -> dict:
        url = "https://api.steampowered.com/IGCVersion_570/GetServerVersion/v0001/"
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def gcversion_583950_getclientversion(self) -> dict:
        url = "https://api.steampowered.com/IGCVersion_583950/GetClientVersion/v0001/"
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def gcversion_583950_getserverversion(self) -> dict:
        url = "https://api.steampowered.com/IGCVersion_583950/GetServerVersion/v0001/"
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def gcversion_730_getserverversion(self) -> dict:
        url = "https://api.steampowered.com/IGCVersion_730/GetServerVersion/v0001/"
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def portal2leaderboards_620_getbucketizeddata(self, leaderboardName: str) -> dict:
        url = "https://api.steampowered.com/IPortal2Leaderboards_620/GetBucketizedData/v0001/"
        params = {
            "leaderboardName": leaderboardName,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamapps_getapplist(self) -> dict:
        url = "https://api.steampowered.com/ISteamApps/GetAppList/v0001/"
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamapps_getapplist_2(self) -> dict:
        url = "https://api.steampowered.com/ISteamApps/GetAppList/v0002/"
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamapps_getsdrconfig(self, appid: int) -> dict:
        url = "https://api.steampowered.com/ISteamApps/GetSDRConfig/v0001/"
        params = {
            "appid": appid,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamapps_getserversataddress(self, addr: str) -> dict:
        url = "https://api.steampowered.com/ISteamApps/GetServersAtAddress/v0001/"
        params = {
            "addr": addr,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamapps_uptodatecheck(self, appid: int, version: int) -> dict:
        url = "https://api.steampowered.com/ISteamApps/UpToDateCheck/v0001/"
        params = {
            "appid": appid,
            "version": version,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steambroadcast_viewerheartbeat(
        self, steamid: int, sessionid: int, token: int, stream: int = None
    ) -> dict:
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/ISteamBroadcast/ViewerHeartbeat/v0001/"
        params = {
            "steamid": steamid,
            "sessionid": sessionid,
            "token": token,
        }
        if stream:
            params["stream"] = stream

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamdirectory_getcmlist(self, cellid: int, maxcount: int = None) -> dict:
        url = "https://api.steampowered.com/ISteamDirectory/GetCMList/v0001/"
        params = {
            "cellid": cellid,
        }
        if maxcount:
            params["maxcount"] = maxcount

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamdirectory_getcmlistforconnect(
        self,
        cellid: int = None,
        cmtype: str = None,
        realm: str = None,
        maxcount: int = None,
    ) -> dict:
        url = "https://api.steampowered.com/ISteamDirectory/GetCMListForConnect/v0001/"
        params = {}
        if cellid:
            params["cellid"] = cellid
        if cmtype:
            params["cmtype"] = cmtype
        if realm:
            params["realm"] = realm
        if maxcount:
            params["maxcount"] = maxcount

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamdirectory_getsteampipedomains(self) -> dict:
        url = "https://api.steampowered.com/ISteamDirectory/GetSteamPipeDomains/v0001/"
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steameconomy_getassetclassinfo(
        self,
        appid: int,
        class_count: int,
        classid0: int,
        language: str = None,
        instanceid0: int = None,
    ) -> dict:
        url = "https://api.steampowered.com/ISteamEconomy/GetAssetClassInfo/v0001/"
        params = {
            "appid": appid,
            "class_count": class_count,
            "classid0": classid0,
        }
        if language:
            params["language"] = language
        if instanceid0:
            params["instanceid0"] = instanceid0

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steameconomy_getassetprices(
        self, appid: int, currency: str = None, language: str = None
    ) -> dict:
        url = "https://api.steampowered.com/ISteamEconomy/GetAssetPrices/v0001/"
        params = {
            "appid": appid,
        }
        if currency:
            params["currency"] = currency
        if language:
            params["language"] = language

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamnews_getnewsforapp(
        self,
        appid: int,
        maxlength: int = None,
        enddate: int = None,
        count: int = None,
        tags: str = None,
    ) -> dict:
        url = "https://api.steampowered.com/ISteamNews/GetNewsForApp/v0001/"
        params = {
            "appid": appid,
        }
        if maxlength:
            params["maxlength"] = maxlength
        if enddate:
            params["enddate"] = enddate
        if count:
            params["count"] = count
        if tags:
            params["tags"] = tags

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamnews_getnewsforapp_2(
        self,
        appid: int,
        maxlength: int = None,
        enddate: int = None,
        count: int = None,
        feeds: str = None,
        tags: str = None,
    ) -> dict:
        url = "https://api.steampowered.com/ISteamNews/GetNewsForApp/v0002/"
        params = {
            "appid": appid,
        }
        if maxlength:
            params["maxlength"] = maxlength
        if enddate:
            params["enddate"] = enddate
        if count:
            params["count"] = count
        if feeds:
            params["feeds"] = feeds
        if tags:
            params["tags"] = tags

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamremotestorage_getugcfiledetails(
        self, ugcid: int, appid: int, steamid: int = None
    ) -> dict:
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = (
            "https://api.steampowered.com/ISteamRemoteStorage/GetUGCFileDetails/v0001/"
        )
        params = {
            "ugcid": ugcid,
            "appid": appid,
        }
        if steamid:
            params["steamid"] = steamid

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamuser_getfriendlist(
        self, key: str, steamid: int, relationship: str = None
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/ISteamUser/GetFriendList/v0001/"
        params = {
            "key": key,
            "steamid": steamid,
        }
        if relationship:
            params["relationship"] = relationship

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamuser_getplayerbans(self, key: str, steamids: str) -> dict:
        if not key and not self.key:
            raise ValueError("")

        url = "https://api.steampowered.com/ISteamUser/GetPlayerBans/v0001/"
        params = {
            "key": key,
            "steamids": steamids,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamuser_getplayersummaries(self, key: str, steamids: str) -> dict:
        if not key and not self.key:
            raise ValueError("")

        url = "https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0001/"
        params = {
            "key": key,
            "steamids": steamids,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamuser_getplayersummaries_2(self, key: str, steamids: str) -> dict:
        if not key and not self.key:
            raise ValueError("")

        url = "https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/"
        params = {
            "key": key,
            "steamids": steamids,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamuser_getusergrouplist(self, key: str, steamid: int) -> dict:
        if not key and not self.key:
            raise ValueError("")
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/ISteamUser/GetUserGroupList/v0001/"
        params = {
            "key": key,
            "steamid": steamid,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamuser_resolvevanityurl(
        self, key: str, vanityurl: str, url_type: int = None
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")

        url = "https://api.steampowered.com/ISteamUser/ResolveVanityURL/v0001/"
        params = {
            "key": key,
            "vanityurl": vanityurl,
        }
        if url_type:
            params["url_type"] = url_type

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamuserauth_authenticateuserticket(
        self, key: str, appid: int, ticket: str
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")

        url = (
            "https://api.steampowered.com/ISteamUserAuth/AuthenticateUserTicket/v0001/"
        )
        params = {
            "key": key,
            "appid": appid,
            "ticket": ticket,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamuseroauth_gettokendetails(self, access_token: str) -> dict:
        url = "https://api.steampowered.com/ISteamUserOAuth/GetTokenDetails/v0001/"
        params = {
            "access_token": access_token,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamuserstats_getglobalachievementpercentagesforapp(self, gameid: int) -> dict:
        url = "https://api.steampowered.com/ISteamUserStats/GetGlobalAchievementPercentagesForApp/v0001/"
        params = {
            "gameid": gameid,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamuserstats_getglobalachievementpercentagesforapp_2(
        self, gameid: int
    ) -> dict:
        url = "https://api.steampowered.com/ISteamUserStats/GetGlobalAchievementPercentagesForApp/v0002/"
        params = {
            "gameid": gameid,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamuserstats_getnumberofcurrentplayers(self, appid: int) -> dict:
        url = "https://api.steampowered.com/ISteamUserStats/GetNumberOfCurrentPlayers/v0001/"
        params = {
            "appid": appid,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamuserstats_getplayerachievements(
        self, key: str, steamid: int, appid: int, l: str = None
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = (
            "https://api.steampowered.com/ISteamUserStats/GetPlayerAchievements/v0001/"
        )
        params = {
            "key": key,
            "steamid": steamid,
            "appid": appid,
        }
        if l:
            params["l"] = l

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamuserstats_getschemaforgame(
        self, key: str, appid: int, l: str = None
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")

        url = "https://api.steampowered.com/ISteamUserStats/GetSchemaForGame/v0001/"
        params = {
            "key": key,
            "appid": appid,
        }
        if l:
            params["l"] = l

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamuserstats_getschemaforgame_2(
        self, key: str, appid: int, l: str = None
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")

        url = "https://api.steampowered.com/ISteamUserStats/GetSchemaForGame/v0002/"
        params = {
            "key": key,
            "appid": appid,
        }
        if l:
            params["l"] = l

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamuserstats_getuserstatsforgame(
        self, key: str, steamid: int, appid: int
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v0001/"
        params = {
            "key": key,
            "steamid": steamid,
            "appid": appid,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamuserstats_getuserstatsforgame_2(
        self, key: str, steamid: int, appid: int
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v0002/"
        params = {
            "key": key,
            "steamid": steamid,
            "appid": appid,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamwebapiutil_getserverinfo(self) -> dict:
        url = "https://api.steampowered.com/ISteamWebAPIUtil/GetServerInfo/v0001/"
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def steamwebapiutil_getsupportedapilist(self, key: str = None) -> dict:
        if not key and not self.key:
            raise ValueError("")

        url = "https://api.steampowered.com/ISteamWebAPIUtil/GetSupportedAPIList/v0001/"
        params = {}
        if key:
            params["key"] = key

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def tfitems_440_getgoldenwrenches(self) -> dict:
        url = "https://api.steampowered.com/ITFItems_440/GetGoldenWrenches/v0001/"
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def tfitems_440_getgoldenwrenches_2(self) -> dict:
        url = "https://api.steampowered.com/ITFItems_440/GetGoldenWrenches/v0002/"
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def tfpromos_440_getitemid(self, steamid: int, promoid: int) -> dict:
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/ITFPromos_440/GetItemID/v0001/"
        params = {
            "steamid": steamid,
            "promoid": promoid,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def tfpromos_620_getitemid(self, steamid: int, PromoID: int) -> dict:
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/ITFPromos_620/GetItemID/v0001/"
        params = {
            "steamid": steamid,
            "PromoID": PromoID,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def tfsystem_440_getworldstatus(self) -> dict:
        url = "https://api.steampowered.com/ITFSystem_440/GetWorldStatus/v0001/"
        params = {}

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def gameserversservice_getaccountlist(self, key: str) -> dict:
        if not key and not self.key:
            raise ValueError("")

        url = "https://api.steampowered.com/IGameServersService/GetAccountList/v0001/"
        params = {
            "key": key,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def gameserversservice_getaccountpublicinfo(self, key: str, steamid: int) -> dict:
        if not key and not self.key:
            raise ValueError("")
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/IGameServersService/GetAccountPublicInfo/v0001/"
        params = {
            "key": key,
            "steamid": steamid,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def gameserversservice_querylogintoken(self, key: str, login_token: str) -> dict:
        if not key and not self.key:
            raise ValueError("")

        url = "https://api.steampowered.com/IGameServersService/QueryLoginToken/v0001/"
        params = {
            "key": key,
            "login_token": login_token,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def gameserversservice_getserversteamidsbyip(
        self, key: str, server_ips: str
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")

        url = "https://api.steampowered.com/IGameServersService/GetServerSteamIDsByIP/v0001/"
        params = {
            "key": key,
            "server_ips": server_ips,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def gameserversservice_getserveripsbysteamid(
        self, key: str, server_steamids: int
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")

        url = "https://api.steampowered.com/IGameServersService/GetServerIPsBySteamID/v0001/"
        params = {
            "key": key,
            "server_steamids": server_steamids,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def playerservice_isplayingsharedgame(
        self, key: str, steamid: int, appid_playing: int
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/IPlayerService/IsPlayingSharedGame/v0001/"
        params = {
            "key": key,
            "steamid": steamid,
            "appid_playing": appid_playing,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def playerservice_getrecentlyplayedgames(
        self, key: str, steamid: int, count: int
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = (
            "https://api.steampowered.com/IPlayerService/GetRecentlyPlayedGames/v0001/"
        )
        params = {
            "key": key,
            "steamid": steamid,
            "count": count,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def playerservice_getownedgames(
        self,
        key: str,
        steamid: int,
        include_appinfo: bool,
        include_played_free_games: bool,
        appids_filter: int,
        include_free_sub: bool,
        language: str,
        include_extended_appinfo: bool,
        skip_unvetted_apps: bool = None,
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/"
        params = {
            "key": key,
            "steamid": steamid,
            "include_appinfo": include_appinfo,
            "include_played_free_games": include_played_free_games,
            "appids_filter": appids_filter,
            "include_free_sub": include_free_sub,
            "language": language,
            "include_extended_appinfo": include_extended_appinfo,
        }
        if skip_unvetted_apps:
            params["skip_unvetted_apps"] = skip_unvetted_apps

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def playerservice_getsteamlevel(self, key: str, steamid: int) -> dict:
        if not key and not self.key:
            raise ValueError("")
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/IPlayerService/GetSteamLevel/v0001/"
        params = {
            "key": key,
            "steamid": steamid,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def playerservice_getbadges(self, key: str, steamid: int) -> dict:
        if not key and not self.key:
            raise ValueError("")
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/IPlayerService/GetBadges/v0001/"
        params = {
            "key": key,
            "steamid": steamid,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def playerservice_getcommunitybadgeprogress(
        self, key: str, steamid: int, badgeid: int
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")
        if not steamid and not self.steam_id:
            raise ValueError("")

        url = "https://api.steampowered.com/IPlayerService/GetCommunityBadgeProgress/v0001/"
        params = {
            "key": key,
            "steamid": steamid,
            "badgeid": badgeid,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def authenticationservice_getpasswordrsapublickey(self, account_name: str) -> dict:
        url = "https://api.steampowered.com/IAuthenticationService/GetPasswordRSAPublicKey/v0001/"
        params = {
            "account_name": account_name,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def contentserverconfigservice_getsteamcachenodeparams(
        self, key: str, cache_id: int, cache_key: str
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")

        url = "https://api.steampowered.com/IContentServerConfigService/GetSteamCacheNodeParams/v0001/"
        params = {
            "key": key,
            "cache_id": cache_id,
            "cache_key": cache_key,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def contentserverdirectoryservice_getcdnforvideo(
        self, property_type: int, client_ip: str, client_region: str
    ) -> dict:
        url = "https://api.steampowered.com/IContentServerDirectoryService/GetCDNForVideo/v0001/"
        params = {
            "property_type": property_type,
            "client_ip": client_ip,
            "client_region": client_region,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def contentserverdirectoryservice_picksinglecontentserver(
        self, property_type: int, cell_id: int, client_ip: str
    ) -> dict:
        url = "https://api.steampowered.com/IContentServerDirectoryService/PickSingleContentServer/v0001/"
        params = {
            "property_type": property_type,
            "cell_id": cell_id,
            "client_ip": client_ip,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def contentserverdirectoryservice_getclientupdatehosts(
        self, cached_signature: str
    ) -> dict:
        url = "https://api.steampowered.com/IContentServerDirectoryService/GetClientUpdateHosts/v0001/"
        params = {
            "cached_signature": cached_signature,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def contentserverdirectoryservice_getdepotpatchinfo(
        self, appid: int, depotid: int, source_manifestid: int, target_manifestid: int
    ) -> dict:
        url = "https://api.steampowered.com/IContentServerDirectoryService/GetDepotPatchInfo/v0001/"
        params = {
            "appid": appid,
            "depotid": depotid,
            "source_manifestid": source_manifestid,
            "target_manifestid": target_manifestid,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def publishedfileservice_getuservotesummary(self, publishedfileids: int) -> dict:
        url = "https://api.steampowered.com/IPublishedFileService/GetUserVoteSummary/v0001/"
        params = {
            "publishedfileids": publishedfileids,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econservice_gettradehistory(
        self,
        key: str,
        max_trades: int,
        start_after_time: int,
        start_after_tradeid: int,
        navigating_back: bool,
        get_descriptions: bool,
        language: str,
        include_failed: bool,
        include_total: bool,
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")

        url = "https://api.steampowered.com/IEconService/GetTradeHistory/v0001/"
        params = {
            "key": key,
            "max_trades": max_trades,
            "start_after_time": start_after_time,
            "start_after_tradeid": start_after_tradeid,
            "navigating_back": navigating_back,
            "get_descriptions": get_descriptions,
            "language": language,
            "include_failed": include_failed,
            "include_total": include_total,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econservice_gettradestatus(
        self, key: str, tradeid: int, get_descriptions: bool, language: str
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")

        url = "https://api.steampowered.com/IEconService/GetTradeStatus/v0001/"
        params = {
            "key": key,
            "tradeid": tradeid,
            "get_descriptions": get_descriptions,
            "language": language,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econservice_gettradeoffers(
        self,
        key: str,
        get_sent_offers: bool,
        get_received_offers: bool,
        get_descriptions: bool,
        language: str,
        active_only: bool,
        historical_only: bool,
        time_historical_cutoff: int,
        cursor: int = None,
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")

        url = "https://api.steampowered.com/IEconService/GetTradeOffers/v0001/"
        params = {
            "key": key,
            "get_sent_offers": get_sent_offers,
            "get_received_offers": get_received_offers,
            "get_descriptions": get_descriptions,
            "language": language,
            "active_only": active_only,
            "historical_only": historical_only,
            "time_historical_cutoff": time_historical_cutoff,
        }
        if cursor:
            params["cursor"] = cursor

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econservice_gettradeoffer(
        self, key: str, tradeofferid: int, language: str, get_descriptions: bool
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")

        url = "https://api.steampowered.com/IEconService/GetTradeOffer/v0001/"
        params = {
            "key": key,
            "tradeofferid": tradeofferid,
            "language": language,
            "get_descriptions": get_descriptions,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econservice_gettradeofferssummary(self, key: str, time_last_visit: int) -> dict:
        if not key and not self.key:
            raise ValueError("")

        url = "https://api.steampowered.com/IEconService/GetTradeOffersSummary/v0001/"
        params = {
            "key": key,
            "time_last_visit": time_last_visit,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def econservice_gettradeholddurations(
        self, key: str, steamid_target: int, trade_offer_access_token: str
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")

        url = "https://api.steampowered.com/IEconService/GetTradeHoldDurations/v0001/"
        params = {
            "key": key,
            "steamid_target": steamid_target,
            "trade_offer_access_token": trade_offer_access_token,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def inventoryservice_getpricesheet(
        self, key: str, ecurrency: int, currency_code: str
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")

        url = "https://api.steampowered.com/IInventoryService/GetPriceSheet/v0001/"
        params = {
            "key": key,
            "ecurrency": ecurrency,
            "currency_code": currency_code,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()

    def storeservice_getapplist(
        self,
        key: str,
        if_modified_since: int = None,
        have_description_language: str = None,
        include_games: bool = None,
        include_dlc: bool = None,
        include_software: bool = None,
        include_videos: bool = None,
        include_hardware: bool = None,
        last_appid: int = None,
        max_results: int = None,
    ) -> dict:
        if not key and not self.key:
            raise ValueError("")

        url = "https://api.steampowered.com/IStoreService/GetAppList/v0001/"
        params = {
            "key": key,
        }
        if if_modified_since:
            params["if_modified_since"] = if_modified_since
        if have_description_language:
            params["have_description_language"] = have_description_language
        if include_games:
            params["include_games"] = include_games
        if include_dlc:
            params["include_dlc"] = include_dlc
        if include_software:
            params["include_software"] = include_software
        if include_videos:
            params["include_videos"] = include_videos
        if include_hardware:
            params["include_hardware"] = include_hardware
        if last_appid:
            params["last_appid"] = last_appid
        if max_results:
            params["max_results"] = max_results

        response = requests.get(url, params=params)
        response.raise_for_status()

        return response.json()
