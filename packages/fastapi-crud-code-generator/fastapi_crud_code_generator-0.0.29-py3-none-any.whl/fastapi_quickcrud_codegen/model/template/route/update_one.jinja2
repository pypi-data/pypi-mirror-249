@api.put("{{ path }}", status_code=200, response_model={{ model_name }}UpdateOneResponseModel)
{{ 'async ' if is_async else '' }}def entire_update_by_primary_key(
                                response: Response,
                                primary_key: {{ model_name }}PrimaryKeyModel = Depends(),
                                update_data: {{ model_name }}UpdateOneRequestBodyModel = Depends(),
                                extra_query: {{ model_name }}UpdateOneRequestQueryModel = Depends(),
                                session=Depends(db_session)):
    model = {{ model_name }}

    filter_args = primary_key.__dict__
    extra_args = extra_query.__dict__
    update_args = update_data.__dict__
    filter_list: List[BinaryExpression] = find_query_builder(param=filter_args,
                                                                 model=model)
    if extra_args:
        filter_list += find_query_builder(param=extra_query.__dict__,
            model=model)
    stmt = select(model).where(and_(*filter_list))
    sql_executed_result = {{ 'await ' if is_async else '' }}session.execute(stmt)
    data_instance = sql_executed_result.scalar()

    if not data_instance:
        return Response(status_code=HTTPStatus.NOT_FOUND, headers={"x-total-count": str(0)})
    try:
        for update_arg_name, update_arg_value in update_args.items():
            setattr(data_instance, update_arg_name, update_arg_value)

        result = parse_obj_as({{ model_name }}UpdateOneResponseModel, data_instance)
        response.headers["x-total-count"] = str(1)
        {{ 'await ' if is_async else '' }}session.flush()
        return result

    except IntegrityError as e:
        err_msg, = e.orig.args
        if 'unique constraint' not in err_msg.lower():
            raise e
        result = Response(status_code=HTTPStatus.CONFLICT, headers={"x-total-count": str(0)})
        return result
