# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Tell mypy (a type checker) to ignore all errors from this file.
# See https://mypy.readthedocs.io/en/stable/config_file.html?highlight=ignore-errors#confval-ignore_errors
# mypy: ignore-errors

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime

# Used for default argument values
DEFAULT = object()


class RustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_int32),
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def alloc(size):
        return rust_call(_UniFFILib.ffi_lightspark_crypto_7bff_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return rust_call(_UniFFILib.ffi_lightspark_crypto_7bff_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return rust_call(_UniFFILib.ffi_lightspark_crypto_7bff_rustbuffer_free, self)

    def __str__(self):
        return "RustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def allocWithBuilder():
        """Context-manger to allocate a buffer using a RustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = RustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consumeWithStream(self):
        """Context-manager to consume a buffer using a RustBufferStream.

        The RustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = RustBufferStream(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer after consuming")
        finally:
            self.free()


class ForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "ForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class RustBufferStream(object):
    """
    Helper for structured reading of bytes from a RustBuffer
    """

    def __init__(self, rbuf):
        self.rbuf = rbuf
        self.offset = 0

    def remaining(self):
        return self.rbuf.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.rbuf.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.rbuf.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.rbuf.len:
            raise InternalError("read past end of rust buffer")
        data = self.rbuf.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def readI8(self):
        return self._unpack_from(1, ">b")

    def readU8(self):
        return self._unpack_from(1, ">B")

    def readI16(self):
        return self._unpack_from(2, ">h")

    def readU16(self):
        return self._unpack_from(2, ">H")

    def readI32(self):
        return self._unpack_from(4, ">i")

    def readU32(self):
        return self._unpack_from(4, ">I")

    def readI64(self):
        return self._unpack_from(8, ">q")

    def readU64(self):
        return self._unpack_from(8, ">Q")

    def readFloat(self):
        v = self._unpack_from(4, ">f")
        return v

    def readDouble(self):
        return self._unpack_from(8, ">d")


class RustBufferBuilder(object):
    """
    Helper for structured writing of bytes into a RustBuffer.
    """

    def __init__(self):
        self.rbuf = RustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, numBytes):
        if self.rbuf.len + numBytes > self.rbuf.capacity:
            self.rbuf = RustBuffer.reserve(self.rbuf, numBytes)
        yield None
        self.rbuf.len += numBytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def writeI8(self, v):
        self._pack_into(1, ">b", v)

    def writeU8(self, v):
        self._pack_into(1, ">B", v)

    def writeI16(self, v):
        self._pack_into(2, ">h", v)

    def writeU16(self, v):
        self._pack_into(2, ">H", v)

    def writeI32(self, v):
        self._pack_into(4, ">i", v)

    def writeU32(self, v):
        self._pack_into(4, ">I", v)

    def writeI64(self, v):
        self._pack_into(8, ">q", v)

    def writeU64(self, v):
        self._pack_into(8, ">Q", v)

    def writeFloat(self, v):
        self._pack_into(4, ">f", v)

    def writeDouble(self, v):
        self._pack_into(8, ">d", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class RustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", RustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_PANIC = 2

    def __str__(self):
        if self.code == RustCallStatus.CALL_SUCCESS:
            return "RustCallStatus(CALL_SUCCESS)"
        elif self.code == RustCallStatus.CALL_ERROR:
            return "RustCallStatus(CALL_ERROR)"
        elif self.code == RustCallStatus.CALL_PANIC:
            return "RustCallStatus(CALL_PANIC)"
        else:
            return "RustCallStatus(<invalid code>)"

def rust_call(fn, *args):
    # Call a rust function
    return rust_call_with_error(None, fn, *args)

def rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the FfiConverter for the error class that corresponds to the result.
    call_status = RustCallStatus(code=RustCallStatus.CALL_SUCCESS, error_buf=RustBuffer(0, 0, None))

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    if call_status.code == RustCallStatus.CALL_SUCCESS:
        return result
    elif call_status.code == RustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == RustCallStatus.CALL_PANIC:
        # When the rust code sees a panic, it tries to construct a RustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = FfiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid RustCallStatus code: {}".format(
            call_status.code))

# A function pointer for a callback as defined by UniFFI.
# Rust definition `fn(handle: u64, method: u32, args: RustBuffer, buf_ptr: *mut RustBuffer) -> int`
FOREIGN_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_ulonglong, ctypes.c_ulong, RustBuffer, ctypes.POINTER(RustBuffer))
# Types conforming to `FfiConverterPrimitive` pass themselves directly over the FFI.
class FfiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

# Helper class for wrapper types that will always go through a RustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class FfiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consumeWithStream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with RustBuffer.allocWithBuilder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code,
# and the FFI Function declarations in a com.sun.jna.Library.
# This is how we find and load the dynamic library provided by the component.
# For now we just look it up by name.
#
# XXX TODO: This will probably grow some magic for resolving megazording in future.
# E.g. we might start by looking for the named component in `libuniffi.so` and if
# that fails, fall back to loading it separately from `lib${componentName}.so`.

from pathlib import Path

def loadIndirect():
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    lib = libname.format("uniffi_lightspark_crypto")
    path = str(Path(__file__).parent / lib)
    return ctypes.cdll.LoadLibrary(path)

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniFFILib = loadIndirect()
_UniFFILib.ffi_lightspark_crypto_7bff_KeyPair_object_free.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_lightspark_crypto_7bff_KeyPair_object_free.restype = None
_UniFFILib.lightspark_crypto_7bff_KeyPair_get_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_KeyPair_get_public_key.restype = RustBuffer
_UniFFILib.lightspark_crypto_7bff_KeyPair_get_private_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_KeyPair_get_private_key.restype = RustBuffer
_UniFFILib.ffi_lightspark_crypto_7bff_Mnemonic_object_free.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_lightspark_crypto_7bff_Mnemonic_object_free.restype = None
_UniFFILib.lightspark_crypto_7bff_Mnemonic_random.argtypes = (
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_Mnemonic_random.restype = ctypes.c_void_p
_UniFFILib.lightspark_crypto_7bff_Mnemonic_from_entropy.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_Mnemonic_from_entropy.restype = ctypes.c_void_p
_UniFFILib.lightspark_crypto_7bff_Mnemonic_from_phrase.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_Mnemonic_from_phrase.restype = ctypes.c_void_p
_UniFFILib.lightspark_crypto_7bff_Mnemonic_as_string.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_Mnemonic_as_string.restype = RustBuffer
_UniFFILib.ffi_lightspark_crypto_7bff_Seed_object_free.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_lightspark_crypto_7bff_Seed_object_free.restype = None
_UniFFILib.lightspark_crypto_7bff_Seed_new.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_Seed_new.restype = ctypes.c_void_p
_UniFFILib.lightspark_crypto_7bff_Seed_from_mnemonic.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_Seed_from_mnemonic.restype = ctypes.c_void_p
_UniFFILib.lightspark_crypto_7bff_Seed_as_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_Seed_as_bytes.restype = RustBuffer
_UniFFILib.ffi_lightspark_crypto_7bff_InvoiceSignature_object_free.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_lightspark_crypto_7bff_InvoiceSignature_object_free.restype = None
_UniFFILib.lightspark_crypto_7bff_InvoiceSignature_get_recovery_id.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_InvoiceSignature_get_recovery_id.restype = ctypes.c_int32
_UniFFILib.lightspark_crypto_7bff_InvoiceSignature_get_signature.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_InvoiceSignature_get_signature.restype = RustBuffer
_UniFFILib.ffi_lightspark_crypto_7bff_LightsparkSigner_object_free.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_lightspark_crypto_7bff_LightsparkSigner_object_free.restype = None
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_new.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_new.restype = ctypes.c_void_p
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_from_bytes.argtypes = (
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_from_bytes.restype = ctypes.c_void_p
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_get_master_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_get_master_public_key.restype = RustBuffer
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_derive_public_key.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_derive_public_key.restype = RustBuffer
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_derive_public_key_hex.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_derive_public_key_hex.restype = RustBuffer
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_derive_private_key.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_derive_private_key.restype = RustBuffer
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_ecdh.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_ecdh.restype = RustBuffer
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_sign_invoice.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_sign_invoice.restype = ctypes.c_void_p
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_sign_invoice_hash.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_sign_invoice_hash.restype = ctypes.c_void_p
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_derive_key_and_sign.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.c_int8,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_derive_key_and_sign.restype = RustBuffer
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_get_per_commitment_point.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_get_per_commitment_point.restype = RustBuffer
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_release_per_commitment_secret.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_release_per_commitment_secret.restype = RustBuffer
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_generate_preimage_nonce.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_generate_preimage_nonce.restype = RustBuffer
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_generate_preimage.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_generate_preimage.restype = RustBuffer
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_generate_preimage_hash.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_generate_preimage_hash.restype = RustBuffer
_UniFFILib.ffi_lightspark_crypto_7bff_Validation_init_callback.argtypes = (
    FOREIGN_CALLBACK_T,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_lightspark_crypto_7bff_Validation_init_callback.restype = None
_UniFFILib.lightspark_crypto_7bff_sign_ecdsa.argtypes = (
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_sign_ecdsa.restype = RustBuffer
_UniFFILib.lightspark_crypto_7bff_verify_ecdsa.argtypes = (
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_verify_ecdsa.restype = ctypes.c_int8
_UniFFILib.lightspark_crypto_7bff_encrypt_ecies.argtypes = (
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_encrypt_ecies.restype = RustBuffer
_UniFFILib.lightspark_crypto_7bff_decrypt_ecies.argtypes = (
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_decrypt_ecies.restype = RustBuffer
_UniFFILib.lightspark_crypto_7bff_generate_keypair.argtypes = (
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_generate_keypair.restype = ctypes.c_void_p
_UniFFILib.lightspark_crypto_7bff_handle_remote_signing_webhook_event.argtypes = (
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.lightspark_crypto_7bff_handle_remote_signing_webhook_event.restype = RustBuffer
_UniFFILib.ffi_lightspark_crypto_7bff_rustbuffer_alloc.argtypes = (
    ctypes.c_int32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_lightspark_crypto_7bff_rustbuffer_alloc.restype = RustBuffer
_UniFFILib.ffi_lightspark_crypto_7bff_rustbuffer_from_bytes.argtypes = (
    ForeignBytes,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_lightspark_crypto_7bff_rustbuffer_from_bytes.restype = RustBuffer
_UniFFILib.ffi_lightspark_crypto_7bff_rustbuffer_free.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_lightspark_crypto_7bff_rustbuffer_free.restype = None
_UniFFILib.ffi_lightspark_crypto_7bff_rustbuffer_reserve.argtypes = (
    RustBuffer,
    ctypes.c_int32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_lightspark_crypto_7bff_rustbuffer_reserve.restype = RustBuffer

# Public interface members begin here.


class FfiConverterUInt8(FfiConverterPrimitive):
    @staticmethod
    def read(buf):
        return buf.readU8()

    @staticmethod
    def write(value, buf):
        buf.writeU8(value)

class FfiConverterInt32(FfiConverterPrimitive):
    @staticmethod
    def read(buf):
        return buf.readI32()

    @staticmethod
    def write(value, buf):
        buf.writeI32(value)

class FfiConverterUInt64(FfiConverterPrimitive):
    @staticmethod
    def read(buf):
        return buf.readU64()

    @staticmethod
    def write(value, buf):
        buf.writeU64(value)

class FfiConverterBool:
    @classmethod
    def read(cls, buf):
        return cls.lift(buf.readU8())

    @classmethod
    def write(cls, value, buf):
        buf.writeU8(cls.lower(value))

    @staticmethod
    def lift(value):
        return int(value) != 0

    @staticmethod
    def lower(value):
        return 1 if value else 0

class FfiConverterString:
    @staticmethod
    def read(buf):
        size = buf.readI32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8Bytes = buf.read(size)
        return utf8Bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8Bytes = value.encode("utf-8")
        buf.writeI32(len(utf8Bytes))
        buf.write(utf8Bytes)

    @staticmethod
    def lift(buf):
        with buf.consumeWithStream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with RustBuffer.allocWithBuilder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()



class InvoiceSignature(object):

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.ffi_lightspark_crypto_7bff_InvoiceSignature_object_free, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    

    def get_recovery_id(self, ):
        return FfiConverterInt32.lift(
            rust_call(_UniFFILib.lightspark_crypto_7bff_InvoiceSignature_get_recovery_id,self._pointer,)
        )
    def get_signature(self, ):
        return FfiConverterSequenceUInt8.lift(
            rust_call(_UniFFILib.lightspark_crypto_7bff_InvoiceSignature_get_signature,self._pointer,)
        )
    


class FfiConverterTypeInvoiceSignature:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, InvoiceSignature):
            raise TypeError("Expected InvoiceSignature instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return InvoiceSignature._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class KeyPair(object):

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.ffi_lightspark_crypto_7bff_KeyPair_object_free, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    

    def get_public_key(self, ):
        return FfiConverterSequenceUInt8.lift(
            rust_call(_UniFFILib.lightspark_crypto_7bff_KeyPair_get_public_key,self._pointer,)
        )
    def get_private_key(self, ):
        return FfiConverterSequenceUInt8.lift(
            rust_call(_UniFFILib.lightspark_crypto_7bff_KeyPair_get_private_key,self._pointer,)
        )
    


class FfiConverterTypeKeyPair:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, KeyPair):
            raise TypeError("Expected KeyPair instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return KeyPair._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class LightsparkSigner(object):
    def __init__(self, seed,network):
        seed = seed
        
        network = network
        
        self._pointer = rust_call_with_error(FfiConverterTypeLightsparkSignerError,_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_new,
        FfiConverterTypeSeed.lower(seed),
        FfiConverterTypeNetwork.lower(network))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.ffi_lightspark_crypto_7bff_LightsparkSigner_object_free, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_bytes(cls, seed,network):
        seed = list(int(x) for x in seed)
        
        network = network
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call_with_error(FfiConverterTypeLightsparkSignerError,_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_from_bytes,
        FfiConverterSequenceUInt8.lower(seed),
        FfiConverterTypeNetwork.lower(network))
        return cls._make_instance_(pointer)
    

    def get_master_public_key(self, ):
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeLightsparkSignerError,_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_get_master_public_key,self._pointer,)
        )
    def derive_public_key(self, derivation_path):
        derivation_path = derivation_path
        
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeLightsparkSignerError,_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_derive_public_key,self._pointer,
        FfiConverterString.lower(derivation_path))
        )
    def derive_public_key_hex(self, derivation_path):
        derivation_path = derivation_path
        
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeLightsparkSignerError,_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_derive_public_key_hex,self._pointer,
        FfiConverterString.lower(derivation_path))
        )
    def derive_private_key(self, derivation_path):
        derivation_path = derivation_path
        
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeLightsparkSignerError,_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_derive_private_key,self._pointer,
        FfiConverterString.lower(derivation_path))
        )
    def ecdh(self, public_key):
        public_key = list(int(x) for x in public_key)
        
        return FfiConverterSequenceUInt8.lift(
            rust_call_with_error(
    FfiConverterTypeLightsparkSignerError,_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_ecdh,self._pointer,
        FfiConverterSequenceUInt8.lower(public_key))
        )
    def sign_invoice(self, unsigned_invoice):
        unsigned_invoice = unsigned_invoice
        
        return FfiConverterTypeInvoiceSignature.lift(
            rust_call_with_error(
    FfiConverterTypeLightsparkSignerError,_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_sign_invoice,self._pointer,
        FfiConverterString.lower(unsigned_invoice))
        )
    def sign_invoice_hash(self, unsigned_invoice):
        unsigned_invoice = list(int(x) for x in unsigned_invoice)
        
        return FfiConverterTypeInvoiceSignature.lift(
            rust_call_with_error(
    FfiConverterTypeLightsparkSignerError,_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_sign_invoice_hash,self._pointer,
        FfiConverterSequenceUInt8.lower(unsigned_invoice))
        )
    def derive_key_and_sign(self, message,derivation_path,is_raw,add_tweak,mul_tweak):
        message = list(int(x) for x in message)
        
        derivation_path = derivation_path
        
        is_raw = bool(is_raw)
        
        add_tweak = (None if add_tweak is None else list(int(x) for x in add_tweak))
        
        mul_tweak = (None if mul_tweak is None else list(int(x) for x in mul_tweak))
        
        return FfiConverterSequenceUInt8.lift(
            rust_call_with_error(
    FfiConverterTypeLightsparkSignerError,_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_derive_key_and_sign,self._pointer,
        FfiConverterSequenceUInt8.lower(message),
        FfiConverterString.lower(derivation_path),
        FfiConverterBool.lower(is_raw),
        FfiConverterOptionalSequenceUInt8.lower(add_tweak),
        FfiConverterOptionalSequenceUInt8.lower(mul_tweak))
        )
    def get_per_commitment_point(self, derivation_path,per_commitment_point_idx):
        derivation_path = derivation_path
        
        per_commitment_point_idx = int(per_commitment_point_idx)
        
        return FfiConverterSequenceUInt8.lift(
            rust_call_with_error(
    FfiConverterTypeLightsparkSignerError,_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_get_per_commitment_point,self._pointer,
        FfiConverterString.lower(derivation_path),
        FfiConverterUInt64.lower(per_commitment_point_idx))
        )
    def release_per_commitment_secret(self, derivation_path,per_commitment_point_idx):
        derivation_path = derivation_path
        
        per_commitment_point_idx = int(per_commitment_point_idx)
        
        return FfiConverterSequenceUInt8.lift(
            rust_call_with_error(
    FfiConverterTypeLightsparkSignerError,_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_release_per_commitment_secret,self._pointer,
        FfiConverterString.lower(derivation_path),
        FfiConverterUInt64.lower(per_commitment_point_idx))
        )
    def generate_preimage_nonce(self, ):
        return FfiConverterSequenceUInt8.lift(
            rust_call(_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_generate_preimage_nonce,self._pointer,)
        )
    def generate_preimage(self, nonce):
        nonce = list(int(x) for x in nonce)
        
        return FfiConverterSequenceUInt8.lift(
            rust_call_with_error(
    FfiConverterTypeLightsparkSignerError,_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_generate_preimage,self._pointer,
        FfiConverterSequenceUInt8.lower(nonce))
        )
    def generate_preimage_hash(self, nonce):
        nonce = list(int(x) for x in nonce)
        
        return FfiConverterSequenceUInt8.lift(
            rust_call_with_error(
    FfiConverterTypeLightsparkSignerError,_UniFFILib.lightspark_crypto_7bff_LightsparkSigner_generate_preimage_hash,self._pointer,
        FfiConverterSequenceUInt8.lower(nonce))
        )
    


class FfiConverterTypeLightsparkSigner:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, LightsparkSigner):
            raise TypeError("Expected LightsparkSigner instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return LightsparkSigner._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class Mnemonic(object):

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.ffi_lightspark_crypto_7bff_Mnemonic_object_free, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def random(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call_with_error(FfiConverterTypeLightsparkSignerError,_UniFFILib.lightspark_crypto_7bff_Mnemonic_random,)
        return cls._make_instance_(pointer)
    @classmethod
    def from_entropy(cls, entropy):
        entropy = list(int(x) for x in entropy)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call_with_error(FfiConverterTypeLightsparkSignerError,_UniFFILib.lightspark_crypto_7bff_Mnemonic_from_entropy,
        FfiConverterSequenceUInt8.lower(entropy))
        return cls._make_instance_(pointer)
    @classmethod
    def from_phrase(cls, phrase):
        phrase = phrase
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call_with_error(FfiConverterTypeLightsparkSignerError,_UniFFILib.lightspark_crypto_7bff_Mnemonic_from_phrase,
        FfiConverterString.lower(phrase))
        return cls._make_instance_(pointer)
    

    def as_string(self, ):
        return FfiConverterString.lift(
            rust_call(_UniFFILib.lightspark_crypto_7bff_Mnemonic_as_string,self._pointer,)
        )
    


class FfiConverterTypeMnemonic:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Mnemonic):
            raise TypeError("Expected Mnemonic instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Mnemonic._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class Seed(object):
    def __init__(self, seed):
        seed = list(int(x) for x in seed)
        
        self._pointer = rust_call(_UniFFILib.lightspark_crypto_7bff_Seed_new,
        FfiConverterSequenceUInt8.lower(seed))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.ffi_lightspark_crypto_7bff_Seed_object_free, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_mnemonic(cls, mnemonic):
        mnemonic = mnemonic
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call(_UniFFILib.lightspark_crypto_7bff_Seed_from_mnemonic,
        FfiConverterTypeMnemonic.lower(mnemonic))
        return cls._make_instance_(pointer)
    

    def as_bytes(self, ):
        return FfiConverterSequenceUInt8.lift(
            rust_call(_UniFFILib.lightspark_crypto_7bff_Seed_as_bytes,self._pointer,)
        )
    


class FfiConverterTypeSeed:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Seed):
            raise TypeError("Expected Seed instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Seed._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer


class RemoteSigningResponse:

    def __init__(self, query, variables):
        self.query = query
        self.variables = variables

    def __str__(self):
        return "RemoteSigningResponse(query={}, variables={})".format(self.query, self.variables)

    def __eq__(self, other):
        if self.query != other.query:
            return False
        if self.variables != other.variables:
            return False
        return True

class FfiConverterTypeRemoteSigningResponse(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return RemoteSigningResponse(
            query=FfiConverterString.read(buf),
            variables=FfiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterString.write(value.query, buf)
        FfiConverterString.write(value.variables, buf)




class Network(enum.Enum):
    BITCOIN = 1
    TESTNET = 2
    REGTEST = 3
    


class FfiConverterTypeNetwork(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return Network.BITCOIN
        if variant == 2:
            return Network.TESTNET
        if variant == 3:
            return Network.REGTEST
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == Network.BITCOIN:
            buf.writeI32(1)
        if value == Network.TESTNET:
            buf.writeI32(2)
        if value == Network.REGTEST:
            buf.writeI32(3)



# CryptoError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separated, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class UniFFIExceptionTmpNamespace:
    class CryptoError(Exception):
        pass
    
    class Secp256k1Error(CryptoError):
        def __str__(self):
            return "CryptoError.Secp256k1Error({})".format(repr(super().__str__()))

    CryptoError.Secp256k1Error = Secp256k1Error
    class RustSecp256k1Error(CryptoError):
        def __str__(self):
            return "CryptoError.RustSecp256k1Error({})".format(repr(super().__str__()))

    CryptoError.RustSecp256k1Error = RustSecp256k1Error
CryptoError = UniFFIExceptionTmpNamespace.CryptoError
del UniFFIExceptionTmpNamespace


class FfiConverterTypeCryptoError(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return CryptoError.Secp256k1Error(
                FfiConverterString.read(buf),
            )
        if variant == 2:
            return CryptoError.RustSecp256k1Error(
                FfiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def write(value, buf):
        if isinstance(value, CryptoError.Secp256k1Error):
            buf.writeI32(1)
        if isinstance(value, CryptoError.RustSecp256k1Error):
            buf.writeI32(2)



# LightsparkSignerError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separated, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class UniFFIExceptionTmpNamespace:
    class LightsparkSignerError(Exception):
        pass
    
    class Bip39Error(LightsparkSignerError):
        def __str__(self):
            return "LightsparkSignerError.Bip39Error({})".format(repr(super().__str__()))

    LightsparkSignerError.Bip39Error = Bip39Error
    class Secp256k1Error(LightsparkSignerError):
        def __str__(self):
            return "LightsparkSignerError.Secp256k1Error({})".format(repr(super().__str__()))

    LightsparkSignerError.Secp256k1Error = Secp256k1Error
    class KeyDerivationError(LightsparkSignerError):
        def __str__(self):
            return "LightsparkSignerError.KeyDerivationError({})".format(repr(super().__str__()))

    LightsparkSignerError.KeyDerivationError = KeyDerivationError
    class KeyTweakError(LightsparkSignerError):
        def __str__(self):
            return "LightsparkSignerError.KeyTweakError({})".format(repr(super().__str__()))

    LightsparkSignerError.KeyTweakError = KeyTweakError
    class EntropyLengthError(LightsparkSignerError):
        def __str__(self):
            return "LightsparkSignerError.EntropyLengthError({})".format(repr(super().__str__()))

    LightsparkSignerError.EntropyLengthError = EntropyLengthError
LightsparkSignerError = UniFFIExceptionTmpNamespace.LightsparkSignerError
del UniFFIExceptionTmpNamespace


class FfiConverterTypeLightsparkSignerError(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return LightsparkSignerError.Bip39Error(
                FfiConverterString.read(buf),
            )
        if variant == 2:
            return LightsparkSignerError.Secp256k1Error(
                FfiConverterString.read(buf),
            )
        if variant == 3:
            return LightsparkSignerError.KeyDerivationError(
                FfiConverterString.read(buf),
            )
        if variant == 4:
            return LightsparkSignerError.KeyTweakError(
                FfiConverterString.read(buf),
            )
        if variant == 5:
            return LightsparkSignerError.EntropyLengthError(
                FfiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def write(value, buf):
        if isinstance(value, LightsparkSignerError.Bip39Error):
            buf.writeI32(1)
        if isinstance(value, LightsparkSignerError.Secp256k1Error):
            buf.writeI32(2)
        if isinstance(value, LightsparkSignerError.KeyDerivationError):
            buf.writeI32(3)
        if isinstance(value, LightsparkSignerError.KeyTweakError):
            buf.writeI32(4)
        if isinstance(value, LightsparkSignerError.EntropyLengthError):
            buf.writeI32(5)



# RemoteSigningError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separated, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class UniFFIExceptionTmpNamespace:
    class RemoteSigningError(Exception):
        pass
    
    class WebhookParsingError(RemoteSigningError):
        def __str__(self):
            return "RemoteSigningError.WebhookParsingError({})".format(repr(super().__str__()))

    RemoteSigningError.WebhookParsingError = WebhookParsingError
    class WebhookSignatureError(RemoteSigningError):
        def __str__(self):
            return "RemoteSigningError.WebhookSignatureError({})".format(repr(super().__str__()))

    RemoteSigningError.WebhookSignatureError = WebhookSignatureError
    class SignerCreationError(RemoteSigningError):
        def __str__(self):
            return "RemoteSigningError.SignerCreationError({})".format(repr(super().__str__()))

    RemoteSigningError.SignerCreationError = SignerCreationError
    class RemoteSigningHandlerError(RemoteSigningError):
        def __str__(self):
            return "RemoteSigningError.RemoteSigningHandlerError({})".format(repr(super().__str__()))

    RemoteSigningError.RemoteSigningHandlerError = RemoteSigningHandlerError
RemoteSigningError = UniFFIExceptionTmpNamespace.RemoteSigningError
del UniFFIExceptionTmpNamespace


class FfiConverterTypeRemoteSigningError(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return RemoteSigningError.WebhookParsingError(
                FfiConverterString.read(buf),
            )
        if variant == 2:
            return RemoteSigningError.WebhookSignatureError(
                FfiConverterString.read(buf),
            )
        if variant == 3:
            return RemoteSigningError.SignerCreationError(
                FfiConverterString.read(buf),
            )
        if variant == 4:
            return RemoteSigningError.RemoteSigningHandlerError(
                FfiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def write(value, buf):
        if isinstance(value, RemoteSigningError.WebhookParsingError):
            buf.writeI32(1)
        if isinstance(value, RemoteSigningError.WebhookSignatureError):
            buf.writeI32(2)
        if isinstance(value, RemoteSigningError.SignerCreationError):
            buf.writeI32(3)
        if isinstance(value, RemoteSigningError.RemoteSigningHandlerError):
            buf.writeI32(4)



import threading

class ConcurrentHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._left_map = {}  # type: Dict[Handle, Any]
        self._right_map = {}  # type: Dict[Any, Handle]

        self._lock = threading.Lock()
        self._current_handle = 0
        self._stride = 1


    def insert(self, obj):
        with self._lock:
            if obj in self._right_map:
                return self._right_map[obj]
            else:
                handle = self._current_handle
                self._current_handle += self._stride
                self._left_map[handle] = obj
                self._right_map[obj] = handle
                return handle

    def get(self, handle):
        with self._lock:
            return self._left_map.get(handle)

    def remove(self, handle):
        with self._lock:
            if handle in self._left_map:
                obj = self._left_map.pop(handle)
                del self._right_map[obj]
                return obj

# Magic number for the Rust proxy to call using the same mechanism as every other method,
# to free the callback once it's dropped by Rust.
IDX_CALLBACK_FREE = 0

class FfiConverterCallbackInterface:
    _handle_map = ConcurrentHandleMap()

    def __init__(self, cb):
        self._foreign_callback = cb

    def drop(self, handle):
        self.__class__._handle_map.remove(handle)

    @classmethod
    def lift(cls, handle):
        obj = cls._handle_map.get(handle)
        if not obj:
            raise InternalError("The object in the handle map has been dropped already")

        return obj

    @classmethod
    def read(cls, buf):
        handle = buf.readU64()
        cls.lift(handle)

    @classmethod
    def lower(cls, cb):
        handle = cls._handle_map.insert(cb)
        return handle

    @classmethod
    def write(cls, cb, buf):
        buf.writeU64(cls.lower(cb))

# Declaration and FfiConverters for Validation Callback Interface

class Validation:
    def should_sign(webhook):
        raise NotImplementedError

    

def py_foreignCallbackCallbackInterfaceValidation(handle, method, args, buf_ptr):
    
    def invoke_should_sign(python_callback, args):
        with args.consumeWithStream() as buf:
            rval = python_callback.should_sign(
                FfiConverterString.read(buf)
                )
        with RustBuffer.allocWithBuilder() as builder:
            FfiConverterBool.write(rval, builder)
            return builder.finalize()

    cb = FfiConverterCallbackInterfaceValidation.lift(handle)
    if not cb:
        raise InternalError("No callback in handlemap; this is a Uniffi bug")

    if method == IDX_CALLBACK_FREE:
        FfiConverterCallbackInterfaceValidation.drop(handle)
        # No return value.
        # See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
        return 0

    if method == 1:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs` for details
        try:
            # Successful return
            buf_ptr[0] = invoke_should_sign(cb, args)
            return 1
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return -1
    

    # This should never happen, because an out of bounds method index won't
    # ever be used. Once we can catch errors, we should return an InternalException.
    # https://github.com/mozilla/uniffi-rs/issues/351

    # An unexpected error happened.
    # See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
    return -1

# We need to keep this function reference alive:
# if they get GC'd while in use then UniFFI internals could attempt to call a function
# that is in freed memory.
# That would be...uh...bad. Yeah, that's the word. Bad.
foreignCallbackCallbackInterfaceValidation = FOREIGN_CALLBACK_T(py_foreignCallbackCallbackInterfaceValidation)

# The FfiConverter which transforms the Callbacks in to Handles to pass to Rust.
rust_call(lambda err: _UniFFILib.ffi_lightspark_crypto_7bff_Validation_init_callback(foreignCallbackCallbackInterfaceValidation, err))
FfiConverterCallbackInterfaceValidation = FfiConverterCallbackInterface(foreignCallbackCallbackInterfaceValidation)



class FfiConverterOptionalTypeRemoteSigningResponse(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterTypeRemoteSigningResponse.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterTypeRemoteSigningResponse.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalSequenceUInt8(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterSequenceUInt8.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterSequenceUInt8.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterSequenceUInt8(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterUInt8.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterUInt8.read(buf) for i in range(count)
        ]

def sign_ecdsa(msg,private_key_bytes):
    msg = list(int(x) for x in msg)
    
    private_key_bytes = list(int(x) for x in private_key_bytes)
    
    return FfiConverterSequenceUInt8.lift(rust_call_with_error(FfiConverterTypeCryptoError,_UniFFILib.lightspark_crypto_7bff_sign_ecdsa,
        FfiConverterSequenceUInt8.lower(msg),
        FfiConverterSequenceUInt8.lower(private_key_bytes)))



def verify_ecdsa(msg,signature_bytes,public_key_bytes):
    msg = list(int(x) for x in msg)
    
    signature_bytes = list(int(x) for x in signature_bytes)
    
    public_key_bytes = list(int(x) for x in public_key_bytes)
    
    return FfiConverterBool.lift(rust_call_with_error(FfiConverterTypeCryptoError,_UniFFILib.lightspark_crypto_7bff_verify_ecdsa,
        FfiConverterSequenceUInt8.lower(msg),
        FfiConverterSequenceUInt8.lower(signature_bytes),
        FfiConverterSequenceUInt8.lower(public_key_bytes)))



def encrypt_ecies(msg,public_key_bytes):
    msg = list(int(x) for x in msg)
    
    public_key_bytes = list(int(x) for x in public_key_bytes)
    
    return FfiConverterSequenceUInt8.lift(rust_call_with_error(FfiConverterTypeCryptoError,_UniFFILib.lightspark_crypto_7bff_encrypt_ecies,
        FfiConverterSequenceUInt8.lower(msg),
        FfiConverterSequenceUInt8.lower(public_key_bytes)))



def decrypt_ecies(cipher_text,private_key_bytes):
    cipher_text = list(int(x) for x in cipher_text)
    
    private_key_bytes = list(int(x) for x in private_key_bytes)
    
    return FfiConverterSequenceUInt8.lift(rust_call_with_error(FfiConverterTypeCryptoError,_UniFFILib.lightspark_crypto_7bff_decrypt_ecies,
        FfiConverterSequenceUInt8.lower(cipher_text),
        FfiConverterSequenceUInt8.lower(private_key_bytes)))



def generate_keypair():
    return FfiConverterTypeKeyPair.lift(rust_call_with_error(FfiConverterTypeCryptoError,_UniFFILib.lightspark_crypto_7bff_generate_keypair,))



def handle_remote_signing_webhook_event(webhook_data,webhook_signature,webhook_secret,master_seed_bytes,validation):
    webhook_data = list(int(x) for x in webhook_data)
    
    webhook_signature = webhook_signature
    
    webhook_secret = webhook_secret
    
    master_seed_bytes = list(int(x) for x in master_seed_bytes)
    
    validation = validation
    
    return FfiConverterOptionalTypeRemoteSigningResponse.lift(rust_call_with_error(FfiConverterTypeRemoteSigningError,_UniFFILib.lightspark_crypto_7bff_handle_remote_signing_webhook_event,
        FfiConverterSequenceUInt8.lower(webhook_data),
        FfiConverterString.lower(webhook_signature),
        FfiConverterString.lower(webhook_secret),
        FfiConverterSequenceUInt8.lower(master_seed_bytes),
        FfiConverterCallbackInterfaceValidation.lower(validation)))



__all__ = [
    "InternalError",
    "Network",
    "RemoteSigningResponse",
    "sign_ecdsa",
    "verify_ecdsa",
    "encrypt_ecies",
    "decrypt_ecies",
    "generate_keypair",
    "handle_remote_signing_webhook_event",
    "KeyPair",
    "Mnemonic",
    "Seed",
    "InvoiceSignature",
    "LightsparkSigner",
    "CryptoError",
    "LightsparkSignerError",
    "RemoteSigningError",
    "Validation",
]

