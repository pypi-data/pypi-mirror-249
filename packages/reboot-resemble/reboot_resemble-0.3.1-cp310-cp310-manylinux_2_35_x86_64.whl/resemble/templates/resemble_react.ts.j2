import type {
  Message as __bufbuildProtobufMessage,
  MessageType as __bufbuildProtobufMessageType,
  PartialMessage as __bufbuildProtobufPartialMessage,
} from "@bufbuild/protobuf";
{% if google_protobuf_used_messages is defined and google_protobuf_used_messages|length > 0%}
import {
  {{ google_protobuf_used_messages|join(', \n	') }}
} from "@bufbuild/protobuf";
{% endif %}
import * as resemble_react from "@reboot-dev/resemble-react";
import * as resemble_api from "@reboot-dev/resemble-api";
import {
  Dispatch,
  MutableRefObject,
  SetStateAction,
  useEffect,
  useMemo,
  useRef,
  useState,
} from "react";
import { unstable_batchedUpdates } from "react-dom";
import { v4 as uuidv4 } from "uuid";
import {
  {{ pb2_messages|map("replace", pb2_name + ".",
  "")|unique|list|join(', \n	') }},
} from "./{{ pb2_name.split(".")[-1][:-1] }}";

// Additionally re-export all messages from the pb module.
export {
  {{ pb2_messages|map("replace", pb2_name + ".",
  "")|unique|list|join(', \n	') }},
};

// Start of service specific code.
///////////////////////////////////////////////////////////////////////////

{% macro name(type_full_name) -%}{{type_full_name.split(".")[-1]}}{%- endmacro %}

{% for service in services %}
export interface {{service.name}}Api {
  {% for method in service.methods %}
  {% if not method.server_streaming %}
  {{ method.name }}: (partialRequest?: __bufbuildProtobufPartialMessage<{{ name(method.input_type) }}>) =>
  Promise<{{ name(method.output_type) }}>;
  {% endif %}
  {% if method.server_streaming %}
  {{ method.name }}: (partialRequest?: __bufbuildProtobufPartialMessage<{{ name(method.input_type) }}>) =>
  AsyncGenerator<{{ name(method.output_type) }}, void, unknown>;
  {% endif %}
  {% endfor %}
  {%- for method in service.methods -%}
  {% if method.options.kind == 'reader' %}
  {% if not method.server_streaming and not method.client_streaming and not
     method.options.state_streaming %}
  use{{method.name}}: (partialRequest?: __bufbuildProtobufPartialMessage<{{ name(method.input_type) }}>) => {
   response: {{ name(method.output_type) }} | undefined;
    isLoading: boolean;
    error: unknown;
    mutations: {
      {% for method in service.methods %}
      {% if method.options.kind == 'writer' or method.options.kind == 'transaction' %}
       {{method.name}}: (request: __bufbuildProtobufPartialMessage<{{ name(method.input_type) }}>,
       optimistic_metadata?: any ) =>
      Promise<resemble_react.ResponseOrError<{{ name(method.output_type) }}>>;
      {% endif %}
      {% endfor %}
    };
    {% for method in service.methods %}
      {% if method.options.kind == 'writer' or method.options.kind == 'transaction' %}
      pending{{method.name}}Mutations: {
        request: {{ name(method.input_type) }};
        idempotencyKey: string;
        isLoading: boolean;
        error?: unknown;
        optimistic_metadata?: any;
      }[];
      failed{{method.name}}Mutations: {
        request: {{ name(method.input_type) }};
        idempotencyKey: string;
        isLoading: boolean;
        error?: unknown;
      }[];
      recovered{{method.name}}Mutations: {
        request: {{ name(method.input_type) }};
        idempotencyKey: string;
        run: () => void;
      }[];
      {% endif %}
      {% endfor %}
  };
  {% endif %}
  {% endif %}
  {% endfor %}
}
{% endfor %}

{% for service in services %}
export interface {{ service.name | to_camel }}Mutators {
  {% for method in service.methods %}
  {% if method.options.kind in ['writer', 'transaction'] %}
  {{ method.name | to_lower_camel }}: {
    // Mutators are functions and can be called directly.
    (partialRequest?: __bufbuildProtobufPartialMessage<{{ name(method.input_type) }}>,
     optimistic_metadata?: any
    ): Promise<
      resemble_react.ResponseOrErrors<
        {{ name(method.output_type) }},
        resemble_api.SystemErrorDetails
        {% if method.options.errors|length > 0 %}
        | {{ service.name | to_camel }}{{ method.name | to_camel }}ErrorDetails
        {% endif %}
      >>;

    pending: resemble_react.Mutation<{{ name(method.input_type) }}>[];
  };
  {% endif %}
  {% endfor %}
}

{% for method in service.methods %}
{% if method.options.errors|length > 0 %}
export class {{ service.name | to_camel }}{{ method.name | to_camel }}Error {
  static DETAIL_TYPES = [
    {%- for error in method.options.errors.values() -%}
    {{ error.py_type | replace(pb2_name + ".", "") }},
    {%- endfor -%}
  ] as const; // Need `as const` to ensure TypeScript infers this as a tuple!

  static fromStatus(status: resemble_api.Status) {
    return resemble_api.Aborted.fromStatus(status, this.DETAIL_TYPES);
  }
}

export type {{ service.name | to_camel }}{{ method.name | to_camel }}ErrorDetails =
  resemble_api.InstanceTypeForDetailTypes<
    typeof {{ service.name | to_camel }}{{ method.name | to_camel }}Error.DETAIL_TYPES
  >[number];

{% endif %}
{% endfor %}

export interface Use{{ service.name }}Api {
  mutators: {{ service.name }}Mutators;
  {% for method in service.methods %}
  {% if method.options.kind == "reader" %}
  {% if not method.server_streaming and not method.client_streaming %}
  use{{ method.name | to_camel }}: (
    partialRequest?: __bufbuildProtobufPartialMessage<{{ name(method.input_type) }}>
  ) => {
    response: {{ name(method.output_type) }} | undefined;
    isLoading: boolean;
    error: undefined | resemble_api.SystemErrorDetails
    {% if method.options.errors|length > 0 -%}
    | {{ service.name | to_camel }}{{ method.name | to_camel }}ErrorDetails
    {% endif %};
  };
  {{ method.name | to_lower_camel }}: (
    partialRequest?: __bufbuildProtobufPartialMessage<{{ name(method.input_type) }}>
  ) => Promise<
    resemble_react.ResponseOrErrors<
    {{ name(method.output_type) }},
    resemble_api.SystemErrorDetails
    {% if method.options.errors|length > 0 -%}
    | {{ service.name | to_camel }}{{ method.name | to_camel }}ErrorDetails
    {% endif %}
    >
  >;
  {% endif %}
  {% endif %}
  {% endfor %}
}
{% endfor %}

{% for service in services %}
export interface SettingsParams {
  id: string;
  storeMutationsLocallyInNamespace?: string;
}

// *********** NOTE NOTE NOTE NOTE NOTE ***********
//
// Old style `Actor` generated code is deprecated in favor of
// `useActor` (see that code below) and will be removed in an
// upcoming release!
//
// ************************************************

export const {{ service.name }} = (
  { id, storeMutationsLocallyInNamespace }: SettingsParams
): {{ service.name }}Api => {
  const headers = new Headers();
  headers.set("Content-Type", "application/json");
  headers.append("x-resemble-service-name", "{{ package_name }}.{{ service.name }}");
  headers.append("x-resemble-actor-id", id);
  headers.append("Connection", "keep-alive");

  const resembleContext = resemble_react.useResembleContext();

  const newRequest = (
    requestBody: any,
    path: string,
    method: "GET" | "POST",
    idempotencyKey?: string,
  ) => {
    if (idempotencyKey !== undefined) {
      headers.set("x-resemble-idempotency-key", idempotencyKey);
    }
    return new Request(`${resembleContext.client?.endpoint}${path}`, {
      method: method,
      headers: headers,
      body:
        Object.keys(requestBody).length !== 0
          ? JSON.stringify(requestBody)
          : null,
    });
  };

  {% for method in service.methods %}
  {% if method.options.kind == 'reader' %}
  {% if not method.server_streaming %}
  const {{ method.name }} = async (
    partialRequest: __bufbuildProtobufPartialMessage<{{ name(method.input_type) }}> = {}
  ) => {
    const request = partialRequest instanceof {{ name(method.input_type) }}
      ? partialRequest
      : new {{ name(method.input_type) }}(partialRequest);

    const requestBody = request.toJson();

    // Invariant here is that we use the '/package.service.method' path and
    // HTTP 'POST' method (we need 'POST' because we send an HTTP body).
    //
    // See also 'resemble/helpers.py'.
    const response = await resemble_react.guardedFetch(
      newRequest(
        requestBody,
        "/{{ package_name }}.{{ service.name }}.{{ method.name }}", "POST"
      )
    );

    if (!response.ok && response.headers.has("grpc-status")) {
      const grpcStatus = response.headers.get("grpc-status");
      let grpcMessage = response.headers.get("grpc-message");
      throw new Error(
        `'{{ package_name }}.{{ service.name }}.{{ method.name }}' for '${id}' responded ` +
          `with status ${grpcStatus}` +
          `${grpcMessage !== null ? ": " + grpcMessage : ""}`
      );
    } else if (!response.ok) {
      throw new Error(
        `'{{ package_name }}.{{ service.name }}.{{ method.name }}' failed: ${response.body}`
      );
    }

    return await response.json();
  };

  const use{{ method.name }} = (
    partialRequest: __bufbuildProtobufPartialMessage<{{ name(method.input_type) }}> = {}
  ) => {
    const [response, setResponse] = useState<{{ name(method.output_type) }}>();
    const [isLoading, setIsLoading] = useState<boolean>(true);
    const [error, setError] = useState<unknown>();

    // NOTE: using "refs" here because we want to "remember" some
    // state, but don't want setting that state to trigger new renders (see
    // https://react.dev/learn/referencing-values-with-refs).
    // Using a ref here so that we don't render every time we set it.

    const observedIdempotencyKeys = useRef(new Set<string>());
    // NOTE: rather than starting with undefined for 'flushMutations'
    // we start with an event so any mutations that may get created
    // before we've started reading will get queued.
    const flushMutations = useRef<resemble_react.Event | undefined>(new resemble_react.Event());

    const [abortController, setAbortController] = useState<AbortController | undefined>();

    useEffect(() => {
      if (abortController === undefined) {
        setAbortController(new AbortController());
      }
      return () => {
        abortController?.abort();
      };
    }, [abortController]);

    const request = partialRequest instanceof {{ name(method.input_type) }}
      ? partialRequest
      : new {{ name(method.input_type) }}(partialRequest);

    // NOTE: using a ref for the 'request' and 'settings' (below) so
    // that it doesn't get changed after the first time calling 'use{{ method.name }}'.
    const requestRef = useRef(request);

    // We are using serialized string comparison here since we can't do value
    // equality of anonymous objects. We must use the proto library's toBinary()
    // since JavaScript's standard JSON library can't serialize every possible
    // field type (notably BigInt).
    //
    // TODO(benh): this comment doesn't make sense because `request` should
    // not be an anonymous object, maybe this was added before we did
    // `partialRequest` and we now need to revisit this and use the equality
    // mechanisms provided by `protoc-gen-es`?
    const first_request_serialized = requestRef.current.toBinary().toString();
    const current_request_serialized = request.toBinary().toString();
    if (current_request_serialized !== first_request_serialized) {
      throw new Error("Changing the request is not supported!");
    }

    const settingsRef = useRef({id, storeMutationsLocallyInNamespace});
    // We are using string comparison here since we can't do value
    // equality of anonymous objects.
    //
    // TODO(benh): create a `compareSettings()` or similar so we don't
    // have to `JSON.stringify()` every time!
    if (JSON.stringify(settingsRef.current) !== JSON.stringify({id, storeMutationsLocallyInNamespace})) {
      throw new Error("Changing settings is not supported!");
    }

    const localStorageKeyRef = useRef(storeMutationsLocallyInNamespace);

    const queuedMutations = useRef<Array<() => void>>([]);

    {# If all methods are readers, we never need hasRunningMutations. #}
    {%- if not service.reader_only -%}
    function hasRunningMutations(): boolean {
      if (
      {% for method in service.methods if method.options.kind == 'writer' or
      method.options.kind == 'transaction' %}
      running{{ method.name }}Mutations.current.length > 0
      {%- if not loop.last -%}
        ||
      {% endif %}
      {% endfor -%}
      ) {
        return true;
      }
      return false;
    }
    {% endif %}

    {% for method in service.methods -%}
    {%- if method.options.kind == 'writer' or method.options.kind == 'transaction' %}

    const running{{ method.name }}Mutations = useRef<resemble_react.Mutation<{{ name(method.input_type) }}>[]>([]);
    const recovered{{ method.name }}Mutations = useRef<
      [resemble_react.Mutation<{{ name(method.input_type) }}>, () => void][]
    >([]);
    const shouldClearFailed{{ method.name }}Mutations = useRef(false);
    const [failed{{ method.name }}Mutations, setFailed{{ method.name }}Mutations] = useState<
      resemble_react.Mutation<{{ name(method.input_type) }}>[]
    >([]);
    const queued{{ method.name }}Mutations = useRef<[resemble_react.Mutation<{{ name(method.input_type) }}>, () => void][]>(
      []
    );
    const recoverAndPurge{{ method.name }}Mutations = (): [
      resemble_react.Mutation<{{ name(method.input_type) }}>,
      () => void
    ][] => {
      if (localStorageKeyRef.current === undefined) {
        return [];
      }
      const suffix = {{ method.name }}
      const value = localStorage.getItem(localStorageKeyRef.current + suffix);
      if (value === null) {
        return [];
      }

      localStorage.removeItem(localStorageKeyRef.current);
      const mutations: resemble_react.Mutation<{{ name(method.input_type) }}>[] = JSON.parse(value);
      const recovered{{ method.name }}Mutations: [
        resemble_react.Mutation<{{ name(method.input_type) }}>,
        () => void
      ][] = [];
      for (const mutation of mutations) {
        recovered{{ method.name }}Mutations.push([mutation, () => __{{ method.name }}(mutation)]);
      }
      return recovered{{ method.name }}Mutations;
    }
    const doOnce{{ method.name }} = useRef(true)
    if (doOnce{{ method.name }}.current) {
      doOnce{{ method.name }}.current = false
      recovered{{ method.name }}Mutations.current = recoverAndPurge{{ method.name }}Mutations()
    }

    // User facing state that only includes the pending mutations that
    // have not been observed.
    const [unobservedPending{{ method.name }}Mutations, setUnobservedPending{{ method.name }}Mutations] =
      useState<resemble_react.Mutation<{{ name(method.input_type) }}>[]>([]);

    useEffect(() => {
      shouldClearFailed{{ method.name }}Mutations.current = true;
    }, [failed{{ method.name }}Mutations]);

    async function __{{ method.name }}(
      mutation: resemble_react.Mutation<{{ name(method.input_type) }}>
    ): Promise<resemble_react.ResponseOrError<{{ name(method.output_type) }}>> {
      try {
        // Invariant that we won't yield to event loop before pushing to
        // running{{method.name}}Mutations
        running{{method.name}}Mutations.current.push(mutation)
        return _Mutation<{{ name(method.input_type) }}, {{ name(method.output_type) }}>(
          // Invariant here is that we use the '/package.service.method'.
          //
          // See also 'resemble/helpers.py'.
          "/{{ package_name }}.{{ service.name }}.{{ method.name }}",
          mutation,
          mutation.request,
          mutation.idempotencyKey,
          setUnobservedPending{{ method.name }}Mutations,
          abortController,
          shouldClearFailed{{ method.name }}Mutations,
          setFailed{{ method.name }}Mutations,
          running{{ method.name }}Mutations,
          flushMutations,
          queuedMutations,
          {{ name(method.input_type) }},
          {{ name(method.output_type) }}.fromJson
        );
      } finally {
        running{{method.name}}Mutations.current = running{{method.name}}Mutations.current.filter(
          ({ idempotencyKey }) => mutation.idempotencyKey !== idempotencyKey
        );

        resemble_react.popMutationMaybeFromLocalStorage(
          localStorageKeyRef.current,
          "{{ method.name }}",
          (mutationRequest: resemble_react.Mutation<Request>) =>
            mutationRequest.idempotencyKey !== mutation.idempotencyKey
        );


      }
    }
    async function _{{ method.name }}(mutation: resemble_react.Mutation<{{ name(method.input_type) }}>) {
      setUnobservedPending{{ method.name }}Mutations(
        (mutations) => [...mutations, mutation]
      )

      // NOTE: we only run one mutation at a time so that we provide a
      // serializable experience for the end user but we will
      // eventually support mutations in parallel when we have strong
      // eventually consistent writers.
      if (
        hasRunningMutations() ||
        queuedMutations.current.length > 0 ||
        flushMutations.current !== undefined
      ) {
        const deferred = new resemble_react.Deferred<resemble_react.ResponseOrError<{{ name(method.output_type) }}>>(() =>
          __{{ method.name }}(mutation)
        );

        // Add to localStorage here.
        queued{{ method.name }}Mutations.current.push([mutation, () => deferred.start()]);
        queuedMutations.current.push(() => {
          for (const [, run] of queued{{ method.name }}Mutations.current) {
            queued{{ method.name }}Mutations.current.shift();
            run();
            break;
          }
        });
        // Maybe add to localStorage.
        resemble_react.pushMutationMaybeToLocalStorage(localStorageKeyRef.current, "{{ method.name }}", mutation);

        return deferred.promise;
      } else {
        // NOTE: we'll add this mutation to `running{{ method.name }}Mutations` in `__{{ method.name }}`
        // without yielding to event loop so that we are guaranteed atomicity with checking `hasRunningMutations()`.
        return await __{{ method.name }}(mutation);
      }
    }

    async function {{ method.name }}(
      partialRequest: __bufbuildProtobufPartialMessage<{{ name(method.input_type)}}>,
      optimistic_metadata?: any
    ): Promise<resemble_react.ResponseOrError<{{ name(method.output_type) }}>> {
      const idempotencyKey = uuidv4();

      const request = partialRequest instanceof {{ name(method.input_type) }}
        ? partialRequest
        : new {{ name(method.input_type) }}(partialRequest);

      const mutation = {
        request,
        idempotencyKey,
        optimistic_metadata,
        isLoading: false, // Won't start loading if we're flushing mutations.
      };

      return _{{ method.name }}(mutation);
    }
    {% endif %}
    {% endfor %}

    useEffect(() => {
      if (abortController === undefined ) {
        return;
      }
      const loop = async () => {
        await resemble_react.retryForever(async () => {
          try {
            {%- if not service.reader_only -%}
            // Wait for any mutations to complete before starting to
            // read so that we read the latest state including those
            // mutations.
            if (
              {%- for method in service.methods if method.options.kind == 'writer' or method.options.kind == 'transaction' -%}
              running{{ method.name }}Mutations.current.length > 0
              {%- if not loop.last -%}
              {{" "}}||{{" "}}
              {%- endif -%}
              {%- endfor -%}
            ) {
              // TODO(benh): check invariant
              // 'flushMutations.current !== undefined' but don't
              // throw an error since that will just retry, instead
              // add support for "bailing" from a 'retry' by calling a
              // function passed into the lambda that 'retry' takes.
              await flushMutations.current?.wait();
            }
            {% endif %}


            const responses = ReactQuery(
              new resemble_api.react_pb.QueryRequest({
                method: "{{ method.name }}",
                request: requestRef.current.toBinary(),
              }),
              abortController?.signal
            );

            for await (const response of responses) {
              setIsLoading(false);

              for (const idempotencyKey of response.idempotencyKeys) {
                observedIdempotencyKeys.current.add(idempotencyKey);
              }

              // Only keep around the idempotency keys that are
              // still pending as the rest are not useful for us.
              observedIdempotencyKeys.current = resemble_react.filterSet(
                observedIdempotencyKeys.current,
                (observedIdempotencyKey) =>
                  [
                  {% for method in service.methods %}
                  {% if method.options.kind == 'writer' or method.options.kind == 'transaction' %}
                  ...running{{ method.name }}Mutations.current,
                  {% endif %}
                  {% endfor %}
                  ].some(
                    (mutation) =>
                      observedIdempotencyKey === mutation.idempotencyKey
                  )
              );

              if (flushMutations.current !== undefined) {
                // TODO(benh): check invariant
                // 'pendingMutations.current.length === 0' but don't
                // throw an error since that will just retry, instead
                // add support for "bailing" from a 'retry' by calling a
                // function passed into the lambda that 'retry' takes.

                flushMutations.current = undefined;

                // Dequeue the next mutation and run it.
                for (const run of queuedMutations.current) {
                  queuedMutations.current.shift();
                  run();
                  break;
                }
              }

              {% for method in service.methods %}
              {% if method.options.kind == 'writer' or method.options.kind == 'transaction' %}
              setUnobservedPending{{ method.name }}Mutations(
              (mutations) =>
                mutations
                  .filter(
                    (mutation) =>
                      // Only keep mutations that are queued, pending or
                      // recovered.
                      queued{{ method.name }}Mutations.current.some(
                        ([queued{{ method.name }}Mutation]) =>
                          mutation.idempotencyKey ===
                          queued{{ method.name }}Mutation.idempotencyKey
                      ) ||
                      running{{ method.name }}Mutations.current.some(
                        (running{{ method.name }}Mutations) =>
                          mutation.idempotencyKey ===
                          running{{ method.name }}Mutations.idempotencyKey
                      )
                  )
                  .filter(
                    (mutation) =>
                      // Only keep mutations whose effects haven't been observed.
                      !observedIdempotencyKeys.current.has(
                        mutation.idempotencyKey
                      )
                  )
              )

              {% endif %}
              {% endfor %}

              if (response.response !== undefined) {
                setResponse({{ name(method.output_type)}}.fromBinary(response.response));
              }
            }
          } catch (e: unknown) {
            if (abortController?.signal.aborted) {
              return;
            }

            setError(e);
            setIsLoading(true);

            // Run a mutation in the event that we are trying to read
            // from an unconstructed actor and the mutation will perform
            // the construction.
            //
            // TODO(benh): only do this if the reason we failed to
            // read was because the actor does not exist.
            for (const run of queuedMutations.current) {
              queuedMutations.current.shift();
              run();
              break;
            }

            // TODO(benh): check invariant
            // 'flushMutations.current === undefined' but don't
            // throw an error since that will just retry, instead
            // add support for "bailing" from a 'retry' by calling a
            // function passed into the lambda that 'retry' takes.
            flushMutations.current = new resemble_react.Event();

            throw e;
          }
        });
      };

      loop();
    }, [abortController]);

    return {
      response,
      isLoading,
      error,
      mutations: {
      {% for method in service.methods %}
      {% if method.options.kind == 'writer' or method.options.kind == 'transaction' %}
        {{ method.name }},
      {% endif %}
      {% endfor %}
      },
      {% for method in service.methods %}
      {% if method.options.kind == 'writer' or method.options.kind == 'transaction' %}
      pending{{ method.name }}Mutations: unobservedPending{{ method.name }}Mutations,
      failed{{ method.name }}Mutations,
      recovered{{ method.name }}Mutations: recovered{{ method.name }}Mutations.current.map(
        ([mutation, run]) => ({ ...mutation, run: run })
      ),
      {% endif %}
      {% endfor %}
    };
  };

  {% endif %}
  {% if method.server_streaming %}
  async function* {{ method.name}}(
    partialRequest: __bufbuildProtobufPartialMessage<{{ name(method.input_type) }}> = {}
  ): AsyncGenerator<{{ name(method.output_type) }}, void, unknown> {
    const request = partialRequest instanceof {{ name(method.input_type) }}
      ? partialRequest
      : new {{ name(method.input_type) }}(partialRequest);

    const requestBody = request.toJson();

    // Invariant here is that we use the '/package.service.method' path and
    // HTTP 'POST' method (we need 'POST' because we send an HTTP body).
    //
    // See also 'resemble/helpers.py'.
    const response = await resemble_react.guardedFetch(
      newRequest(
        requestBody,
        "/{{ package_name }}.{{ service.name }}.{{ method.name }}", "POST"
      )
    );

    if (response.body === null) {
      throw new Error("Unable to read body of response.");
    }

    const reader = response.body
      .pipeThrough(new TextDecoderStream())
      .getReader();

    if (reader === undefined) {
      throw new Error("Not able to instantiate reader on response body.");
    }

    let accumulated = "";

    while (true) {
      const { value, done } = await reader.read();

      if (!response.ok && response.headers.has("grpc-status")) {
        const grpcStatus = response.headers.get("grpc-status");
        let grpcMessage = response.headers.get("grpc-message");
        throw new Error(
          `'{{ package_name }}.{{ service.name }}.{{ method.name }}' for '${id}' responded ` +
            `with status ${grpcStatus}` +
            `${grpcMessage !== null ? ": " + grpcMessage : ""}`
        );
      } else if (!response.ok) {
        throw new Error(
          `'{{ package_name }}.{{ service.name }}.{{ method.name }}' failed: ${value}`
        );
      } else if (done) {
        break;
      } else {
        accumulated += value.trim();

        if (accumulated.startsWith(",")) {
          accumulated = accumulated.substring(1);
        }

        if (!accumulated.startsWith("[")) {
          accumulated = "[" + accumulated;
        }

        if (!accumulated.endsWith("]")) {
          accumulated = accumulated + "]";
        }

        try {
          const json = JSON.parse(accumulated);
          accumulated = "";
          yield {{ name(method.output_type) }}.fromJson(json.at(-1));
        } catch (e) {
          if (e instanceof SyntaxError) {
            accumulated = accumulated.substring(0, accumulated.length - 1);
            continue;
          } else {
            throw e;
          }
        }
      }
    }
  }
  {% endif %}
  {# End of: if method is reader #}
  {% endif %}
  {% if method.options.kind == 'writer' or method.options.kind == 'transaction' %}
  const {{ method.name }} = async (
    partialRequest: __bufbuildProtobufPartialMessage<{{ name(method.input_type) }}> = {}
  ) => {
    const request = partialRequest instanceof {{ name(method.input_type) }}
      ? partialRequest
      : new {{ name(method.input_type) }}(partialRequest);

    const requestBody = request.toJson();

    // Invariant here is that we use the '/package.service.method' path and
    // HTTP 'POST' method (we need 'POST' because we send an HTTP body).
    //
    // See also 'resemble/helpers.py'.
    const response = await resemble_react.guardedFetch(
      newRequest(
        requestBody,
        "/{{ package_name }}.{{ service.name }}.{{ method.name }}", "POST"
      )
    );

    return await response.json();
  };
  {% endif %}

  {# End of: for every method in service.method. #}
  {% endfor %}

  {# If all methods are readers, no need for a _Mutation #}
  {%- if not service.reader_only -%}

  async function _Mutation<
    Request extends
    {% for method in service.methods if method.options.kind == 'writer' or method.options.kind == 'transaction' -%}
    {{ name(method.input_type) }}
    {%- if not loop.last %}
    |
    {%- endif -%}
    {%- if loop.last -%}
    ,
    {% endif %}
    {% endfor %}
    Response extends
    {%- for method in service.methods if method.options.kind == 'writer' or method.options.kind == 'transaction' %}
    {{ name(method.output_type) }}
    {%- if not loop.last %}
    |
    {%- endif %}
    {% endfor %}
  >(
    path: string,
    mutation: resemble_react.Mutation<Request>,
    request: Request,
    idempotencyKey: string,
    setUnobservedPendingMutations: Dispatch<
      SetStateAction<resemble_react.Mutation<Request>[]>
    >,
    abortController: AbortController | undefined,
    shouldClearFailedMutations: MutableRefObject<boolean>,
    setFailedMutations: Dispatch<SetStateAction<resemble_react.Mutation<Request>[]>>,
    runningMutations: MutableRefObject<resemble_react.Mutation<Request>[]>,
    flushMutations: MutableRefObject<resemble_react.Event | undefined>,
    queuedMutations: MutableRefObject<Array<() => void>>,
    requestType: { new (request: Request): Request },
    responseTypeFromJson: (json: any) => Response
  ): Promise<resemble_react.ResponseOrError<Response>> {

    try {
      return await resemble_react.retryForever(
        async () => {
          try {
            setUnobservedPendingMutations(
              (mutations) => {
                return mutations.map((mutation) => {
                  if (mutation.idempotencyKey === idempotencyKey) {
                    return { ...mutation, isLoading: true };
                  }
                  return mutation;
                });
              }
            );
            const req: Request =
              request instanceof requestType
                ? request
                : new requestType(request);

            const response = await resemble_react.guardedFetch(
              newRequest(req.toJson(), path, "POST", idempotencyKey),
              { signal: abortController?.signal }
            );

            if (!response.ok && response.headers.has("grpc-status")) {
              const grpcStatus = response.headers.get("grpc-status");
              let grpcMessage = response.headers.get("grpc-message");
              const error = new Error(
                `'{{ package_name }}.{{ service.name }}' for '${id}' responded ` +
                  `with status ${grpcStatus}` +
                  `${grpcMessage !== null ? ": " + grpcMessage : ""}`
              );

              if (shouldClearFailedMutations.current) {
                shouldClearFailedMutations.current = false;
                setFailedMutations([
                  { request, idempotencyKey, isLoading: false, error },
                ]);
              } else {
                setFailedMutations((failedMutations) => [
                  ...failedMutations,
                  { request, idempotencyKey, isLoading: false, error },
                ]);
              }
              setUnobservedPendingMutations(
                (mutations) =>
                  mutations.filter(
                    (mutation) => mutation.idempotencyKey !== idempotencyKey
                  )
              );

              return { error } as resemble_react.ResponseOrError<Response>;
            }
            if (!response.ok) {
              throw new Error("Failed to fetch");
            }
            const jsonResponse = await response.json();
            return {
              response: responseTypeFromJson(jsonResponse),
            };
          } catch (e: unknown) {
            setUnobservedPendingMutations(
              (mutations) =>
                mutations.map((mutation) => {
                  if (mutation.idempotencyKey === idempotencyKey) {
                    return { ...mutation, error: e, isLoading: false };
                  } else {
                    return mutation;
                  }
                })
            );

            if (abortController?.signal.aborted) {
              // TODO(benh): instead of returning 'undefined' as a
              // means of knowing that we've aborted provide a way
              // of "bailing" from a 'retry' by calling a function
              // passed into the lambda that 'retry' takes.
              return { error: new Error("Aborted") };
            } else {
              throw e;
            }
          }
        },
        {
          maxBackoffSeconds: 3,
        }
      );
    } finally {
      // NOTE: we deliberately DO NOT remove from
      // 'unobservedPendingMutations' but instead wait
      // for a response first so that we don't cause a render
      // before getting the updated state from the server.

      if (
        flushMutations.current !== undefined &&
        runningMutations.current.length === 0
      ) {
        flushMutations.current.set();
      } else {
        // Dequeue 1 queue and run 1 mutation from it.
        for (const run of queuedMutations.current) {
          queuedMutations.current.shift();
          run();
          break;
        }
      }
    }
  }
  {% endif %}

  async function* ReactQuery(
    request: resemble_api.react_pb.QueryRequest,
    signal: AbortSignal
  ): AsyncGenerator<resemble_api.react_pb.QueryResponse, void, unknown> {
    const response = await resemble_react.guardedFetch(
      newRequest(request, "/query", "POST"),
      { signal: signal }
    );

    if (response.body === null) {
      throw new Error("Unable to read body of response");
    }

    const reader = response.body
      .pipeThrough(new TextDecoderStream())
      .getReader();

    if (reader === undefined) {
      throw new Error("Not able to instantiate reader on response body");
    }

    let accumulated = "";

    while (true) {
      const { value, done } = await reader.read();

      if (!response.ok && response.headers.has("grpc-status")) {
        const grpcStatus = response.headers.get("grpc-status");
        let grpcMessage = response.headers.get("grpc-message");
        throw new Error(
          `'ReactQuery responded ` +
            `with status ${grpcStatus}` +
            `${grpcMessage !== null ? ": " + grpcMessage : ""}`
        );
      } else if (!response.ok) {
        throw new Error(
          `'ReactQuery' failed: ${value}`
        );
      } else if (done) {
        break;
      } else {
        accumulated += value.trim();

        if (accumulated.startsWith(",")) {
          accumulated = accumulated.substring(1);
        }

        if (!accumulated.startsWith("[")) {
          accumulated = "[" + accumulated;
        }

        if (!accumulated.endsWith("]")) {
          accumulated = accumulated + "]";
        }

        try {
          const json = JSON.parse(accumulated);
          accumulated = "";
          yield resemble_api.react_pb.QueryResponse.fromJson(json.at(-1));
        } catch (e) {
          if (e instanceof SyntaxError) {
            accumulated = accumulated.substring(0, accumulated.length - 1);
            continue;
          } else {
            throw e;
          }
        }
      }
    }
  }

  return {
    {% for method in service.methods %}
    {{ method.name }},
    {% if method.options.kind == 'reader' and not method.server_streaming and not method.client_streaming and not method.options.state_streaming %}
    use{{ method.name }},
    {% endif %}
    {% endfor %}
  };
};


class {{ service.name | to_camel }}Instance {

  constructor(id: string, endpoint: string) {
    this.id = id;
    this.endpoint = endpoint;
    this.refs = 1;

    this.initializeWebSocket();
  }

  ref() {
    this.refs += 1;
  }

  unref() {
    this.refs -= 1;

    if (this.refs === 0 && this.websocket !== undefined) {
      this.websocket.close();
    }
  }

  readonly id: string;
  private endpoint: string;
  private refs: number;
  private observers: resemble_react.Observers = {};
  private loadingReaders = 0;
  private runningMutates: resemble_react.Mutate[] = [];
  private queuedMutates: resemble_react.Mutate[] = [];
  private flushMutates?: resemble_react.Event = undefined;
  private websocket?: WebSocket = undefined;
  private backoff: resemble_react.Backoff = new resemble_react.Backoff();

  private hasRunningMutations() {
    return this.runningMutates.length > 0;
  }

  private async flushMutations() {
    if (this.flushMutates === undefined) {
      this.flushMutates = new resemble_react.Event();
    }
    await this.flushMutates.wait();
  }

  private readersLoadedOrFailed() {
    this.flushMutates = undefined;

    if (this.queuedMutates.length > 0) {
      this.runningMutates = this.queuedMutates;
      this.queuedMutates = [];

      if (this.websocket?.readyState === WebSocket.OPEN) {
        for (const { request, update } of this.runningMutates) {
          update({ isLoading: true });
          try {
            this.websocket.send(request.toBinary());
          } catch (e: unknown) {
            // We'll retry since we've stored in `*Mutates`.
          }
        }
      }
    }
  }

  private initializeWebSocket() {
    if (this.websocket === undefined && this.refs > 0) {
      const url = new URL(this.endpoint);
      this.websocket = new WebSocket(
        `wss://${url.host}/__/resemble/websocket/{{ package_name }}.{{ service.name }}/${this.id}`
      );

      this.websocket.binaryType = "arraybuffer";

      this.websocket.onopen = (event) => {
        if (this.websocket?.readyState === WebSocket.OPEN) {
          for (const { request, update } of this.runningMutates) {
            update({ isLoading: true });
            try {
              this.websocket.send(request.toBinary());
            } catch (e: unknown) {
              // We'll retry since we've stored in `*Mutates`.
            }
          }
        }
      };

      this.websocket.onerror = async (event) => {
        if (this.websocket !== undefined) {
          // TODO: explicitly close?
          this.websocket = undefined;

          for (const { update } of this.runningMutates) {
            update({ isLoading: false, error: "WebSocket disconnected" });
          }

          if (this.refs > 0) {
            await this.backoff.wait();

            this.initializeWebSocket();
          }
        }
      };

      this.websocket.onclose = async (event) => {
        if (this.websocket !== undefined) {
          // TODO: explicitly close?
          this.websocket = undefined;

          for (const { update } of this.runningMutates) {
            update({ isLoading: false, error: "WebSocket disconnected" });
          }

          if (this.refs > 0) {
            await this.backoff.wait();

            this.initializeWebSocket();
          }
        }
      };

      this.websocket.onmessage = async (event) => {
        const { resolve } = this.runningMutates[0];
        this.runningMutates.shift();

        const response = resemble_api.react_pb.MutateResponse.fromBinary(
          new Uint8Array(event.data)
        );

        resolve(response);

        if (
          this.flushMutates !== undefined &&
          this.runningMutates.length === 0
        ) {
          this.flushMutates.set();
        }
      };
    }
  }

  private async mutate(
    partialRequest: __bufbuildProtobufPartialMessage<resemble_api.react_pb.MutateRequest>,
    update: (props: { isLoading: boolean; error?: any }) => void
  ): Promise<resemble_api.react_pb.MutateResponse> {
    const request = partialRequest instanceof resemble_api.react_pb.MutateRequest
      ? partialRequest
      : new resemble_api.react_pb.MutateRequest(partialRequest);

    return new Promise((resolve, _) => {
      if (this.loadingReaders === 0) {
        this.runningMutates.push({ request, resolve, update });
        if (this.websocket?.readyState === WebSocket.OPEN) {
          update({ isLoading: true });
          try {
            this.websocket.send(request.toBinary());
          } catch (e: unknown) {
            // We'll retry since we've stored in `*Mutates`.
          }
        }
      } else {
        this.queuedMutates.push({ request, resolve, update });
      }
    });
  }

  private async read<
    RequestType extends __bufbuildProtobufMessage<RequestType>,
    ResponseType extends __bufbuildProtobufMessage<ResponseType>,
    >(
    method: string,
    request: RequestType,
    responseType: __bufbuildProtobufMessageType<ResponseType>,
    reader: resemble_react.Reader<ResponseType>
  ) {
    const headers = new Headers();
    headers.set("Content-Type", "application/json");
    headers.append("x-resemble-service-name", "{{ package_name }}.{{ service.name }}");
    headers.append("x-resemble-actor-id", this.id);
    headers.append("Connection", "keep-alive");

    const queryRequest = new resemble_api.react_pb.QueryRequest({
      method,
      request: request.toBinary(),
    });

    // Expected idempotency key we should observe due to a mutation.
    interface Expected {
      // Idempotency key of mutation.
      idempotencyKey: string;

      // Callback when we've observed this idempotency key.
      observed: (callback: () => void) => Promise<void>;

      // Callback when we no longer care about observing.
      aborted: () => void;
    }

    let expecteds: Expected[] = [];

    // When we disconnect we may not be able to observe
    // responses due to mutations yet there may still be
    // some outstanding responses that are expected which
    // we treat as "orphans" in the sense that we won't
    // observe their idempotency keys but once we reconnect
    // we will still have observed their effects and can
    // call `observed()` on them.
    let orphans: Expected[] = [];

    const id = `${uuidv4()}`;

    this.observers[id] = {
      observe: (
        idempotencyKey: string,
        observed: (callback: () => void) => Promise<void>,
        aborted: () => void
      ) => {
        expecteds.push({ idempotencyKey, observed, aborted });
      },
      unobserve: (idempotencyKey: string) => {
        expecteds = expecteds.filter(
          expected => expected.idempotencyKey !== idempotencyKey
        );
      }
    };

    try {
      await resemble_react.retryForever(async () => {
        let loaded = false;
        this.loadingReaders += 1;

        // Any mutations started after we've incremented
        // `this.loadingReaders` will be queued until after
        // all the readers have loaded and thus (1) we know all
        // current `expected` are actually `orphans` that
        // we will haved "observed" once we are (re)connected
        // because we flush mutations before starting to read
        // and (2) all queued mutations can stay in `expected`
        // because we will in fact be able to observe them
        // since they won't get sent over the websocket
        // until after we are (re)connected.
        //
        // NOTE: we need to concatenate with `orphans`
        // because we may try to (re)connect multiple times
        // and between each try more mutations may have been
        // made (or queued ones will be moved to running).
        orphans = [...orphans, ...expecteds];
        expecteds = [];

        try {
          // Wait for potentially completed mutations to flush
          // before starting to read so that we read the latest
          // state including those mutations.
          if (this.hasRunningMutations()) {
            await this.flushMutations();
          }

          unstable_batchedUpdates(() => {
            for (const setIsLoading of Object.values(reader.setIsLoadings)) {
              setIsLoading(true);
            }
          });

          const jsonResponses = resemble_react.grpcServerStream(
            new Request(
              `${this.endpoint}/resemble.v1alpha1.React.Query`,
              {
                method: "POST",
                headers,
                body: queryRequest.toJsonString()
              }
            ),
            { signal: reader.abortController.signal }
          );

          for await (const jsonResponse of jsonResponses) {
            if (!loaded) {
              if ((this.loadingReaders -= 1) === 0) {
                this.readersLoadedOrFailed();
              }
              loaded = true;
            }

            unstable_batchedUpdates(() => {
              for (const setIsLoading of Object.values(reader.setIsLoadings)) {
                setIsLoading(false);
              }
            });

            const queryResponse = resemble_api.react_pb.QueryResponse.fromJson(
              jsonResponse
            );

            const response = queryResponse.response !== undefined
              ? responseType.fromBinary(queryResponse.response)
              : undefined;

            // If we were disconnected it must be that we've
            // observed all `orphans` because we waited
            // for any mutations to flush before we re-started to
            // read.
            if (orphans.length > 0) {
              // We mark all mutations as observed except the
              // last one which we also invoke all `setResponse`s.
              // In this way we effectively create a barrier
              // for all readers that will synchronize on the last
              // mutation, but note that this still may lead
              // to some partial state/response updates because
              // one reader may have actually received a response
              // while another reader got disconnected. While this
              // is likely very rare, it is possible. Mitigating
              // this issue is non-trivial and for now we have
              // no plans to address it.
              for (let i = 0; i < orphans.length - 1; i++) {
                orphans[i].observed(() => {});
              }
              await orphans[orphans.length - 1].observed(() => {
                if (response !== undefined) {
                  reader.response = response;
                  for (const setResponse of Object.values(reader.setResponses)) {
                    setResponse(response);
                  }
                }
              });

              orphans = [];
            } else if (
              expecteds.length > 0 &&
              queryResponse.idempotencyKeys.includes(
                expecteds[0].idempotencyKey
              )
            ) {
              // eslint-disable-next-line no-loop-func
              await expecteds[0].observed(() => {
                if (response !== undefined) {
                  reader.response = response;
                  for (const setResponse of Object.values(reader.setResponses)) {
                    setResponse(response);
                  }
                }
                // eslint-disable-next-line no-loop-func
                expecteds.shift();
              });
            } else if (response !== undefined) {
              unstable_batchedUpdates(() => {
                reader.response = response;
                for (const setResponse of Object.values(reader.setResponses)) {
                  setResponse(response);
                }
              });
            }
          }

          throw new Error('Not expecting stream to ever be done');
        } catch (e: unknown) {
          if (!loaded) {
            if ((this.loadingReaders -= 1) === 0) {
              this.readersLoadedOrFailed();
            }
          }

          loaded = false;

          if (reader.abortController.signal.aborted) {
            for (const { aborted } of [...orphans, ...expecteds]) {
              aborted();
            }
            return;
          }

          unstable_batchedUpdates(() => {
            for (const setIsLoading of Object.values(reader.setIsLoadings)) {
              setIsLoading(false);
            }
            if (e instanceof resemble_api.Status) {
              for (const setStatus of Object.values(reader.setStatuses)) {
                setStatus(e);
              }
            }
          });

          console.error(e);

          throw e; // This just retries!
        }
      });
    } finally {
      delete this.observers[id];
    }
  }

  {% for method in service.methods %}
  {% if method.options.kind in ['writer', 'transaction'] %}

  private use{{ method.name | to_camel }}Mutations: (
    resemble_react.Mutation<{{ name(method.input_type) }}>)[] = [];

  private use{{ method.name | to_camel }}SetPendings: {
    [id: string]: (mutations: resemble_react.Mutation<{{ name(method.input_type) }}>[]) => void
  } = {};

  async {{ method.name | to_lower_camel }}(
    mutation: resemble_react.Mutation<{{ name(method.input_type) }}>
  ): Promise<
    resemble_react.ResponseOrErrors<
      {{ name(method.output_type) }},
      resemble_api.SystemErrorDetails
      {% if method.options.errors|length > 0 %}
      | {{ service.name | to_camel }}{{ method.name | to_camel }}ErrorDetails
      {% endif %}
  >> {
    // We always have at least 1 observer which is this function!
    let remainingObservers = 1;

    const event = new resemble_react.Event();

    const callbacks: (() => void)[] = [];

    const observed = (callback: () => void) => {
      callbacks.push(callback);
      remainingObservers -= 1;
      if (remainingObservers === 0) {
        unstable_batchedUpdates(() => {
          for (const callback of callbacks) {
            callback();
          }
        });
        event.set();
      }
      return event.wait();
    };

    const aborted = () => {
      observed(() => {});
    }

    // Tell observers about this pending mutation.
    for (const id in this.observers) {
      remainingObservers += 1;
      this.observers[id].observe(mutation.idempotencyKey, observed, aborted);
    }

    this.use{{ method.name | to_camel }}Mutations.push(mutation);

    unstable_batchedUpdates(() => {
      for (const setPending of Object.values(this.use{{ method.name | to_camel }}SetPendings)) {
        setPending(this.use{{ method.name | to_camel }}Mutations);
      }
    });

    return new Promise<
      resemble_react.ResponseOrErrors<
        {{ name(method.output_type) }},
        resemble_api.SystemErrorDetails
        {% if method.options.errors|length > 0 %}
        | {{ service.name | to_camel }}{{ method.name | to_camel }}ErrorDetails
        {% endif %}
      >>(
      async (resolve, reject) => {
        const { responseOrStatus } = await this.mutate(
          {
            method: "{{ method.name }}",
            request: mutation.request.toBinary(),
            idempotencyKey: mutation.idempotencyKey,
          },
          ({ isLoading, error }: { isLoading: boolean; error?: any }) => {
            for (const m of this.use{{ method.name | to_camel }}Mutations) {
              if (m === mutation) {
                m.isLoading = isLoading;
                if (error !== undefined) {
                  m.error = error;
                }
              }
              return m;
            }

            unstable_batchedUpdates(() => {
              for (const setPending of Object.values(this.use{{ method.name | to_camel }}SetPendings)) {
                setPending(this.use{{ method.name | to_camel }}Mutations);
              }
            });
          }
        );

        switch (responseOrStatus.case) {
          case "response":
            await observed(() => {
              this.use{{ method.name | to_camel }}Mutations =
                this.use{{ method.name | to_camel }}Mutations.filter(m => m !== mutation);

              unstable_batchedUpdates(() => {
                for (const setPending of Object.values(this.use{{ method.name | to_camel }}SetPendings)) {
                  setPending(this.use{{ method.name | to_camel }}Mutations);
                }
              });

              resolve({
                response: {{ name(method.output_type) }}.fromBinary(
                  responseOrStatus.value
                )
              });
            });
            break;
          case "status":
            // Let the observers know they no longer should expect to
            // observe this idempotency key.
            for (const id in this.observers) {
              this.observers[id].unobserve(mutation.idempotencyKey);
            }

            const status = resemble_api.Status.fromJsonString(responseOrStatus.value);

            let error;
            if ((error = resemble_api.SystemError.fromStatus(status)) !== undefined) {
              resolve({ error });
            {% if method.options.errors|length > 0 %}
            } else if ((error = {{ service.name | to_camel }}{{ method.name | to_camel }}Error.fromStatus(status)) !== undefined) {
              resolve({ error });
            {% endif %}
            } else {
              reject(
                new Error(
                  `Unknown error with gRPC status ${JSON.stringify(status)}`
                )
              );
            }
            break;
          default:
            reject(new Error('Expecting either a response or an error'));
        }
      });
  }

  use{{ method.name | to_camel }}(
    id: string,
    setPending: (mutations: resemble_react.Mutation<{{ name(method.input_type) }}>[]) => void
  ) {
    this.use{{ method.name | to_camel }}SetPendings[id] = setPending;
  }

  unuse{{ method.name | to_camel }}(id: string) {
    delete this.use{{ method.name | to_camel }}SetPendings[id];
  }

  {% elif method.options.kind == 'reader' %}

  private use{{ method.name | to_camel }}Readers: {
    [id: string]: resemble_react.Reader<{{ name(method.output_type) }}>
  } = {};

  use{{ method.name | to_camel }}(
    id: string,
    request: {{ name(method.input_type) }},
    setResponse: (response: {{ name(method.output_type) }}) => void,
    setIsLoading: (isLoading: boolean) => void,
    setStatus: (status: resemble_api.Status) => void
  ) {
    let read = false;

    const key = request.toJsonString();

    if (!(key in this.use{{ method.name | to_camel }}Readers)) {
      this.use{{ method.name | to_camel }}Readers[key] = {
        abortController: new AbortController(),
        setResponses: {},
        setIsLoadings: {},
        setStatuses: {},
      };

      read = true;
    }

    let reader = this.use{{ method.name | to_camel }}Readers[key];

    reader.setResponses[id] = setResponse;
    reader.setIsLoadings[id] = setIsLoading;
    reader.setStatuses[id] = setStatus;

    if (reader.response !== undefined) {
      setResponse(reader.response);
    }

    if (read) {
      this.read(
        "{{ method.name }}",
        request,
        {{ name(method.output_type) }},
        reader
      );
    }
  }

  unuse{{ method.name | to_camel }}(
    id: string,
    request: {{ name(method.input_type) }}
  ) {
    const key = request.toJsonString();

    const reader = this.use{{ method.name | to_camel }}Readers[key];

    delete reader.setResponses[id];
    delete reader.setIsLoadings[id];
    delete reader.setStatuses[id];

    if (Object.values(reader.setResponses).length === 0) {
      delete this.use{{ method.name | to_camel }}Readers[key];
      reader.abortController.abort();
    }
  }

  {% endif %}
  {% endfor %}

  private static instances: { [id: string]: {{ service.name | to_camel }}Instance } = {};

  static use(id: string, endpoint: string) {
    if (!(id in this.instances)) {
      this.instances[id] = new {{ service.name | to_camel }}Instance(id, endpoint);
    } else {
      this.instances[id].ref();
    }

    return this.instances[id];
  }

  unuse() {
    this.unref();
  }
}

export const use{{ service.name | to_camel }} = (
  { id }: { id: string }
): Use{{ service.name | to_camel }}Api => {
  const resembleContext = resemble_react.useResembleContext();

  const endpoint = resembleContext.client?.endpoint || "";

  const [instance, setInstance] = useState(() => {
    return {{ service.name | to_camel }}Instance.use(
      id, endpoint
    );
  });

  if (instance.id !== id) {
    setInstance(
      {{ service.name | to_camel }}Instance.use(
        id, endpoint
      )
    );
  }

  useEffect(() => {
    return () => {
      instance.unuse();
    };
  }, [instance]);

  const headers = useMemo(() => {
    const headers = new Headers();
    headers.set("Content-Type", "application/json");
    headers.append("x-resemble-service-name", "{{ package_name }}.{{ service.name }}");
    headers.append("x-resemble-actor-id", id);
    headers.append("Connection", "keep-alive");
    return headers;
  }, [id]);

  {% for method in service.methods -%}
  {%- if method.options.kind in ['writer', 'transaction'] %}

  function use{{ method.name | to_camel }}() {
    const [
      pending,
      setPending
    ] = useState<resemble_react.Mutation<{{ name(method.input_type) }}>[]>([]);

    useEffect(() => {
      const id = uuidv4();
      instance.use{{ method.name | to_camel }}(id, setPending);
      return () => {
        instance.unuse{{ method.name | to_camel }}(id);
      };
    }, []);

    const {{ method.name | to_lower_camel }} = useMemo(() => {
      const method = async (
        partialRequest: __bufbuildProtobufPartialMessage<{{ name(method.input_type) }}> = {},
        optimistic_metadata?: any
      ) => {
        const request = partialRequest instanceof {{ name(method.input_type) }}
          ? partialRequest.clone()
          : new {{ name(method.input_type) }}(partialRequest);

        const idempotencyKey = uuidv4();

        const mutation = {
          request,
          idempotencyKey,
          optimistic_metadata,
          isLoading: false, // Won't start loading if we're flushing mutations.
        };

        return instance.{{ method.name | to_lower_camel }}(mutation);
      };

      method.pending =
        new Array<resemble_react.Mutation<{{ name(method.input_type) }}>>();

      return method;
    }, []);

    {{ method.name | to_lower_camel }}.pending = pending;

    return {{ method.name | to_lower_camel }};
  }

  const {{ method.name | to_lower_camel }} = use{{ method.name | to_camel }}();

  {% elif method.options.kind == 'reader' %}

  {% if not method.server_streaming and not method.client_streaming %}

  function use{{ method.name | to_camel }}(
    partialRequest: __bufbuildProtobufPartialMessage<{{ name(method.input_type) }}> = {}
  ) {
    const newRequest = partialRequest instanceof {{ name(method.input_type) }}
      ? partialRequest.clone()
      : new {{ name(method.input_type) }}(partialRequest);

    const [request, setRequest] = useState(newRequest);

    if (!request.equals(newRequest)) {
      setRequest(newRequest);
    }

    const [response, setResponse] = useState<{{ name(method.output_type) }}>();
    const [isLoading, setIsLoading] = useState<boolean>(true);
    const [error, setError] = useState<
      undefined
      | resemble_api.SystemErrorDetails
      {% if method.options.errors|length > 0 %}
      | {{ service.name | to_camel }}{{ method.name | to_camel }}ErrorDetails
      {% endif %}
      >();

    const [exception, setException] = useState<Error>();

    useEffect(() => {
      const id = uuidv4();
      instance.use{{ method.name | to_camel }}(
        id,
        request,
        (response: {{ name(method.output_type) }}) => {
          unstable_batchedUpdates(() => {
            setError(undefined);
            setResponse(response);
          });
        },
        setIsLoading,
        (status: resemble_api.Status) => {
          let error;
          if ((error = resemble_api.SystemError.fromStatus(status)) !== undefined) {
            setError(error);
          {% if method.options.errors|length > 0 %}
          } else if ((error = {{ service.name | to_camel }}{{ method.name | to_camel }}Error.fromStatus(status)) !== undefined) {
            setError(error);
          {% endif %}
          } else {
            setException(
              new Error(
                `Unknown error with gRPC status ${JSON.stringify(status)}`
              )
            );
          }
        },
      );
      return () => {
        instance.unuse{{ method.name | to_camel }}(id, request);
      };
    }, [request]);

    if (exception !== undefined) {
      throw exception;
    }

    return { response, isLoading, error };
  }

  async function {{ method.name | to_lower_camel }}(
    partialRequest: __bufbuildProtobufPartialMessage<{{ name(method.input_type) }}> = {}
  ) {
    const request = partialRequest instanceof {{ name(method.input_type) }}
      ? partialRequest.clone()
      : new {{ name(method.input_type) }}(partialRequest);

    // Fetch with retry, using a backoff, i.e., if we get disconnected.
    const response = await (async () => {
      const backoff = new resemble_react.Backoff();

      while (true) {
        try {
          // Invariant here is that we use the '/package.service.method' path and
          // HTTP 'POST' method (we need 'POST' because we send an HTTP body).
          //
          // See also 'resemble/helpers.py'.
          return await resemble_react.guardedFetch(
            new Request(
              `${resembleContext.client?.endpoint}/{{ package_name }}.{{ service.name }}.{{ method.name }}`, {
                method: "POST",
                headers,
                body: request.toJsonString()
              }
            )
          );
        } catch (e: unknown) {
          if (e instanceof Error) {
            console.error(e.message);
          } else {
            console.error(`Unknown error: ${JSON.stringify(e)}`);
          }
        }

        await backoff.wait();
      }
    })();

    if (!response.ok) {
      if (response.headers.get("content-type") === "application/json") {
        const status = resemble_api.Status.fromJson(await response.json());

        let error;
        if ((error = resemble_api.SystemError.fromStatus(status)) !== undefined) {
          return { error };
        {% if method.options.errors|length > 0 %}
        } else if ((error = {{ service.name | to_camel }}{{ method.name | to_camel }}Error.fromStatus(status)) !== undefined) {
          return { error };
        {% endif %}
        } else {
          throw new Error(
            `Unknown error with gRPC status ${JSON.stringify(status)}`
          );
        }
      } else {
        throw new Error(`Unknown error with HTTP status ${response.status}`);
      }
    } else {
      return { response: await response.json() };
    }
  }

  {% endif %}
  {% endif %}
  {% endfor %}

  return {
    mutators: {
      {% for method in service.methods %}
      {% if method.options.kind in ['writer', 'transaction'] %}
      {{ method.name | to_lower_camel }},
      {% endif %}
      {% endfor %}
    },
    {% for method in service.methods %}
    {% if method.options.kind == 'reader' %}
    {% if not method.server_streaming and not method.client_streaming %}
    {{ method.name | to_lower_camel }},
    use{{ method.name | to_camel }},
    {% endif %}
    {% endif %}
    {% endfor %}
  };
};


{# End of: for every service in services. #}
{% endfor %}
