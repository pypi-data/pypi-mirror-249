"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _Timezone:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _TimezoneEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Timezone.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    UTC: _Timezone.ValueType  # 0
    """Add other timezones as needed"""

class Timezone(_Timezone, metaclass=_TimezoneEnumTypeWrapper): ...

UTC: Timezone.ValueType  # 0
"""Add other timezones as needed"""
global___Timezone = Timezone

@typing_extensions.final
class DailySchedule(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HOUR_FIELD_NUMBER: builtins.int
    TIMEZONE_FIELD_NUMBER: builtins.int
    hour: builtins.int
    timezone: global___Timezone.ValueType
    def __init__(
        self,
        *,
        hour: builtins.int = ...,
        timezone: global___Timezone.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["hour", b"hour", "timezone", b"timezone"]) -> None: ...

global___DailySchedule = DailySchedule

@typing_extensions.final
class ScheduleConfig(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FREQUENCY_SECONDS_FIELD_NUMBER: builtins.int
    FREQUENCY_HOURS_FIELD_NUMBER: builtins.int
    DAILY_SCHEDULE_FIELD_NUMBER: builtins.int
    frequency_seconds: builtins.int
    frequency_hours: builtins.int
    @property
    def daily_schedule(self) -> global___DailySchedule: ...
    def __init__(
        self,
        *,
        frequency_seconds: builtins.int = ...,
        frequency_hours: builtins.int = ...,
        daily_schedule: global___DailySchedule | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["daily_schedule", b"daily_schedule"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["daily_schedule", b"daily_schedule", "frequency_hours", b"frequency_hours", "frequency_seconds", b"frequency_seconds"]) -> None: ...

global___ScheduleConfig = ScheduleConfig
