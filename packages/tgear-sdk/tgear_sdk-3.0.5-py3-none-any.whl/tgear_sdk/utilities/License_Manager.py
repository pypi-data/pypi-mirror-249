from os import path
from sys import platform
from cryptography.fernet import Fernet
import subprocess


# this is the secret Key!!
#
# S = b'wT8HnOnLOaaEd10xEjwTv1ibSYKsRlOu4PIqU2UGbnI='
#
# it was generated by following:
#  Fernet.generate_key()
#
# to avoid its evidence also in the binary (.pyd/.so) file, it is additionally xor encrypted
# with following key
# k = b'\xab'[0]
#
#
# ---> license file must be located in config_files dir <---
#


# resource directory - need to be referenced to exe path when used with exe bundle
# if getattr(sys, "frozen", False):
#     CONFIG_FILES_DIR = path.join(sys._MEIPASS, "./config_files")
# else:
#     CONFIG_FILES_DIR = path.join(path.dirname(__file__), "../config_files")

CONFIG_FILES_DIR = path.join(path.dirname(__file__), "../config_files")

class License_Manager:

    def __init__(self, debug=False):

        self.debug = debug

        # xor encrypted secret key
        self.S1 = b'\xdc\xff\x93\xe3\xc5\xe4\xc5\xe7\xe4\xca\xca'
        self.S2 = b'\xee\xcf\x9a\x9b\xd3\xee\xc1\xdc\xff\xdd\x9a'
        self.S3 = b'\xc2\xc9\xf8\xf2\xe0\xd8\xf9\xc7\xe4\xde\x9f'
        self.S4 = b'\xfb\xe2\xda\xfe\x99\xfe\xec\xc9\xc5\xe2\x96'
        self.k = b'\xab'[0]

         # xor decrypt secret key
        self.sk = bytes([_a ^ self.k for _a in (self.S1 + self.S2 + self.S3 + self.S4)])

        #set license file path
        self.licence_path = path.join(CONFIG_FILES_DIR, "license.txt")




    def check_license(self):
        ret = False

        try:
            # get uuid
            uuid = self.get_uuid()

            # load license file 
            token_reloaded = self._load_license_file(self.licence_path)
            if self.debug:
                print("loaded token: ", token_reloaded)

            # decrypt
            uuid_decrypted = self._licence_decrypt(token_reloaded)    

            if uuid == uuid_decrypted:
                ret = True

        except Exception as e:
            if self.debug:
                print(e)

        return ret


    def get_uuid(self):
        return self._build_id_cross()


    def _licence_decrypt(self, token):
        # decrypt token
        f = Fernet(self.sk)
        uuid = f.decrypt(token) 
        return uuid   


    def _load_license_file(self, fname="license.txt"):
        with open(fname, "rb") as f: token=f.read()
        return token


    def _build_id_cross(self):
        if self.debug:
            print(platform, " platform detected")

        #get UUID
        uuid = 0
        if platform == "win32":
            uuid = self._build_id_win32()
        elif platform == "linux":
            uuid = self._build_id_linux()
        elif platform == "darwin":
            uuid = self._build_id_osx()
        else:
            raise Exception("Unknown platform: {}".format(platform))
        return uuid


    def _build_id_win32(self):

        # software + hw id
        cmd = "wmic csproduct get UUID /VALUE"
        result = subprocess.run(cmd, stdout=subprocess.PIPE, check=True)
        result.stdout.strip()
        uuid = result.stdout.strip().split(b'=')[1]
        if self.debug:
            print("uuid: ", uuid)
        return uuid


    def _build_id_linux(self):
        cmd = "cat /var/lib/dbus/machine-id"
        result = subprocess.run(cmd, stdout=subprocess.PIPE, shell=True, check=True)
        result.stdout.strip()
        uuid = result.stdout.strip()
        if self.debug:
            print("uuid: ", uuid)
        return uuid


    def _build_id_osx(self):
        try:
            return self._older_osx()
        except:
            return self._newer_osx()


    def _older_osx(self):
        cmd = "system_profiler SPHardwareDataType | grep 'Serial Number' | awk '{print $4}'"
        result = subprocess.run(cmd, stdout=subprocess.PIPE, shell=True,check=True)
        serial_number = result.stdout.strip()
        if self.debug:
            print("SN (older way): ", serial_number)
        return serial_number


    def _newer_osx(self):
        cmd = "ioreg -l | grep IOPlatformSerialNumber"
        result = subprocess.run(cmd, stdout=subprocess.PIPE, shell=True,check=True)
        serial_number = result.stdout.strip().split(b'=')[1].strip().strip(b'"')
        if self.debug:
            print("SN (newer way): ", serial_number)
        return serial_number


'''
module entry point
'''
if __name__ == "__main__":
    '''
    # get uuid
    uuid = get_uuid()

    # encrypt
    token = licence_create(uuid)
    write_license_file(token)
    print("token: ", token)

    # decrypt
    token_reloaded = _load_license_file()
    uuid_decrypted = licence_decrypt(token_reloaded)
    print("decripted uuid: ", uuid_decrypted)

    if uuid == uuid_decrypted:
        print("match!!")
    else:
        print("error: no match")
    '''   
    print(License_Manager(True).check_license())

