"""
This module contains functions for calculating the potential earnings of a community solar developer who is interested in participating in the Massachusetts SMART program.
All information is gathered from this source: https://www.mass.gov/info-details/solar-massachusetts-renewable-target-smart-program#program-guidelines-
"""

from enum import Enum

#########################################################################################
# ENUMS
#########################################################################################

class DistributionCompany(Enum):
    UNITIL_FITCHBURG = "UnitilFitch"
    MASSACHUSETTS_ELECTRIC = "MassElectric"
    NANTUCKET_ELECTRIC = "NantucketElectric"
    EASTERN_MASS = "EasternMass"
    WESTERN_MASS = "WesternMass"

class OfftakerType(Enum):
    COMMUNITY_SHARED = "Community Shared"
    LOW_INCOME_PROPERTY = "Low Income Property"
    LOW_INCOME_COMMUNITY_SHARED = "Low Income Community Shared"
    PUBLIC_ENTITY = "Public Entity"

class LocationType(Enum):
    BUILDING_MOUNTED = "Building Mounted Solar Tariff Generation Unit"
    FLOATING = "Floating Solar Tariff Generation Unit"
    BROWNFIELD = "Solar Tariff Generation Unit on a Brownfield"
    LANDFILL = "Solar Tariff Generation Unit on an Eligible Landfill"
    CANOPY = "Canopy Solar Tariff Generation Unit"
    AGRICULTURAL = "Agricultural Solar Tariff Generation Unit"
    OTHER = "Other"

class LandUseCategory(Enum):
    CATEGORY_1 = "Category 1"
    CATEGORY_2 = "Category 2"
    CATEGORY_3 = "Category 3"

# generation_unit_capacity enum
class GenerationUnitCapacityKW(Enum):
    LOW_INCOME_LE_25 = "LowIncome≤25"
    LE_25 = "≤25"
    GT_25_LE_250 = ">25-250"
    GT_250_LE_500 = ">250-500"
    GT_500_LE_1000 = ">500-1000"
    GT_1000_LE_5000 = ">1000-5000"


class RateClass(Enum):
    RD_1 = "RD-1"
    RD_2 = "RD-2"
    GD_1 = "GD-1"
    GD_2 = "GD-2"
    GD_3 = "GD-3"
    GD_4 = "GD-4"
    R_1 = "R-1"
    R_2 = "R-2"
    R_4 = "R-4"
    G_1 = "G-1"
    G_2NEMA = "G-2NEMA"
    G_2WCMA = "G-2WCMA"
    G_2SEMA = "G-2SEMA"
    G_3NEMA = "G-3NEMA"
    G_3WCMA = "G-3WCMA"
    G_3SEMA = "G-3SEMA"
    G_2 = "G-2"
    G_3 = "G-3"
    R_3 = "R-3"
    G_1_02_06_52 = "G-1(02/06/52)"
    G_2_62 = "G-2(62)"
    G_3_70 = "G-3(70)"
    G_5_36 = "G-5(36)"
    G_6_51 = "G-6(51)"
    G_1ND_A9_B1 = "G-1ND(A9/B1)"
    G_1D_B2_C8_F8 = "G-1D(B2/C8/F8)"
    G_2_B0_B7 = "G-2(B0/B7)"
    G_2_B0_G8 = "G-2(B0/G8)"
    G_3_B3 = "G-3(B3)"
    G_3_G6 = "G-3(G6)"
    T_1_B5 = "T-1(B5)"
    G_1_33_23_35_88 = "G-1(33/23/35/88)"
    G_2_84 = "G-2(84)"
    G_3_24 = "G-3(24)"
    G_4_41 = "G-4(41)"
    G_6_22 = "G-6(22)"
    G_7_55_31 = "G-7(55/31)"
    G_1ND = "G-1ND"
    G_1D = "G-1D"
    T_4 = "T-4"
    T_5 = "T-5"

class ServiceArea(Enum):
    UNITIL_FITCHBURG = "UnitilFitch"
    MASSACHUSETTS_ELECTRIC = "MassElectric"
    NANTUCKET_ELECTRIC = "NantucketElectric"
    CAMBRIDGE = "Cambridge"
    GREATER_BOSTON = "GreaterBoston"
    SOUTH_SHORE_CAPE_VINEYARD = "SouthShoreCCVineyard"
    WESTERN_MASS = "WesternMass"

class BillCreditType(Enum):
    NET_METERED = "Net Metered"
    ALTERNATIVE_ON_BILL_CREDIT = "Alternative On-bill Credit"
    NONE = "None"

#########################################################################################
# FUNCTIONS
#########################################################################################

def calculate_potential_earnings(
        monthly_kwh_generated: int,
        installation_size_kw: int,
        offtaker_type: str,
        location_type: str,
        co_location_with_storage: bool,
        pollinator_friendly_certified: bool,
        solar_tracking: bool,
        stand_alone: bool, # false = behind the meter
        distribution_company: str,
        acres: int,
        land_use_category: str,
        bill_credit_type: str, 
        service_area: str,
        rate_class: str,
) -> str:
    """
    Calculate the potential earnings in the Massachusetts SMART program as described by 225 CMR 20.00: 
    Solar Massachusetts Renewable Target (SMART) Program (https://www.mass.gov/regulations/225-CMR-2000-solar-massachusetts-renewable-target-smart-program)

    Args:
        monthly_kwh_generated (int): The average monthly kWh generated by the solar project.
        installation_size_kw (int): This is the size, in kilowatts (kW), of the solar project.
        offtaker_type (str): The type of offtaker. One of: Community Shared, Low Income Property, Low Income Community Shared, Public Entity
        location_type (str): The type of location. One of: Building Mounted Solar Tariff Generation Unit, Floating Solar Tariff Generation Unit, Solar Tariff Generation Unit on a Brownfield, Solar Tariff Generation Unit on an Eligible Landfill, Canopy Solar Tariff Generation Unit, Agricultural Solar Tariff Generation Unit, Other
        co_location_with_storage (bool): Whether or not the solar project is co-located with energy storage.
        pollinator_friendly_certified (bool): Whether or not the solar project is pollinator friendly certified.
        solar_tracking (bool): Whether or not the solar panels will be mounted on a tracking system that follows the sun throughout the day. (20.07 (4.d))
        stand_alone (bool): Is a "Standalone Solar Tariff Generation Unit". If False, it is a "Behind-the-Meter Solar Tariff Generation Unit"
        distribution_company (str): The name of the distribution company. One of: UnitilFitchburg, MassElectric, NantucketElectric, Cambridge, GreaterBoston, SouthShoreCCVineyard, WesternMass
        acres (int): The square footage (converted to acres) occupied by the solar photovoltaic modules that are part of the Solar Tariff Generation Unit.
        land_use_category (str): The land use category. One of: Category 1, Category 2, Category 3
        bill_credit_type (str): The type of bill credit. One of: Net Metered, Alternative On-bill Credit, None
        service_area (str): The service area. One of: UnitilFitch, MassElectric, NantucketElectric, Cambridge, GreaterBoston, SouthShoreCCVineyard, WesternMass
        rate_class (str): The rate class. One of: RD-1, RD-2, GD-1, GD-2, GD-3, GD-4, R-1, R-2, R-4, G-1, G-2NEMA, G-2WCMA, G-2SEMA, G-3NEMA, G-3WCMA, G-3SEMA, G-2, G-3, R-3, G-1(02/06/52), G-2(62), G-3(70), G-5(36), G-6(51), G-1ND(A9/B1), G-1D(B2/C8/F8), G-2(B0/B7), G-2(B0/G8), G-3(B3), G-3(G6), T-1(B5), G-1(33/23/35/88), G-2(84), G-3(24), G-4(41), G-6(22), G-7(55/31), G-1ND, G-1D, T-4, T-5

    Returns: 
        str: A description of the potential earnings, intended to be consumed by an LLM.
    """
    # Convert input to enums
    # TODO exception handling
    offtaker_type = OfftakerType(offtaker_type)
    location_type = LocationType(location_type)
    distribution_company = DistributionCompany(distribution_company)
    land_use_category = LandUseCategory(land_use_category)
    bill_credit_type = BillCreditType(bill_credit_type)
    service_area = ServiceArea(service_area)
    rate_class = RateClass(rate_class)
    # TODO use enums in all code past this point

    block_num = 1 # TODO Figure out which block number they would be in.
    generation_unit_capacity = get_generation_unit_capacity(installation_size_kw, offtaker_type)
    net_metered = bill_credit_type == BillCreditType.NET_METERED

    # 20.07 (1) - Length of Compensation Rate Terms
    years = 10 if installation_size_kw <= 25 else 20

    # 20.08 - Calculation of Incentive Payments
    # Incentive Rate
    base_compensation_rate = get_base_rate(
        distribution_company, 
        generation_unit_capacity, 
        block_num
    )
    compensation_rate_adder = get_compensation_rate_adder(
        stand_alone, 
        offtaker_type,location_type, 
        pollinator_friendly_certified, 
        solar_tracking, 
        block_num, 
        co_location_with_storage)
    greenfield_subtractor = get_greenfield_subtractor(land_use_category, acres)
    compensation_rate_of_energy_usd_per_kwh = get_energy_compensation_rate(
        stand_alone, 
        bill_credit_type, 
        service_area, 
        rate_class,
        net_metered,
    )

    # 20.08 Total Incentive Payments
    total_kwh_generated = monthly_kwh_generated * 12 * years
    value_of_energy_generated = get_value_of_energy_generated(
        total_kwh_generated, 
        compensation_rate_of_energy_usd_per_kwh
    )

    # 20.08 (1) - Calculation of Incentive Payments for Standalone Solar Tariff Generation Units. - must meet 225 CMR 20.08(1)(a) or (b)
    total_incentives_compensation = (
        base_compensation_rate + compensation_rate_adder - greenfield_subtractor
        ) * total_kwh_generated - value_of_energy_generated
    # 20.08 (2) - Calculation of Incentive Payments for Behind-the-Meter Solar Tariff Generation Unit.
    # Base rates for BTM found here: Capacity Block Base Compensation Rate and Compensation Rate Adder Guideline 1-31-22.xlsx

    incentive_rate = base_compensation_rate + compensation_rate_adder - greenfield_subtractor - compensation_rate_of_energy_usd_per_kwh

    return f"${incentive_rate} USD/kWh for {years} years. If you generate {int(total_kwh_generated)} kWh (at {monthly_kwh_generated}kWh/month), you will earn ${int(total_incentives_compensation)} over the lifetime of the project."


#########################################################################################
# Input parsing
#########################################################################################

def get_generation_unit_capacity(installation_size_kw: int, offtaker_type: str) -> GenerationUnitCapacityKW:
    """
    The policy document uses the combination of installation_size_kw and offtaker_type as an identifier; we'll do the same thing.
    """
    match installation_size_kw:
        case installation_size_kw if installation_size_kw <= 25 and offtaker_type == OfftakerType.LOW_INCOME_PROPERTY:
            return GenerationUnitCapacityKW.LOW_INCOME_LE_25
        case installation_size_kw if installation_size_kw <= 25:
            return GenerationUnitCapacityKW.LE_25
        case installation_size_kw if installation_size_kw <= 250:
            return GenerationUnitCapacityKW.GT_25_LE_250
        case installation_size_kw if installation_size_kw <= 500:
            return GenerationUnitCapacityKW.GT_250_LE_500
        case installation_size_kw if installation_size_kw <= 1000:
            return GenerationUnitCapacityKW.GT_500_LE_1000
        case installation_size_kw if installation_size_kw <= 5000:
            return GenerationUnitCapacityKW.GT_1000_LE_5000
        case _:
            raise ValueError(f"installation_size_kw ({installation_size_kw}) must be one of {[e.value for e in GenerationUnitCapacityKW]}")


#########################################################################################
# Energy Value and Rates
#########################################################################################

def get_value_of_energy_generated(
    total_kwh_generated: float,
    rate: float,
) -> float:
    """
    20.08 (1) - Value of Energy Generated
    """
    return total_kwh_generated * rate

# 20.08 (1) - Value of Energy Generated
def get_energy_compensation_rate(
    stand_alone: bool,
    bill_credit_type: str,
    service_area: str,
    rate_class: str,
    net_metered: bool,
) -> float:
    """
    20.08 (1) - Value of Energy Generated
    """
    if stand_alone:
        return get_value_rate_of_energy_generated_standalone(bill_credit_type)
    else:
        return get_value_rate_of_energy_generated_behind_the_meter(net_metered, service_area, rate_class)



# 20.08 (1)(a) - Value of Energy Generated for Standalone Solar Tariff Generation Units Receiving Bill Credits
def get_value_rate_of_energy_generated_standalone(bill_credit_type: str):
    """
    20.08 (1)(a)

    params:
    - bill_credit_type: BillCreditType.
    """
    if not isinstance(bill_credit_type, BillCreditType):
        raise ValueError(f"bill_credit_type must be one of {[e.value for e in BillCreditType]}")
    
    # 20.08 (1)(a)
    match bill_credit_type:
        case BillCreditType.NONE:
            # 20.08 (1)(b)
            # 220 CMR 8.00 State Qualifying Facility value
            # 0.2 Made up number TODO use real, non-hardcoded number
            state_qualifying_facility_rate = 0.2 # TODO
            return state_qualifying_facility_rate
        case BillCreditType.NET_METERED:
            # M.G.L. c. 164, § 138
            # 0.27626 Sourced from https://www.mass.gov/info-details/net-metering-guide#2.-net-metering-credit-calculation-and-billing-
            # TODO use real, non-hardcoded number
            net_metering_credit_rate = 0.27626 
            return net_metering_credit_rate
        case BillCreditType.ALTERNATIVE_ON_BILL_CREDIT:
            # The Generator's applicable credit value under its applicable tariff structure
            # 0.2 Made up number TODO use real, non-hardcoded number
            energy_compensation_rate = 0.2 # TODO
            return energy_compensation_rate
        case _:
            raise ValueError(f"Unimplemented BillCreditType {bill_credit_type} handler.")


def get_value_rate_of_energy_generated_behind_the_meter(net_metered: bool, service_area: str, rate_class: str):
    """
    # 20.08 (1)(b) - Value of Energy Generated for Behind-the-Meter Solar Tariff Generation Units
    """
    if not isinstance(service_area, ServiceArea):
        raise ValueError(f"service_area must be one of {[e.value for e in ServiceArea]}")
    if not isinstance(rate_class, RateClass):
        raise ValueError(f"rate_class must be one of {[e.value for e in RateClass]}")

    # TODO catch exception where a combination of service_area and rate_class are not in the dictionary
    if net_metered:
        return value_rate_of_energy_btm_net_metered[service_area][rate_class]
    return value_rate_of_energy_btm_non_net_metered[service_area][rate_class] 

#########################################################################################
# Base Rates
#########################################################################################

# 20.07 (3) - Base Compensation Rates
def get_base_rate(distribution_company: str, generation_unit_capacity: str, block_num: int) -> float:
    """
    # 20.07 (3) - Base Compensation Rates
    2023 SMART-BTM-Value-of-Energy-Workbook 09222023.xlsx
    """
    if not isinstance(generation_unit_capacity, GenerationUnitCapacityKW):
        raise ValueError(f"generation_unit_capacity ({generation_unit_capacity}) must be one of {[e.value for e in GenerationUnitCapacityKW]}")
    if not isinstance(distribution_company, DistributionCompany):
        raise ValueError(f"distribution_company ({distribution_company}) must be one of {[e.value for e in DistributionCompany]}")
    if block_num not in range(1, 17):
        raise ValueError(f"block_num must be an integer between 1 and 16")
    
    return base_rates[distribution_company.value][generation_unit_capacity][block_num]


#########################################################################################
# Adders & Subtractors
#########################################################################################

# 20.07 (4) Compensation Rate Adders. 
def get_compensation_rate_adder(
        stand_alone, 
        offtaker_type,location_type,pollinator_friendly_certified, 
        solar_tracking, 
        block_num, 
        co_location_with_storage
    ):
    if stand_alone:
        return get_compensation_rate_adder_standalone(offtaker_type,location_type,pollinator_friendly_certified, solar_tracking, block_num, co_location_with_storage) 
    return get_compensation_rate_adder_behind_the_meter() 

def get_compensation_rate_adder_standalone(
    offtaker_type: str,
    location_type: str,
    pollinator_friendly_certified: bool, 
    solar_tracking: bool, 
    block_num: int, 
    co_location_with_storage: bool, 
) -> float:
    """
    20.08 (1) - Standalone solar tariff generation unit
    """
    # 20.07 (4)(f) - Various exceptions
    # TODO wow some bullshit

    return get_location_based_adder(location_type) + \
        get_offtaker_based_adder(offtaker_type, block_num) + \
        get_energy_storage_adder(co_location_with_storage) + \
        get_pollinator_adder(pollinator_friendly_certified, block_num) + \
        get_solar_tracking_adder(solar_tracking, block_num)

def get_compensation_rate_adder_behind_the_meter():
    # TODO
    return 0

# 20.07 (4)(a) - Location Based Adders
def get_location_based_adder(location_type: str) -> float:
    """
    20.07 (4)(a) - Location Based Adders
    """
    if not isinstance(location_type, LocationType):
        raise ValueError(f"location_type must be one of {[e.value for e in LocationType]}")
    
    location_based_adder = {
        LocationType.BUILDING_MOUNTED: 0.0192, # 2023 SMART-BTM-Value-of-Energy-Workbook 09222023 - Compensation Rate Adders
        LocationType.FLOATING: 0.03,
        LocationType.BROWNFIELD: 0.03,
        LocationType.LANDFILL: 0.04,
        LocationType.CANOPY: 0.06,
        LocationType.AGRICULTURAL: 0.06,
        LocationType.OTHER: 0.0,
    }
    
    return location_based_adder[location_type]


# 20.07 (4)(b) - Off-taker Based Adders
def get_offtaker_based_adder(offtaker_type: str, block_num: int) -> float:
    """
    # 20.07 (4)(b) - Off-taker Based Adders
    NOTE: Community Solar's tranches are different sizes from the others. Caller must know correct tranch number for generation unit type.
    TODO block_num should actually be a different concept: tranche. I'm not sure what this is yet
    """
    
    if offtaker_type in offtaker_based_adder:
        return offtaker_based_adder[offtaker_type][block_num]
    
    return 0


# 20.07 (4)(c) - Energy Storage Adder
# TODO
def get_energy_storage_adder(co_location_with_storage: bool) -> float:
    if not co_location_with_storage:
        return 0
    # 20.07 (4)(c)(1) - Energy Storage Adder Multiplier
    energy_storage_adder_multiplier = 0.045 


    # 20.07 (4)(c)(2) - Energy Storage Adder Formula
    def energy_storage_adder_formula() -> float:
        pass 
    return 0

# 20.07 (4)(d) - Solar Tracking Adder
def get_solar_tracking_adder(solar_tracking: bool, block_num: int) -> float:
    """
    # 20.07 (4)(d - Solar Tracking Adder
    2023 SMART-BTM-Value-of-Energy-Workbook 09222023.xlsx - Compensation Rate Adders
    """
    if not solar_tracking:
        return 0

    solar_tracking_adder = {
        1: 0.01,
        2: 0.0096,
        3: 0.00922,
        4: 0.00885,
        5: 0.00849,
        6: 0.00815,
        7: 0.00783,
        8: 0.00751,
        9: 0.00721,
        10: 0.00693,
        11: 0.00665,
        12: 0.00638,
        13: 0.00613,
        14: 0.00588,
        15: 0.00565,
        16: 0.00542,
    }
    return solar_tracking_adder[block_num]


# 20.07 (4)(e) - Pollinator Adder
def get_pollinator_adder(pollinator_friendly_certified: bool, block_num: int) -> float:
    """
    20.07 (4)(e) - Pollinator Adder
    2023 SMART-BTM-Value-of-Energy-Workbook 09222023.xlsx - Compensation Rate Adders
    """
    if not pollinator_friendly_certified:
        return 0


    return pollinator_adder[block_num]

# 20.07 (4)(g) - Greenfield Subtractors
# TODO
def get_greenfield_subtractor(land_use_category: str, acres: int) -> float:
    """
    20.07 (4)(g) - Greenfield Subtractors

    params:
    - land_use_category: LandUseCategory
    - acres: int. The square footage (converted to acres) occupied by the solar photovoltaic modules that are part of the Solar Tariff Generation Unit.
    """
    if not isinstance(land_use_category, LandUseCategory):
        raise ValueError(f"land_use_category must be one of {[e.value for e in LandUseCategory]}")
    
    modifier = 0.0
    
    exception_20_05_5_e_1_c = False # TODO 225 CMR 20.05(5)(e)1.c
    land_use_category_20_05_5_e_7_b = True # TODO 20.07 (4)(g)(2)
    after_publication_date = True # TODO
    after_april_14_2020 = True # TODO
    exception_x = False # TODO # 20.07 (4)(g)(5)

    # 20.07 (4)(g)(2)
    if land_use_category == LandUseCategory.CATEGORY_2 and land_use_category_20_05_5_e_7_b and after_april_14_2020:
        modifier = 0.00125
    # 20.07 (4)(g)(1)
    elif land_use_category == LandUseCategory.CATEGORY_2 or exception_20_05_5_e_1_c:
        modifier = 0.0005
    # 20.07 (4)(g)(4)
    elif land_use_category == LandUseCategory.CATEGORY_3 and after_publication_date:
        modifier = 0.0025
    # 20.07 (4)(g)(3)
    elif land_use_category == LandUseCategory.CATEGORY_3 or exception_20_05_5_e_1_c:
        modifier = 0.001
    # 20.07 (4)(g)(5)
    elif exception_x:
        modifier = 0.0

    return modifier * acres

#########################################################################################
# DATA
#########################################################################################

# Source: https://www.mass.gov/info-details/solar-massachusetts-renewable-target-smart-program#program-guidelines-
pollinator_adder = {
    1: 0.00250,
    2: 0.00240,
    3: 0.00230,
    4: 0.00221,
    5: 0.00212,
    6: 0.00204,
    7: 0.00196,
    8: 0.00188,
    9: 0.00180,
    10: 0.00173,
    11: 0.00166,
    12: 0.00160,
    13: 0.00153,
    14: 0.00147,
    15: 0.00141,
    16: 0.00136,
}

# Source: https://www.mass.gov/info-details/solar-massachusetts-renewable-target-smart-program#program-guidelines-
offtaker_based_adder = {
    "Low Income Property Solar Tariff Generation Unit": {
        1: 0.03,
        2: 0.0288,
        3: 0.02765,
        4: 0.02654,
        5: 0.02548,
        6: 0.02446,
        7: 0.02348,
        8: 0.02254,
        9: 0.02164,
        10: 0.02078,
        11: 0.01994,
        12: 0.01915,
        13: 0.01838,
        14: 0.01765,
        15: 0.01694,
        16: 0.01626,
    },
    "Low Income Community Shared Solar Tariff Generation Unit": {
        1: 0.06,
        2: 0.0576,
        3: 0.0553,
        4: 0.05308,
        5: 0.05096,
        6: 0.04892,
        7: 0.04697,
        8: 0.04509,
        9: 0.04328,
        10: 0.04155,
        11: 0.03989,
        12: 0.03829,
        13: 0.03676,
        14: 0.03529,
        15: 0.03388,
        16: 0.03253,
    },
    "Public Entity Solar Tariff Generation Unit": {
        1: 0.04,
        2: 0.0384,
        3: 0.03686,
        4: 0.03539,
        5: 0.03397,
        6: 0.03261,
        7: 0.03131,
        8: 0.03006,
        9: 0.02886,
        10: 0.0277,
        11: 0.02659,
        12: 0.02553,
        13: 0.02451,
        14: 0.02353,
        15: 0.02259,
        16: 0.02168,
    },
    "Community Shared Solar Tariff Generation Unit": {
        1: 0.05,
        2: 0.048,
        3: 0.04608,
        4: 0.04424,
        5: 0.04247,
        6: 0.04077,
        7: 0.03914,
        8: 0.03757,
        9: 0.03607,
        10: 0.03463,
        11: 0.03324,
        12: 0.03191,
        13: 0.03064,
        14: 0.02941,
        15: 0.02823,
        16: 0.0271,
    },
}

# Source: https://www.mass.gov/info-details/solar-massachusetts-renewable-target-smart-program#program-guidelines-
base_rates = {
    "UnitilFitch": {
        GenerationUnitCapacityKW.LOW_INCOME_LE_25: {
            1: 0.357949,
            2: 0.326449488,
            3: 0.297721933056,
            4: 0.271522402947072,
            5: 0.260118462023295,
            6: 0.249193486618317,
            7: 0.238727360180347,
            8: 0.228700811052773,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            16: 0,
        },
        GenerationUnitCapacityKW.LE_25: {
            1: 0.31126,
            2: 0.28386912,
            3: 0.25888863744,
            4: 0.23610643734528,
            5: 0.226189966976778,
            6: 0.216689988363754,
            7: 0.207589008852476,
            8: 0.198870270480672,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            16: 0,
        },
        GenerationUnitCapacityKW.GT_25_LE_250: {
            1: 0.233445,
            2: 0.21290184,
            3: 0.19416647808,
            4: 0.17707982800896,
            5: 0.169642475232584,
            6: 0.162517491272815,
            7: 0.155691756639357,
            8: 0.149152702860504,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            16: 0,
        },
        GenerationUnitCapacityKW.GT_250_LE_500: {
            1: 0.1945375,
            2: 0.1774182,
            3: 0.1618053984,
            4: 0.1475665233408,
            5: 0.141368729360486,
            6: 0.135431242727346,
            7: 0.129743130532797,
            8: 0.12429391905042,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            16: 0,
        },
        GenerationUnitCapacityKW.GT_500_LE_1000: {
            1: 0.171193,
            2: 0.156128016,
            3: 0.142388750592,
            4: 0.129858540539904,
            5: 0.124404481837228,
            6: 0.119179493600064,
            7: 0.114173954868862,
            8: 0.10937864876437,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            16: 0,
        },
        GenerationUnitCapacityKW.GT_1000_LE_5000: {
            1: 0.15563,
            2: 0.14193456,
            3: 0.12944431872,
            4: 0.11805321867264,
            5: 0.113094983488389,
            6: 0.108344994181877,
            7: 0.103794504426238,
            8: 0.0994351352403359,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            16: 0,
        },
    },
    "MassElectric": {
        GenerationUnitCapacityKW.LOW_INCOME_LE_25: {
            1: 0.357949,
            2: 0.34363104,
            3: 0.3298857984,
            4: 0.316690366464,
            5: 0.30402275180544,
            6: 0.291861841733222,
            7: 0.280187368063893,
            8: 0.268979873341338,
            9: 0.263600275874511,
            10: 0.258328270357021,
            11: 0.25316170494988,
            12: 0.248098470850883,
            13: 0.243136501433865,
            14: 0.238273771405188,
            15: 0.233508295977084,
            16: 0.228838130057542,
        },
        GenerationUnitCapacityKW.LE_25: {
            1: 0.31126,
            2: 0.2988096,
            3: 0.286857216,
            4: 0.27538292736,
            5: 0.2643676102656,
            6: 0.253792905854976,
            7: 0.243641189620777,
            8: 0.233895542035946,
            9: 0.229217631195227,
            10: 0.224633278571322,
            11: 0.220140612999896,
            12: 0.215737800739898,
            13: 0.2114230447251,
            14: 0.207194583830598,
            15: 0.203050692153986,
            16: 0.198989678310906,
        },
        GenerationUnitCapacityKW.GT_25_LE_250: {
            1: 0.233445,
            2: 0.2241072,
            3: 0.215142912,
            4: 0.20653719552,
            5: 0.1982757076992,
            6: 0.190344679391232,
            7: 0.182730892215583,
            8: 0.175421656526959,
            9: 0.17191322339642,
            10: 0.168474958928492,
            11: 0.165105459749922,
            12: 0.161803350554923,
            13: 0.158567283543825,
            14: 0.155395937872948,
            15: 0.15228801911549,
            16: 0.14924225873318,
        },
        GenerationUnitCapacityKW.GT_250_LE_500: {
            1: 0.1945375,
            2: 0.186756,
            3: 0.17928576,
            4: 0.1721143296,
            5: 0.165229756416,
            6: 0.15862056615936,
            7: 0.152275743512986,
            8: 0.146184713772466,
            9: 0.143261019497017,
            10: 0.140395799107076,
            11: 0.137587883124935,
            12: 0.134836125462436,
            13: 0.132139402953187,
            14: 0.129496614894124,
            15: 0.126906682596241,
            16: 0.124368548944316,
        },
        GenerationUnitCapacityKW.GT_500_LE_1000: {
            1: 0.171193,
            2: 0.16434528,
            3: 0.1577714688,
            4: 0.151460610048,
            5: 0.14540218564608,
            6: 0.139586098220237,
            7: 0.134002654291427,
            8: 0.12864254811977,
            9: 0.126069697157375,
            10: 0.123548303214227,
            11: 0.121077337149943,
            12: 0.118655790406944,
            13: 0.116282674598805,
            14: 0.113957021106829,
            15: 0.111677880684692,
            16: 0.109444323070999,
        },
        GenerationUnitCapacityKW.GT_1000_LE_5000: {
            1: 0.15563,
            2: 0.1494048,
            3: 0.143428608,
            4: 0.13769146368,
            5: 0.1321838051328,
            6: 0.126896452927488,
            7: 0.121820594810388,
            8: 0.116947771017973,
            9: 0.114608815597613,
            10: 0.112316639285661,
            11: 0.110070306499948,
            12: 0.107868900369949,
            13: 0.10571152236255,
            14: 0.103597291915299,
            15: 0.101525346076993,
            16: 0.0994948391554532,
        },
    },
    "NantucketElectric": {
        GenerationUnitCapacityKW.LOW_INCOME_LE_25: {
            1: 0.391,
            2: 0.32844,
            3: 0.295596,
            4: 0.2660364,
            5: 0,
            6: 0,
            7: 0,
            8: 0,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            16: 0,
        },
        GenerationUnitCapacityKW.LE_25: {
            1: 0.34,
            2: 0.2856,
            3: 0.25704,
            4: 0.231336,
            5: 0,
            6: 0,
            7: 0,
            8: 0,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            16: 0,
        },
        GenerationUnitCapacityKW.GT_25_LE_250: {
            1: 0.255,
            2: 0.2142,
            3: 0.19278,
            4: 0.173502,
            5: 0,
            6: 0,
            7: 0,
            8: 0,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            16: 0,
        },
        GenerationUnitCapacityKW.GT_250_LE_500: {
            1: 0.2125,
            2: 0.1785,
            3: 0.16065,
            4: 0.144585,
            5: 0,
            6: 0,
            7: 0,
            8: 0,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            16: 0,
        },
        GenerationUnitCapacityKW.GT_500_LE_1000: {
            1: 0.187,
            2: 0.15708,
            3: 0.141372,
            4: 0.1272348,
            5: 0,
            6: 0,
            7: 0,
            8: 0,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            16: 0,
        },
        GenerationUnitCapacityKW.GT_1000_LE_5000: {
            1: 0.17,
            2: 0.1428,
            3: 0.12852,
            4: 0.115668,
            5: 0,
            6: 0,
            7: 0,
            8: 0,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            16: 0,
        },
    },
    "EasternMass": {
        GenerationUnitCapacityKW.LOW_INCOME_LE_25: {
            1: 0.391,
            2: 0.37536,
            3: 0.3603456,
            4: 0.345931776,
            5: 0.33209450496,
            6: 0.3188107247616,
            7: 0.306058295771136,
            8: 0.293815963940291,
            9: 0.287939644661485,
            10: 0.282180851768255,
            11: 0.27653723473289,
            12: 0.271006490038232,
            13: 0.265586360237467,
            14: 0.260274633032718,
            15: 0.255069140372064,
            16: 0.249967757564622,
        },
        GenerationUnitCapacityKW.LE_25: {
            1: 0.34,
            2: 0.3264,
            3: 0.313344,
            4: 0.30081024,
            5: 0.2887778304,
            6: 0.277226717184,
            7: 0.26613764849664,
            8: 0.255492142556774,
            9: 0.250382299705639,
            10: 0.245374653711526,
            11: 0.240467160637296,
            12: 0.23565781742455,
            13: 0.230944661076059,
            14: 0.226325767854538,
            15: 0.221799252497447,
            16: 0.217363267447498,
        },
        GenerationUnitCapacityKW.GT_25_LE_250: {
            1: 0.255,
            2: 0.2448,
            3: 0.235008,
            4: 0.22560768,
            5: 0.2165833728,
            6: 0.207920037888,
            7: 0.19960323637248,
            8: 0.191619106917581,
            9: 0.187786724779229,
            10: 0.184030990283645,
            11: 0.180350370477972,
            12: 0.176743363068412,
            13: 0.173208495807044,
            14: 0.169744325890903,
            15: 0.166349439373085,
            16: 0.163022450585623,

        },
        GenerationUnitCapacityKW.GT_250_LE_500: {
            1: 0.2125,
            2: 0.204,
            3: 0.19584,
            4: 0.1880064,
            5: 0.180486144,
            6: 0.17326669824,
            7: 0.1663360303104,
            8: 0.159682589097984,
            9: 0.156488937316024,
            10: 0.153359158569704,
            11: 0.15029197539831,
            12: 0.147286135890344,
            13: 0.144340413172537,
            14: 0.141453604909086,
            15: 0.138624532810904,
            16: 0.135852042154686,
        },
        GenerationUnitCapacityKW.GT_500_LE_1000: {
            1: 0.187,
            2: 0.17952,
            3: 0.1723392,
            4: 0.165445632,
            5: 0.15882780672,
            6: 0.1524746944512,
            7: 0.146375706673152,
            8: 0.140520678406226,
            9: 0.137710264838101,
            10: 0.134956059541339,
            11: 0.132256938350512,
            12: 0.129611799583502,
            13: 0.127019563591832,
            14: 0.124479172319996,
            15: 0.121989588873596,
            16: 0.119549797096124,
        },
        GenerationUnitCapacityKW.GT_1000_LE_5000: {
            1: 0.17,
            2: 0.1632,
            3: 0.156672,
            4: 0.15040512,
            5: 0.1443889152,
            6: 0.138613358592,
            7: 0.13306882424832,
            8: 0.127746071278387,
            9: 0.125191149852819,
            10: 0.122687326855763,
            11: 0.120233580318648,
            12: 0.117828908712275,
            13: 0.115472330538029,
            14: 0.113162883927269,
            15: 0.110899626248723,
            16: 0.108681633723749,
        },
    },
    "WesternMass": {
        GenerationUnitCapacityKW.LOW_INCOME_LE_25: {
            1: 0.328624,
            2: 0.31547904,
            3: 0.3028598784,
            4: 0.290745483264,
            5: 0.27911566393344,
            6: 0.267951037376102,
            7: 0.257232995881058,
            8: 0.246943676045816,
            9: 0.2420048025249,
            10: 0.237164706474402,
            11: 0.232421412344914,
            12: 0.227772984098015,
            13: 0.223217524416055,
            14: 0.218753173927734,
            15: 0.214378110449179,
            16: 0.210090548240196,
        },
        GenerationUnitCapacityKW.LE_25: {
            1: 0.28576,
            2: 0.2743296,
            3: 0.263356416,
            4: 0.25282215936,
            5: 0.2427092729856,
            6: 0.233000902066176,
            7: 0.223680865983529,
            8: 0.214733631344188,
            9: 0.210438958717304,
            10: 0.206230179542958,
            11: 0.202105575952099,
            12: 0.198063464433057,
            13: 0.194102195144396,
            14: 0.190220151241508,
            15: 0.186415748216678,
            16: 0.182687433252344,
        },
        GenerationUnitCapacityKW.GT_25_LE_250: {
            1: 0.21432,
            2: 0.2057472,
            3: 0.197517312,
            4: 0.18961661952,
            5: 0.1820319547392,
            6: 0.174750676549632,
            7: 0.167760649487647,
            8: 0.161050223508141,
            9: 0.157829219037978,
            10: 0.154672634657218,
            11: 0.151579181964074,
            12: 0.148547598324793,
            13: 0.145576646358297,
            14: 0.142665113431131,
            15: 0.139811811162508,
            16: 0.137015574939258,
        },
        GenerationUnitCapacityKW.GT_250_LE_500: {
            1: 0.1786,
            2: 0.171456,
            3: 0.16459776,
            4: 0.1580138496,
            5: 0.151693295616,
            6: 0.14562556379136,
            7: 0.139800541239706,
            8: 0.134208519590117,
            9: 0.131524349198315,
            10: 0.128893862214349,
            11: 0.126315984970062,
            12: 0.12378966527066,
            13: 0.121313871965247,
            14: 0.118887594525942,
            15: 0.116509842635423,
            16: 0.114179645782715,
        },
        GenerationUnitCapacityKW.GT_500_LE_1000: {
            1: 0.157168,
            2: 0.15088128,
            3: 0.1448460288,
            4: 0.139052187648,
            5: 0.13349010014208,
            6: 0.128150496136397,
            7: 0.123024476290941,
            8: 0.118103497239303,
            9: 0.115741427294517,
            10: 0.113426598748627,
            11: 0.111158066773654,
            12: 0.108934905438181,
            13: 0.106756207329418,
            14: 0.104621083182829,
            15: 0.102528661519173,
            16: 0.100478088288789,
        },
        GenerationUnitCapacityKW.GT_1000_LE_5000: {
            1: 0.14288,
            2: 0.1371648,
            3: 0.131678208,
            4: 0.12641107968,
            5: 0.1213546364928,
            6: 0.116500451033088,
            7: 0.111840432991764,
            8: 0.107366815672094,
            9: 0.105219479358652,
            10: 0.103115089771479,
            11: 0.101052787976049,
            12: 0.0990317322165284,
            13: 0.0970510975721978,
            14: 0.0951100756207538,
            15: 0.0932078741083388,
            16: 0.091343716626172,
        },
    },
}


"""
Value of Energy Generated - Net Metered Generation Unit
UnitilFitch,	RD-1,	$0.27753
UnitilFitch,	RD-2,	$0.27753
UnitilFitch,	GD-1,	$0.26642
UnitilFitch,	GD-2,	$0.20323
UnitilFitch,	GD-3,	$0.15091
UnitilFitch,	GD-4,	$0.18311
MassElectric,	R-1,	$0.24323 
MassElectric,	R-2,	$0.24323 
MassElectric,	R-4 Metered	
MassElectric,	G-1,	$0.21144 
MassElectric,	G-2NEMA,	$0.17173 
MassElectric,	G-2WCMA,	$0.16806 
MassElectric,	G-2SEMA,	$0.17152 
MassElectric,	G-3NEMA,	$0.16253 
MassElectric,	G-3WCMA,	$0.15886 
MassElectric,	G-3SEMA,	$0.16232 
NantucketElectric,	R-1,	$0.24323 
NantucketElectric,	R-2,	$0.24323 
NantucketElectric,	R-4 Metered	
NantucketElectric,	G-1,	$0.21144 
NantucketElectric,	G-2,	$0.17152 
NantucketElectric,	G-3,	$0.16232 
Cambridge,	R-1,	$0.24770
Cambridge,	R-2,	$0.24770
Cambridge,	R-3,	$0.23273
Cambridge,	R-4,	$0.23273
Cambridge,	G-1(02/06/52),	$0.14943
Cambridge,	G-2(62),	$0.16325
Cambridge,	G-3(70),	$0.15247
Cambridge,	G-5(36),	$0.19632
Cambridge,	G-6(51),	$0.23336
GreaterBoston,	R-1,	$0.24770
GreaterBoston,	R-2,	$0.24770
GreaterBoston,	R-3,	$0.23273
GreaterBoston,	R-4,	$0.23273
GreaterBoston,	G-1ND(A9/B1),	$0.24516
GreaterBoston,	G-1D(B2/C8/F8),	$0.22816
GreaterBoston,	G-2(B0/B7),	$0.15924
GreaterBoston,	G-2(B0/G8),	$0.15223
GreaterBoston,	G-3(B3),	$0.15298
GreaterBoston,	G-3(G6),	$0.14597
GreaterBoston,	T-1(B5),	$0.22223
SouthShoreCCVineyard,	R-1,	$0.24770
SouthShoreCCVineyard,	R-2,	$0.24770
SouthShoreCCVineyard,	R-3,	$0.23273
SouthShoreCCVineyard,	R-4,	$0.23273
SouthShoreCCVineyard,	G-1(33/23/35/88),	$0.20068
SouthShoreCCVineyard,	G-2(84),	$0.16532
SouthShoreCCVineyard,	G-3(24),	$0.15352
SouthShoreCCVineyard,	G-4(41),	$0.16401
SouthShoreCCVineyard,	G-6(22),	$0.18296
SouthShoreCCVineyard,	G-7(55/31),	$0.15880
WesternMass,	R-1,	$0.23132
WesternMass,	R-2,	$0.23132
WesternMass,	R-3,	$0.21677
WesternMass,	R-4,	$0.21677
WesternMass,	23,	$0.18270
WesternMass,	24,	$0.13174
WesternMass,	G-1ND,	$0.12770
WesternMass,	G-1D,	$0.12770
WesternMass,	G-2,	$0.13942
WesternMass,	T-4,	$0.13879
WesternMass,	G-3,	$0.13539
WesternMass,	T-5,	$0.13176
"""
# Source: https://www.mass.gov/info-details/solar-massachusetts-renewable-target-smart-program#program-guidelines-
value_rate_of_energy_btm_net_metered = {
    "UnitilFitch": {
        "RD-1": 0.27753,
        "RD-2": 0.27753,
        "GD-1": 0.26642,
        "GD-2": 0.20323,
        "GD-3": 0.15091,
        "GD-4": 0.18311,
    },
    "MassElectric": {
        "R-1": 0.24323,
        "R-2": 0.24323,
        "R-4": 0.0,
        "G-1": 0.21144,
        "G-2NEMA": 0.17173,
        "G-2WCMA": 0.16806,
        "G-2SEMA": 0.17152,
        "G-3NEMA": 0.16253,
        "G-3WCMA": 0.15886,
        "G-3SEMA": 0.16232,
    },
    "NantucketElectric": {
        "R-1": 0.24323,
        "R-2": 0.24323,
        "R-4": 0.0,
        "G-1": 0.21144,
        "G-2": 0.17152,
        "G-3": 0.16232,
    },
    "Cambridge": {
        "R-1": 0.24770,
        "R-2": 0.24770,
        "R-3": 0.23273,
        "R-4": 0.23273,
        "G-1(02/06/52)": 0.14943,
        "G-2(62)": 0.16325,
        "G-3(70)": 0.15247,
        "G-5(36)": 0.19632,
        "G-6(51)": 0.23336,
    },
    "GreaterBoston": {
        "R-1": 0.24770,
        "R-2": 0.24770,
        "R-3": 0.23273,
        "R-4": 0.23273,
        "G-1ND(A9/B1)": 0.24516,
        "G-1D(B2/C8/F8)": 0.22816,
        "G-2(B0/B7)": 0.15924,
        "G-2(B0/G8)": 0.15223,
        "G-3(B3)": 0.15298,
        "G-3(G6)": 0.14597,
        "T-1(B5)": 0.22223,
    },
    "SouthShoreCCVineyard": {
        "R-1": 0.24770,
        "R-2": 0.24770,
        "R-3": 0.23273,
        "R-4": 0.23273,
        "G-1(33/23/35/88)": 0.20068,
        "G-2(84)": 0.16532,
        "G-3(24)": 0.15352,
        "G-4(41)": 0.16401,
        "G-6(22)": 0.18296,
        "G-7(55/31)": 0.15880,
    },
    "WesternMass": {
        "R-1": 0.23132,
        "R-2": 0.23132,
        "R-3": 0.21677,
        "R-4": 0.21677,
        "23": 0.18270,
        "24": 0.13174,
        "G-1ND": 0.12770,
        "G-1D": 0.12770,
        "G-2": 0.13942,
        "T-4": 0.13879,
        "G-3": 0.13539,
        "T-5": 0.13176,
    },
}

"""
value of energy non-net metered
UnitilFitch, RD-1, $0.22255
UnitilFitch, RD-2, $0.22255
UnitilFitch, GD-1, $0.21533
UnitilFitch, GD-2, $0.17131
UnitilFitch, GD-3, $0.13478
UnitilFitch, GD-4, $0.15823
MassElectric, R-1, $0.20347
MassElectric, R-2, $0.20347
MassElectric, G-1, $0.17825
MassElectric, G-2NEMA, $0.15635
MassElectric, G-2WCMA, $0.15268
MassElectric, G-2SEMA, $0.15614
MassElectric, G-3NEMA, $0.15037
MassElectric, G-3WCMA, $0.14670
MassElectric, G-3SEMA, $0.15016
NantucketElectric, R-1, $0.20347
NantucketElectric, R-2, $0.20347
NantucketElectric, G-1, $0.17825
NantucketElectric, G-2, $0.15614
NantucketElectric, G-3, $0.15016
Cambridge, R-1, $0.20684
Cambridge, R-2, $0.20684
Cambridge, R-3, $0.19711
Cambridge, R-4, $0.19711
Cambridge, G-1(02/06/52), $0.14087
Cambridge, G-2(62), $0.15690
Cambridge, G-3(70), $0.14989
Cambridge, G-5(36), $0.17135
Cambridge, G-6(51), $0.19542
GreaterBoston, R-1, $0.20684
GreaterBoston, R-2, $0.20684
GreaterBoston, R-3, $0.19711
GreaterBoston, R-4, $0.19711
GreaterBoston, G-1ND(A9/B1), $0.20309
GreaterBoston, G-1D(B2/C8/F8), $0.19204
GreaterBoston, G-2(B0/B7), $0.15429
GreaterBoston, G-2(B0/G8), $0.14728
GreaterBoston, G-3(B3), $0.15022
GreaterBoston, G-3(G6), $0.14321
GreaterBoston, T-1(B5), $0.18819
SouthShoreCCVineyard, R-1, $0.20684
SouthShoreCCVineyard, R-2, $0.20684
SouthShoreCCVineyard, R-3, $0.19711
SouthShoreCCVineyard, R-4, $0.19711
SouthShoreCCVineyard, G-1(33/23/35/88), $0.17418
SouthShoreCCVineyard, G-2(84), $0.15579
SouthShoreCCVineyard, G-3(24), $0.14812
SouthShoreCCVineyard, G-4(41), $0.15034
SouthShoreCCVineyard, G-6(22), $0.16266
SouthShoreCCVineyard, G-7(55/31), $0.14696
WesternMass, R-1, $0.19115
WesternMass, R-2, $0.19115
WesternMass, R-3, $0.18169
WesternMass, R-4, $0.18169
WesternMass, 23, $0.15803
WesternMass, 24, $0.12491
WesternMass, G-1ND, $0.12228
WesternMass, G-1D, $0.12228
WesternMass, G-2, $0.13549
WesternMass, T-4, $0.13508
WesternMass, G-3, $0.13287
WesternMass, T-5, $0.13051
"""
# Source: https://www.mass.gov/info-details/solar-massachusetts-renewable-target-smart-program#program-guidelines-
value_rate_of_energy_btm_non_net_metered = {
    "UnitilFitch": {
        "RD-1": 0.22255,
        "RD-2": 0.22255,
        "GD-1": 0.21533,
        "GD-2": 0.17131,
        "GD-3": 0.13478,
        "GD-4": 0.15823,
    },
    "MassElectric": {
        "R-1": 0.20347,
        "R-2": 0.20347,
        "G-1": 0.17825,
        "G-2NEMA": 0.15635,
        "G-2WCMA": 0.15268,
        "G-2SEMA": 0.15614,
        "G-3NEMA": 0.15037,
        "G-3WCMA": 0.14670,
        "G-3SEMA": 0.15016,
    },
    "NantucketElectric": {
        "R-1": 0.20347,
        "R-2": 0.20347,
        "G-1": 0.17825,
        "G-2": 0.15614,
        "G-3": 0.15016,
    },
    "Cambridge": {
        "R-1": 0.20684,
        "R-2": 0.20684,
        "R-3": 0.19711,
        "R-4": 0.19711,
        "G-1(02/06/52)": 0.14087,
        "G-2(62)": 0.15690,
        "G-3(70)": 0.14989,
        "G-5(36)": 0.17135,
        "G-6(51)": 0.19542,
    },
    "GreaterBoston": {
        "R-1": 0.20684,
        "R-2": 0.20684,
        "R-3": 0.19711,
        "R-4": 0.19711,
        "G-1ND(A9/B1)": 0.20309,
        "G-1D(B2/C8/F8)": 0.19204,
        "G-2(B0/B7)": 0.15429,
        "G-2(B0/G8)": 0.14728,
        "G-3(B3)": 0.15022,
        "G-3(G6)": 0.14321,
        "T-1(B5)": 0.18819,
    },
    "SouthShoreCCVineyard": {
        "R-1": 0.20684,
        "R-2": 0.20684,
        "R-3": 0.19711,
        "R-4": 0.19711,
        "G-1(33/23/35/88)": 0.17418,
        "G-2(84)": 0.15579,
        "G-3(24)": 0.14812,
        "G-4(41)": 0.15034,
        "G-6(22)": 0.16266,
        "G-7(55/31)": 0.14696,
    },
    "WesternMass": {
        "R-1": 0.19115,
        "R-2": 0.19115,
        "R-3": 0.18169,
        "R-4": 0.18169,
        "23": 0.15803,
        "24": 0.12491,
        "G-1ND": 0.12228,
        "G-1D": 0.12228,
        "G-2": 0.13549,
        "T-4": 0.13508,
        "G-3": 0.13287,
        "T-5": 0.13051,
    },
}
