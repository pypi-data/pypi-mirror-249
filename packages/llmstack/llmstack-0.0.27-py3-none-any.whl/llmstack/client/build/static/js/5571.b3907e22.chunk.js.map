{"version":3,"file":"static/js/5571.b3907e22.chunk.js","mappings":"wTAMe,SAASA,EAAsBC,GAC5C,IACEC,EAKED,EALFC,SACAC,EAIEF,EAJFE,GACAC,EAGEH,EAHFG,MACAC,EAEEJ,EAFFI,aACAC,EACEL,EADFK,aAEIC,EAAYH,EAAQI,KAAKC,MAAML,GAAS,KACxCM,EAAe,SAAAC,GACnBT,EAASM,KAAKI,UAAUD,GAC1B,EACA,OAAOE,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CACdC,QAAS,QACTC,SAAA,EACEJ,EAAAA,EAAAA,MAACK,EAAAA,EAAW,CAACH,GAAI,CACjBI,MAAO,SACPF,SAAA,EACEG,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAAClB,GAAE,GAAAmB,OAAKnB,EAAE,UAASc,SAAC,eAC/BJ,EAAAA,EAAAA,MAACU,EAAAA,EAAM,CAACC,QAAO,GAAAF,OAAKnB,EAAE,UAAUA,GAAIA,EAAIsB,MAAM,YAAYrB,OAAgB,OAATG,QAAS,IAATA,OAAS,EAATA,EAAWmB,OAAQ,GAAIxB,SAAU,SAAAyB,GAAK,OAAIjB,EAAa,CACxHgB,KAAMC,EAAMC,OAAOxB,OACnB,EAAEyB,YAAY,qBAAqBC,QAAQ,SAASf,GAAI,CACxDgB,WAAY,SACZd,SAAA,EACEG,EAAAA,EAAAA,KAACY,EAAAA,EAAQ,CAAC5B,MAAM,WAAUa,SAAC,cAC3BG,EAAAA,EAAAA,KAACY,EAAAA,EAAQ,CAAC5B,MAAM,SAAQa,SAAC,YACzBG,EAAAA,EAAAA,KAACY,EAAAA,EAAQ,CAAC5B,MAAM,OAAMa,SAAC,mBAGN,cAAX,OAATV,QAAS,IAATA,OAAS,EAATA,EAAWmB,QAAuBN,EAAAA,EAAAA,KAACa,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAclB,UAChFG,EAAAA,EAAAA,KAACgB,EAAAA,EAAc,CAACC,YAAahC,EAAciC,YAAahC,EAAciC,UAAW,CACnFC,QAAS,IACRC,aAAW,EAACrC,MAAOsC,IAAgB,OAATnC,QAAS,IAATA,OAAS,EAATA,EAAWoC,gBAAiBzC,SAAU,SAAAE,GACjEM,GAAYkC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACTrC,GAAS,IACZmB,KAAM,WACNmB,WAAYzC,EAAM0C,OAAO,cACzBC,WAAY3C,EAAM0C,OAAO,YACzBH,eAAgBvC,IAEpB,EAAGqB,MAAM,oBAEY,YAAX,OAATlB,QAAS,IAATA,OAAS,EAATA,EAAWmB,QAAqBN,EAAAA,EAAAA,KAAA,OAAAH,UAC7BJ,EAAAA,EAAAA,MAACoB,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAclB,SAAA,EAC/CG,EAAAA,EAAAA,KAACgB,EAAAA,EAAc,CAACC,YAAahC,EAAciC,YAAahC,EAAciC,UAAW,CACnFC,QAAS,IACRC,aAAW,EAACrC,MAAOsC,IAAgB,OAATnC,QAAS,IAATA,OAAS,EAATA,EAAWoC,gBAAiBzC,SAAU,SAAAE,GACjEM,GAAYkC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACTrC,GAAS,IACZmB,KAAM,SACNmB,WAAYzC,EAAM0C,OAAO,cACzBC,WAAY3C,EAAM0C,OAAO,YACzBH,eAAgBvC,IAEpB,EAAGqB,MAAM,yBACLL,EAAAA,EAAAA,KAAC4B,EAAAA,EAAS,CAACvB,MAAM,4BAA4BrB,MAAgB,OAATG,QAAS,IAATA,OAAS,EAATA,EAAW0C,SAAUvB,KAAK,SAASxB,SAAU,SAAAyB,GAAK,OAAIjB,GAAYkC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACvHrC,GAAS,IACZmB,KAAM,SACNuB,SAAUtB,EAAMC,OAAOxB,QACvB,KACEgB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CAACT,aAAW,EAACrC,MAAOsC,IAAgB,OAATnC,QAAS,IAATA,OAAS,EAATA,EAAW4C,SAAU,cAAejD,SAAU,SAAAE,GACtFM,GAAYkC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACTrC,GAAS,IACZmB,KAAM,SACNyB,SAAU/C,EAAM0C,OAAO,gBAE3B,EAAGrB,MAAM,2BAGU,UAAX,OAATlB,QAAS,IAATA,OAAS,EAATA,EAAWmB,QAAmBb,EAAAA,EAAAA,MAACoB,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAclB,SAAA,EAC5EG,EAAAA,EAAAA,KAAC4B,EAAAA,EAAS,CAACvB,MAAM,sBAAsBrB,MAAgB,OAATG,QAAS,IAATA,OAAS,EAATA,EAAW6C,gBAAiBlD,SAAU,SAAAyB,GAAK,OAAIjB,GAAYkC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAC1GrC,GAAS,IACZmB,KAAM,OACN0B,gBAAiBzB,EAAMC,OAAOxB,QAC9B,KACEgB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CAACT,aAAW,EAACrC,MAAOsC,IAAgB,OAATnC,QAAS,IAATA,OAAS,EAATA,EAAW4C,SAAU,cAAejD,SAAU,SAAAE,GACtFM,GAAYkC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACTrC,GAAS,IACZmB,KAAM,OACNyB,SAAU/C,EAAM0C,OAAO,gBAE3B,EAAGrB,MAAM,2BAGf,C,6SClFM4B,EAAS,CACbC,WAAY,CACVC,SAAU,CACR7B,KAAM,SACN8B,MAAO,YAETC,WAAY,CACV/B,KAAM,SACN8B,MAAO,aACPE,OAAQ,cAEVnD,UAAW,CACTmB,KAAM,SACN8B,MAAO,YACPE,OAAQ,qBAIRC,EAAY,CAChB,WAAY,CAAC,WAAY,aAAc,aACvCJ,SAAU,CACR,iBAAkB,8BAEpBE,WAAY,CACV,iBAAkB,wCAClB,YAAa,cAEflD,UAAW,CACT,iBAAkB,6CAClB,YAAa,oBAGF,SAASqD,EAAiC3D,GACvD,IAAM4D,GAAcC,EAAAA,EAAAA,IAAeC,EAAAA,IACnC,OAAO3C,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CAACC,GAAI,CACdI,MAAO,MACP6C,OAAQ,OACR/C,UACEG,EAAAA,EAAAA,KAAC6C,EAAAA,EAAc,CAACC,OAAQb,EAAQc,UAAWA,EAAAA,GAAWC,UAAQxB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC3De,GACA,CACD,yBAA0B,CACxBU,UAAU,KAGbC,SAAUrE,EAAMG,MAAOF,SAAU,SAAAqE,GAE7B,IADLD,EAAQC,EAARD,SAEArE,EAAMC,UAAQ0C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACX0B,GAAQ,IACXE,kBAAmBX,EAAYY,MAAK,SAAAC,GAAU,OAAIA,EAAWC,QAAiB,OAARL,QAAQ,IAARA,OAAQ,EAARA,EAAUb,WAAU,IAC1FmB,aAAsB,OAARN,QAAQ,IAARA,GAAAA,EAAU/D,UAAYC,KAAKC,MAAc,OAAR6D,QAAQ,IAARA,OAAQ,EAARA,EAAU/D,WAAa,OAE1E,EAAGsE,QAAS,CACVpB,WAAY,SAAAxD,GAAK,OAAImB,EAAAA,EAAAA,KAAC0D,EAAAA,GAAkBlC,EAAAA,EAAAA,GAAA,CAACmC,UAAU,GAAW9E,GAAS,EACvE+E,gBAAiB,SAAA/E,GAAK,OAAImB,EAAAA,EAAAA,KAACpB,EAAAA,GAAqB4C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAK3C,GAAK,IAAEG,MAAOH,EAAMG,MAAOC,aAAcqC,MAASuC,IAAI,EAAG,SAAU3E,aAAcoC,MAASuC,IAAI,EAAG,SAAU9E,GAAG,qBAAqB,MAG9L,C,eC5De,SAAS+E,EAA6BjF,GACnD,IAAAkF,GAA0CC,EAAAA,EAAAA,UAAS,CAAC,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/CI,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GACtCI,GAAkDL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAvDE,EAAiBD,EAAA,GAAEE,EAAoBF,EAAA,GAC9CG,GAAkET,EAAAA,EAAAA,UAAS,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAvEE,EAAyBD,EAAA,GAAEE,EAA4BF,EAAA,GAmB9D,OAlBAG,EAAAA,EAAAA,YAAU,WACS,OAAbV,QAAa,IAAbA,GAAAA,EAAe9B,YACjByC,EAAAA,EAAAA,KAAQC,IAAI,oBAAD7E,OAAkC,OAAbiE,QAAa,IAAbA,OAAa,EAAbA,EAAe9B,WAAU,aAAY2C,MAAK,SAAAC,GACxET,GAAqB,SAAAU,GACnB,IAAMC,EAAmCF,EAASG,KAAKC,QAAO,SAAAC,GAAK,OAAIA,EAAMC,aAAgC,UAAjBD,EAAME,QAAsBF,EAAMG,OAAOC,aAAaC,OAAS,CAAC,IAC5J,OAAAC,EAAAA,EAAAA,GAAWT,EACb,GACF,IAAGU,OAAM,SAAAC,GAAU,IAADC,EAAAC,EACE,QAAlBD,EAAID,EAAMb,gBAAQ,IAAAc,GAAM,QAANC,EAAdD,EAAgBX,YAAI,IAAAY,GAApBA,EAAsBC,UACxBC,EAAAA,EAAAA,IAAgBJ,EAAMb,SAASG,KAAKa,QAAS,CAC3CvF,QAAS,SAGf,IAEA8D,EAAqB,GAEzB,GAAG,CAACL,KACG1E,EAAAA,EAAAA,MAAC0G,EAAAA,GAAI,CAACC,WAAS,EAACzG,GAAI,CACzB0G,OAAQ,SACRxG,SAAA,EACEG,EAAAA,EAAAA,KAACmG,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAI5G,GAAI,CACvB0G,OAAQ,OACRxG,UACEJ,EAAAA,EAAAA,MAAC+G,EAAAA,EAAK,CAAC7G,GAAI,CACX8G,WAAY,QACZ7D,OAAQ,OACR/C,SAAA,EACEG,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAAChG,QAAQ,KAAKf,GAAI,CAC7BgH,WAAY,OACZ9G,SAAC,mBAGDG,EAAAA,EAAAA,KAAC4G,EAAAA,EAAO,KACR5G,EAAAA,EAAAA,KAACwC,EAAgC,CAAC1D,SAAU,SAAAoE,GAC5CkB,EAAiBlB,EACnB,EAAGlE,MAAOmF,UAGZnE,EAAAA,EAAAA,KAACmG,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAI5G,GAAI,CACvB0G,OAAQ,OACRxG,UACEJ,EAAAA,EAAAA,MAAC+G,EAAAA,EAAK,CAAC7G,GAAI,CACX8G,WAAY,QACZ7D,OAAQ,OACR/C,SAAA,EACEG,EAAAA,EAAAA,KAAC0G,EAAAA,EAAU,CAAChG,QAAQ,KAAKf,GAAI,CAC7BgH,WAAY,OACZ9G,SAAC,wBAGDG,EAAAA,EAAAA,KAAC4G,EAAAA,EAAO,IACM,OAAbzC,QAAa,IAAbA,GAAAA,EAAe9B,YAAarC,EAAAA,EAAAA,KAAC6G,EAAAA,GAAQ,CAACC,mBAAiB,EAACC,QAAS,CAAC,CACnEC,MAAO,OACPC,WAAY,OACZlH,MAAO,KACN,CACDiH,MAAO,OACPC,WAAY,OACZlH,MAAO,MACLmH,aAAc,CAChBC,WAAY,CACVC,gBAAiB,CACfC,SAAU,MAGbC,KAAM/C,EAAkBgD,KAAI,SAAAjC,GAC7B,MAAO,CACLvG,GAAIuG,EAAM/B,KACViE,KAAMlC,EAAMkC,KACZC,KAAMnC,EAAMmC,KAEhB,IAAIC,gBAAiB,CAAC,IAAKC,4BAA0B,EAAChI,GAAI,CACxDI,MAAO,QACN6H,kBAAmBjD,EAA2BkD,0BAA2B,SAAAC,GAC1ElD,EAA6BkD,EAC/B,KAAiB9H,EAAAA,EAAAA,KAAA,UAAAH,SAAQ,sCAG3BG,EAAAA,EAAAA,KAACmG,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAI5G,GAAI,CACvB0G,OAAQ,OACRxG,UACEG,EAAAA,EAAAA,KAAC+H,EAAAA,EAAM,CAACrH,QAAQ,YAAYsH,MAAM,UAAUC,WAAwB,OAAb9D,QAAa,IAAbA,GAAAA,EAAeX,eAAqD,IAArCmB,EAA0BgB,OAAcuC,QAAS,WAAO,IAADC,GAC7IrD,EAAAA,EAAAA,KAAQsD,KAAK,+BAAgC,CAC3CjG,SAAuB,OAAbgC,QAAa,IAAbA,OAAa,EAAbA,EAAehC,SACzBkG,SAAuB,OAAblE,QAAa,IAAbA,GAAwB,QAAXgE,EAAbhE,EAAemE,iBAAS,IAAAH,OAAX,EAAbA,EAA0B5E,KACpCpE,UAAwB,OAAbgF,QAAa,IAAbA,OAAa,EAAbA,EAAeX,aAC1B+E,mBAAoB5D,IACnBK,MAAK,SAAAC,IACNiB,EAAAA,EAAAA,IAAgB,4CAA6C,CAC3DxF,QAAS,YAEX8H,OAAOC,SAASC,KAAO,OACzB,IAAG7C,OAAM,SAAAC,GAAU,IAAD6C,EAAAC,EACE,QAAlBD,EAAI7C,EAAMb,gBAAQ,IAAA0D,GAAM,QAANC,EAAdD,EAAgBvD,YAAI,IAAAwD,GAApBA,EAAsB3C,UACxBC,EAAAA,EAAAA,IAAgBJ,EAAMb,SAASG,KAAKa,QAAS,CAC3CvF,QAAS,SAGf,GACF,EAAEb,SAAC,eAKT,C","sources":["components/schedule/FrequencyPickerWidget.jsx","components/schedule/AddDataRefreshScheduleConfigForm.jsx","pages/AddDatasourceRefreshSchedule.jsx"],"sourcesContent":["import React from \"react\";\nimport { Box, FormControl, InputLabel, Select, MenuItem, TextField } from \"@mui/material\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\nimport { AdapterMoment } from \"@mui/x-date-pickers/AdapterMoment\";\nimport moment from \"moment\";\nimport { DateTimePicker, DatePicker } from \"@mui/x-date-pickers\";\nexport default function FrequencyPickerWidget(props) {\n  const {\n    onChange,\n    id,\n    value,\n    minStartTime,\n    maxStartTime\n  } = props;\n  const frequency = value ? JSON.parse(value) : null;\n  const handleChange = newValue => {\n    onChange(JSON.stringify(newValue));\n  };\n  return <Box sx={{\n    display: \"flex\"\n  }}>\n      <FormControl sx={{\n      width: \"120px\"\n    }}>\n        <InputLabel id={`${id}-label`}>Frequency</InputLabel>\n        <Select labelId={`${id}-label`} id={id} label=\"Frequency\" value={frequency?.type || \"\"} onChange={event => handleChange({\n        type: event.target.value\n      })} placeholder=\"Select a frequency\" variant=\"filled\" sx={{\n        lineHeight: \"0.5em\"\n      }}>\n          <MenuItem value=\"run_once\">Run Once</MenuItem>\n          <MenuItem value=\"repeat\">Repeat</MenuItem>\n          <MenuItem value=\"cron\">Cron Job</MenuItem>\n        </Select>\n      </FormControl>\n      {frequency?.type === \"run_once\" && <LocalizationProvider dateAdapter={AdapterMoment}>\n          <DateTimePicker minDateTime={minStartTime} maxDateTime={maxStartTime} timeSteps={{\n        minutes: 15\n      }} disablePast value={moment(frequency?.scheduled_time)} onChange={value => {\n        handleChange({\n          ...frequency,\n          type: \"run_once\",\n          start_date: value.format(\"YYYY-MM-DD\"),\n          start_time: value.format(\"HH:mm:ss\"),\n          scheduled_time: value\n        });\n      }} label=\"Schedule Time\" />\n        </LocalizationProvider>}\n      {frequency?.type === \"repeat\" && <div>\n          <LocalizationProvider dateAdapter={AdapterMoment}>\n            <DateTimePicker minDateTime={minStartTime} maxDateTime={maxStartTime} timeSteps={{\n          minutes: 15\n        }} disablePast value={moment(frequency?.scheduled_time)} onChange={value => {\n          handleChange({\n            ...frequency,\n            type: \"repeat\",\n            start_date: value.format(\"YYYY-MM-DD\"),\n            start_time: value.format(\"HH:mm:ss\"),\n            scheduled_time: value\n          });\n        }} label=\"Schedule Start Time\" />\n            <TextField label=\"Repeat Interval (in days)\" value={frequency?.interval} type=\"number\" onChange={event => handleChange({\n          ...frequency,\n          type: \"repeat\",\n          interval: event.target.value\n        })} />\n            <DatePicker disablePast value={moment(frequency?.end_date, \"YYYY-MM-DD\")} onChange={value => {\n          handleChange({\n            ...frequency,\n            type: \"repeat\",\n            end_date: value.format(\"YYYY-MM-DD\")\n          });\n        }} label=\"Schedule End Date\" />\n          </LocalizationProvider>\n        </div>}\n      {frequency?.type === \"cron\" && <LocalizationProvider dateAdapter={AdapterMoment}>\n          <TextField label=\"Cron Job Expression\" value={frequency?.cron_expression} onChange={event => handleChange({\n        ...frequency,\n        type: \"cron\",\n        cron_expression: event.target.value\n      })} />\n          <DatePicker disablePast value={moment(frequency?.end_date, \"YYYY-MM-DD\")} onChange={value => {\n        handleChange({\n          ...frequency,\n          type: \"cron\",\n          end_date: value.format(\"YYYY-MM-DD\")\n        });\n      }} label=\"Schedule End Date\" />\n        </LocalizationProvider>}\n    </Box>;\n}","import validator from \"@rjsf/validator-ajv8\";\nimport ThemedJsonForm from \"../ThemedJsonForm\";\nimport FrequencyPickerWidget from \"./FrequencyPickerWidget\";\nimport { useRecoilValue } from \"recoil\";\nimport { dataSourcesState } from \"../../data/atoms\";\nimport { Box } from \"@mui/material\";\nimport { DataSourceSelector } from \"../datasource/DataSourceSelector\";\nimport moment from \"moment\";\nconst SCHEMA = {\n  properties: {\n    job_name: {\n      type: \"string\",\n      title: \"Job Name\"\n    },\n    datasource: {\n      type: \"string\",\n      title: \"Datasource\",\n      widget: \"datasource\"\n    },\n    frequency: {\n      type: \"string\",\n      title: \"Frequency\",\n      widget: \"frequencyPicker\"\n    }\n  }\n};\nconst UI_SCHEMA = {\n  \"ui:order\": [\"job_name\", \"datasource\", \"frequency\"],\n  job_name: {\n    \"ui:description\": \"Enter a name for this job.\"\n  },\n  datasource: {\n    \"ui:description\": \"Select a datasource to setup refresh.\",\n    \"ui:widget\": \"datasource\"\n  },\n  frequency: {\n    \"ui:description\": \"Select a frequency to run the application.\",\n    \"ui:widget\": \"frequencyPicker\"\n  }\n};\nexport default function AddDataRefreshScheduleConfigForm(props) {\n  const dataSources = useRecoilValue(dataSourcesState);\n  return <Box sx={{\n    width: \"95%\",\n    margin: \"5px\"\n  }}>\n      <ThemedJsonForm schema={SCHEMA} validator={validator} uiSchema={{\n      ...UI_SCHEMA,\n      ...{\n        \"ui:submitButtonOptions\": {\n          norender: true\n        }\n      }\n    }} formData={props.value} onChange={({\n      formData\n    }) => {\n      props.onChange({\n        ...formData,\n        datasourceDetails: dataSources.find(dataSource => dataSource.uuid === formData?.datasource),\n        frequencyObj: formData?.frequency ? JSON.parse(formData?.frequency) : null\n      });\n    }} widgets={{\n      datasource: props => <DataSourceSelector multiple={false} {...props} />,\n      frequencyPicker: props => <FrequencyPickerWidget {...props} value={props.value} minStartTime={moment().add(1, \"hours\")} maxStartTime={moment().add(1, \"years\")} id=\"frequency-picker\" />\n    }} />\n    </Box>;\n}","import { useEffect, useState } from \"react\";\nimport { enqueueSnackbar } from \"notistack\";\nimport { Grid, Divider, Typography, Button, Stack } from \"@mui/material\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport AddDataRefreshScheduleConfigForm from \"../components/schedule/AddDataRefreshScheduleConfigForm\";\nimport { axios } from \"../data/axios\";\nexport default function AddDatasourceRefreshSchedule(props) {\n  const [configuration, setConfiguration] = useState({});\n  const [dataSourceEntries, setDataSourceEntries] = useState([]);\n  const [dataSourceEntriesSelected, setDataSourceEntriesSelected] = useState([]);\n  useEffect(() => {\n    if (configuration?.datasource) {\n      axios().get(`/api/datasources/${configuration?.datasource}/entries`).then(response => {\n        setDataSourceEntries(prev => {\n          const dataSourceEntriesWithSyncSupport = response.data.filter(entry => entry.sync_config && entry.status === \"READY\" && entry.config.document_ids.length > 0);\n          return [...dataSourceEntriesWithSyncSupport];\n        });\n      }).catch(error => {\n        if (error.response?.data?.message) {\n          enqueueSnackbar(error.response.data.message, {\n            variant: \"error\"\n          });\n        }\n      });\n    } else {\n      setDataSourceEntries([]);\n    }\n  }, [configuration]);\n  return <Grid container sx={{\n    height: \"100vh\"\n  }}>\n      <Grid item xs={12} sx={{\n      height: \"45%\"\n    }}>\n        <Stack sx={{\n        alignItems: \"start\",\n        margin: \"5px\"\n      }}>\n          <Typography variant=\"h6\" sx={{\n          marginLeft: \"2px\"\n        }}>\n            Configuration\n          </Typography>\n          <Divider />\n          <AddDataRefreshScheduleConfigForm onChange={formData => {\n          setConfiguration(formData);\n        }} value={configuration} />\n        </Stack>\n      </Grid>\n      <Grid item xs={12} sx={{\n      height: \"45%\"\n    }}>\n        <Stack sx={{\n        alignItems: \"start\",\n        margin: \"5px\"\n      }}>\n          <Typography variant=\"h6\" sx={{\n          marginLeft: \"2px\"\n        }}>\n            Datasource Entries\n          </Typography>\n          <Divider />\n          {configuration?.datasource ? <DataGrid checkboxSelection columns={[{\n          field: \"name\",\n          headerName: \"Name\",\n          width: 500\n        }, {\n          field: \"size\",\n          headerName: \"Size\",\n          width: 100\n        }]} initialState={{\n          pagination: {\n            paginationModel: {\n              pageSize: 10\n            }\n          }\n        }} rows={dataSourceEntries.map(entry => {\n          return {\n            id: entry.uuid,\n            name: entry.name,\n            size: entry.size\n          };\n        })} pageSizeOptions={[10]} disableRowSelectionOnClick sx={{\n          width: \"100%\"\n        }} rowSelectionModel={dataSourceEntriesSelected} onRowSelectionModelChange={newSelection => {\n          setDataSourceEntriesSelected(newSelection);\n        }}></DataGrid> : <strong>Please Select a Data Source</strong>}\n        </Stack>\n      </Grid>\n      <Grid item xs={12} sx={{\n      height: \"10%\"\n    }}>\n        <Button variant=\"contained\" color=\"primary\" disabled={!configuration?.frequencyObj || dataSourceEntriesSelected.length === 0} onClick={() => {\n        axios().post(\"/api/jobs/datasource_refresh\", {\n          job_name: configuration?.job_name,\n          app_uuid: configuration?.appDetail?.uuid,\n          frequency: configuration?.frequencyObj,\n          datasource_entries: dataSourceEntriesSelected\n        }).then(response => {\n          enqueueSnackbar(\"Successfully Scheduled Datasource refresh\", {\n            variant: \"success\"\n          });\n          window.location.href = \"/jobs\";\n        }).catch(error => {\n          if (error.response?.data?.message) {\n            enqueueSnackbar(error.response.data.message, {\n              variant: \"error\"\n            });\n          }\n        });\n      }}>\n          Submit\n        </Button>\n      </Grid>\n    </Grid>;\n}"],"names":["FrequencyPickerWidget","props","onChange","id","value","minStartTime","maxStartTime","frequency","JSON","parse","handleChange","newValue","stringify","_jsxs","Box","sx","display","children","FormControl","width","_jsx","InputLabel","concat","Select","labelId","label","type","event","target","placeholder","variant","lineHeight","MenuItem","LocalizationProvider","dateAdapter","AdapterMoment","DateTimePicker","minDateTime","maxDateTime","timeSteps","minutes","disablePast","moment","scheduled_time","_objectSpread","start_date","format","start_time","TextField","interval","DatePicker","end_date","cron_expression","SCHEMA","properties","job_name","title","datasource","widget","UI_SCHEMA","AddDataRefreshScheduleConfigForm","dataSources","useRecoilValue","dataSourcesState","margin","ThemedJsonForm","schema","validator","uiSchema","norender","formData","_ref","datasourceDetails","find","dataSource","uuid","frequencyObj","widgets","DataSourceSelector","multiple","frequencyPicker","add","AddDatasourceRefreshSchedule","_useState","useState","_useState2","_slicedToArray","configuration","setConfiguration","_useState3","_useState4","dataSourceEntries","setDataSourceEntries","_useState5","_useState6","dataSourceEntriesSelected","setDataSourceEntriesSelected","useEffect","axios","get","then","response","prev","dataSourceEntriesWithSyncSupport","data","filter","entry","sync_config","status","config","document_ids","length","_toConsumableArray","catch","error","_error$response","_error$response$data","message","enqueueSnackbar","Grid","container","height","item","xs","Stack","alignItems","Typography","marginLeft","Divider","DataGrid","checkboxSelection","columns","field","headerName","initialState","pagination","paginationModel","pageSize","rows","map","name","size","pageSizeOptions","disableRowSelectionOnClick","rowSelectionModel","onRowSelectionModelChange","newSelection","Button","color","disabled","onClick","_configuration$appDet","post","app_uuid","appDetail","datasource_entries","window","location","href","_error$response2","_error$response2$data"],"sourceRoot":""}