Metadata-Version: 2.1
Name: lea
Version: 3.4.5
Summary: Discrete probability distributions in Python
Home-page: http://bitbucket.org/piedenis/lea
Author: Pierre Denis
Author-email: pie.denis@skynet.be
License: LGPL
Keywords: probability,discrete,distribution,probabilistic programming
Classifier: Development Status :: 5 - Production/Stable
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Utilities
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Topic :: Education
Classifier: License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)
License-File: license.py
License-File: COPYING
License-File: COPYING.LESSER

Lea is a Python module aiming at working with discrete probability distributions in an intuitive way.

It allows you modeling a broad range of random phenomena: gambling, weather, finance, etc. More generally, Lea may be used for any finite set of discrete values having known probability: numbers, booleans, date/times, symbols,... Each probability distribution is modeled as a plain object, which can be named, displayed, queried or processed to produce new probability distributions.

Lea also provides advanced functions and Probabilistic Programming (PP) features; these include conditional probabilities, joint probability distributions, Bayesian networks, Markov chains and symbolic computation.

All probability calculations in Lea are performed by a new exact algorithm, the Statues algorithm, which is based on variable binding and recursive generators. For problems intractable through exact methods, Lea provides on-demand approximate algorithms, namely MC rejection sampling and likelihood weighting.

Beside the above-cited functions, Lea provides some machine learning functions, including Maximum-Likelihood and Expectation-Maximization algorithms.

Lea can be used for AI, PP, education (probability theory), generation of random samples, etc.

Please visit Lea project's wiki pages for a comprehensive documentation.
