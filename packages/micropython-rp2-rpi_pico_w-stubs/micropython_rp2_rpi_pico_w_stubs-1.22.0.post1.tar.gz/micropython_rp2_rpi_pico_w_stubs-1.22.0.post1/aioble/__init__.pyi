from _typeshed import Incomplete as Incomplete

ADDR_PUBLIC: int
ADDR_RANDOM: int

def log_warn(*args, **kwargs) -> Incomplete: ...
def log_info(*args, **kwargs) -> Incomplete: ...
def log_error(*args, **kwargs) -> Incomplete: ...
def register_services(*args, **kwargs) -> Incomplete: ...
def stop(*args, **kwargs) -> Incomplete: ...
def config(*args, **kwargs) -> Incomplete: ...
def const(*args, **kwargs) -> Incomplete: ...

class Service:
    def __init__(self, *argv, **kwargs) -> None: ...

class scan:
    cancel: Incomplete
    def __init__(self, *argv, **kwargs) -> None: ...

advertise: Incomplete

class Characteristic:
    def notify(self, *args, **kwargs) -> Incomplete: ...
    def on_read(self, *args, **kwargs) -> Incomplete: ...
    def write(self, *args, **kwargs) -> Incomplete: ...
    def read(self, *args, **kwargs) -> Incomplete: ...
    written: Incomplete
    indicate: Incomplete
    def __init__(self, *argv, **kwargs) -> None: ...

class GattError(Exception): ...
