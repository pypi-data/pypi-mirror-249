
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ASSIGN CNOT CX CY CZ DEFGATE ELSE EQ FOR GE H ID IF IN KET_ZERO LE M MAIN NE NUMBER PROCEDURE QBIT QCOUPLE RX RXY RY RZ S SD T TD VAR X X2M X2P Y Y2M Y2P Zprogram : varDef procedureBody\n               | gateDef varDef procedureBodygateDef : gateDefclause\n               | gateDefclause gateDefgDefID : ID gateDefclause : DEFGATE gDefID '=' '[' matrixContents ']' ';'  matrixContents : CNUMBER\n                       | CNUMBER ',' matrixContents\n                       | CNUMBER ';' matrixContents CNUMBER : NumberExpr\n                | '-' NumberExpr NumberExpr : NUMBER\n                   | NUMBER '+' NUMBER\n                   | NUMBER '-' NUMBER varDef : defclause\n              | varDef defclause defclause : QBIT seen_Qbit id_list ';'\n        | QCOUPLE id_list ';'\n        | VAR ID '=' NUMBER ';'\n        | VAR ID '[' NUMBER ']' '=' '{' matrixContents '}' ';' seen_Qbit : id_list : ID\n               | id_list ',' ID\n               | ID '[' NUMBER ']'\n               | id_list ',' ID '[' NUMBER ']'  procedureBody : programBlock\n                        | PROCEDURE MAIN '(' ')' '{' programBlock '}'  programStatement : qbitUnitaryStatement\n                     | measureStatement\n                     | foreachStatement\n                     | ifStatement  programBlock : programStatement\n                     | programBlock programStatement  rangeExpr : optionalIntExpr ':' optionalIntExpr\n                  | optionalIntExpr ':' optionalIntExpr ':' optionalIntExpr  optionalIntExpr : intExpr\n                       | emptyStatementsectionExpr : intExpr\n                | sectionExpr ',' intExpr qubitExpr : ID \n                 | ID '[' sectionExpr ']'\n                 | ID '[' rangeExpr ']' qubitListExpr : qubitExpr\n                     | qubitListExpr ',' qubitExpr  intExprAtom : ID \n                    | NUMBER \n                    | ID '[' intExpr ']'\n                    | '(' intExpr ')'   intExprTier1 : intExprAtom \n                     | intExprTier1 '*' intExprAtom \n                     | intExprTier1 '/' intExprAtom\n                     | intExprTier1 '%' intExprAtom  intExprTier2 : intExprTier1 \n                     | intExprTier2 '+' intExprTier1 \n                     | intExprTier2 '-' intExprTier1 \n                     |  intExpr : intExprTier2\n                | '-' intExprTier2 foreachStatement : FOR ID IN rangeExpr '{' programBlock '}'  asso : EQ\n            | GE\n            | LE\n            | NE\n            | '<'\n            | '>'\n     ifStatement : IF '(' intExpr asso intExpr ')' '{' programBlock '}' \n                | IF '(' intExpr asso intExpr ')' '{' programBlock '}' ELSE '{' programBlock '}'  qbitUnitaryStatement : uGate '<' qubitListExpr '>' ';' \n        | uGate '(' qubitListExpr  ')' ';' \n        | rGate '<' intExpr ',' qubitListExpr '>' ';'\n        | rGate '(' intExpr ',' qubitListExpr ')' ';' \n        | rxyGate '(' intExpr ',' intExpr ',' qubitListExpr ')' ';'\n        | rxyGate '<' intExpr ',' intExpr ',' qubitListExpr '>' ';'  rxyGate : RXY  rGate : RX\n              | RY\n              | RZ  uGate : H\n              | X\n              | Y\n              | Z\n              | S\n              | T\n              | SD\n              | TD\n              | X2P\n              | X2M\n              | Y2P\n              | Y2M\n              | CZ\n              | CNOT\n              | CX\n              | CY\n              | ID  measureStatement : M '<' qubitExpr '>' ';'\n        | M '(' qubitExpr ')' ';' emptyStatement : "
    
_lr_action_items = {'QBIT':([0,2,3,4,5,11,46,47,68,94,132,184,207,],[6,6,6,-15,-3,-16,6,-4,-18,-17,-19,-6,-20,]),'QCOUPLE':([0,2,3,4,5,11,46,47,68,94,132,184,207,],[7,7,7,-15,-3,-16,7,-4,-18,-17,-19,-6,-20,]),'VAR':([0,2,3,4,5,11,46,47,68,94,132,184,207,],[8,8,8,-15,-3,-16,8,-4,-18,-17,-19,-6,-20,]),'DEFGATE':([0,5,184,],[9,9,-6,]),'$end':([1,10,12,15,16,17,18,19,54,66,140,145,157,158,189,191,192,195,204,205,206,211,],[0,-1,-26,-32,-28,-29,-30,-31,-33,-2,-68,-69,-95,-96,-27,-70,-71,-59,-72,-73,-66,-67,]),'PROCEDURE':([2,4,11,46,68,94,132,207,],[13,-15,-16,13,-18,-17,-19,-20,]),'M':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[23,-15,-16,23,-32,-28,-29,-30,-31,23,-33,-18,-17,-19,23,-68,-69,-95,-96,23,23,23,-70,-71,-59,23,23,-72,-73,-66,-20,23,23,-67,]),'FOR':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[24,-15,-16,24,-32,-28,-29,-30,-31,24,-33,-18,-17,-19,24,-68,-69,-95,-96,24,24,24,-70,-71,-59,24,24,-72,-73,-66,-20,24,24,-67,]),'IF':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[25,-15,-16,25,-32,-28,-29,-30,-31,25,-33,-18,-17,-19,25,-68,-69,-95,-96,25,25,25,-70,-71,-59,25,25,-72,-73,-66,-20,25,25,-67,]),'H':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[26,-15,-16,26,-32,-28,-29,-30,-31,26,-33,-18,-17,-19,26,-68,-69,-95,-96,26,26,26,-70,-71,-59,26,26,-72,-73,-66,-20,26,26,-67,]),'X':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[27,-15,-16,27,-32,-28,-29,-30,-31,27,-33,-18,-17,-19,27,-68,-69,-95,-96,27,27,27,-70,-71,-59,27,27,-72,-73,-66,-20,27,27,-67,]),'Y':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[28,-15,-16,28,-32,-28,-29,-30,-31,28,-33,-18,-17,-19,28,-68,-69,-95,-96,28,28,28,-70,-71,-59,28,28,-72,-73,-66,-20,28,28,-67,]),'Z':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[29,-15,-16,29,-32,-28,-29,-30,-31,29,-33,-18,-17,-19,29,-68,-69,-95,-96,29,29,29,-70,-71,-59,29,29,-72,-73,-66,-20,29,29,-67,]),'S':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[30,-15,-16,30,-32,-28,-29,-30,-31,30,-33,-18,-17,-19,30,-68,-69,-95,-96,30,30,30,-70,-71,-59,30,30,-72,-73,-66,-20,30,30,-67,]),'T':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[31,-15,-16,31,-32,-28,-29,-30,-31,31,-33,-18,-17,-19,31,-68,-69,-95,-96,31,31,31,-70,-71,-59,31,31,-72,-73,-66,-20,31,31,-67,]),'SD':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[32,-15,-16,32,-32,-28,-29,-30,-31,32,-33,-18,-17,-19,32,-68,-69,-95,-96,32,32,32,-70,-71,-59,32,32,-72,-73,-66,-20,32,32,-67,]),'TD':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[33,-15,-16,33,-32,-28,-29,-30,-31,33,-33,-18,-17,-19,33,-68,-69,-95,-96,33,33,33,-70,-71,-59,33,33,-72,-73,-66,-20,33,33,-67,]),'X2P':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[34,-15,-16,34,-32,-28,-29,-30,-31,34,-33,-18,-17,-19,34,-68,-69,-95,-96,34,34,34,-70,-71,-59,34,34,-72,-73,-66,-20,34,34,-67,]),'X2M':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[35,-15,-16,35,-32,-28,-29,-30,-31,35,-33,-18,-17,-19,35,-68,-69,-95,-96,35,35,35,-70,-71,-59,35,35,-72,-73,-66,-20,35,35,-67,]),'Y2P':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[36,-15,-16,36,-32,-28,-29,-30,-31,36,-33,-18,-17,-19,36,-68,-69,-95,-96,36,36,36,-70,-71,-59,36,36,-72,-73,-66,-20,36,36,-67,]),'Y2M':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[37,-15,-16,37,-32,-28,-29,-30,-31,37,-33,-18,-17,-19,37,-68,-69,-95,-96,37,37,37,-70,-71,-59,37,37,-72,-73,-66,-20,37,37,-67,]),'CZ':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[38,-15,-16,38,-32,-28,-29,-30,-31,38,-33,-18,-17,-19,38,-68,-69,-95,-96,38,38,38,-70,-71,-59,38,38,-72,-73,-66,-20,38,38,-67,]),'CNOT':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[39,-15,-16,39,-32,-28,-29,-30,-31,39,-33,-18,-17,-19,39,-68,-69,-95,-96,39,39,39,-70,-71,-59,39,39,-72,-73,-66,-20,39,39,-67,]),'CX':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[40,-15,-16,40,-32,-28,-29,-30,-31,40,-33,-18,-17,-19,40,-68,-69,-95,-96,40,40,40,-70,-71,-59,40,40,-72,-73,-66,-20,40,40,-67,]),'CY':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[41,-15,-16,41,-32,-28,-29,-30,-31,41,-33,-18,-17,-19,41,-68,-69,-95,-96,41,41,41,-70,-71,-59,41,41,-72,-73,-66,-20,41,41,-67,]),'ID':([2,4,6,7,8,9,11,12,15,16,17,18,19,24,46,48,54,56,57,58,59,60,61,62,63,65,68,69,81,86,92,94,102,103,105,106,107,109,110,111,112,114,115,116,123,124,125,126,127,128,129,132,139,140,145,157,158,159,160,170,172,177,178,179,191,192,195,196,197,202,204,205,206,207,209,210,211,],[14,-15,-21,50,51,53,-16,14,-32,-28,-29,-30,-31,64,14,50,-33,77,77,84,84,84,84,77,77,84,-18,95,84,84,84,-17,77,84,77,84,84,84,84,84,84,77,84,84,84,-60,-61,-62,-63,-64,-65,-19,14,-68,-69,-95,-96,14,84,14,84,77,77,14,-70,-71,-59,84,14,14,-72,-73,-66,-20,14,14,-67,]),'RX':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[42,-15,-16,42,-32,-28,-29,-30,-31,42,-33,-18,-17,-19,42,-68,-69,-95,-96,42,42,42,-70,-71,-59,42,42,-72,-73,-66,-20,42,42,-67,]),'RY':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[43,-15,-16,43,-32,-28,-29,-30,-31,43,-33,-18,-17,-19,43,-68,-69,-95,-96,43,43,43,-70,-71,-59,43,43,-72,-73,-66,-20,43,43,-67,]),'RZ':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[44,-15,-16,44,-32,-28,-29,-30,-31,44,-33,-18,-17,-19,44,-68,-69,-95,-96,44,44,44,-70,-71,-59,44,44,-72,-73,-66,-20,44,44,-67,]),'RXY':([2,4,11,12,15,16,17,18,19,46,54,68,94,132,139,140,145,157,158,159,170,179,191,192,195,197,202,204,205,206,207,209,210,211,],[45,-15,-16,45,-32,-28,-29,-30,-31,45,-33,-18,-17,-19,45,-68,-69,-95,-96,45,45,45,-70,-71,-59,45,45,-72,-73,-66,-20,45,45,-67,]),'MAIN':([13,],[55,]),'<':([14,20,21,22,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,65,80,81,82,83,84,85,93,108,147,148,149,150,151,153,175,],[-94,56,58,61,62,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-75,-76,-77,-74,-56,-57,-56,-53,-49,-45,-46,128,-58,-54,-55,-50,-51,-52,-48,-47,]),'(':([14,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,55,58,59,60,61,65,81,86,92,103,106,107,109,110,111,112,115,116,123,124,125,126,127,128,129,160,172,196,],[-94,57,59,60,63,65,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-75,-76,-77,-74,74,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-60,-61,-62,-63,-64,-65,86,86,86,]),'}':([15,16,17,18,19,54,135,136,138,140,145,157,158,167,170,179,185,186,187,188,191,192,195,198,202,204,205,206,210,211,],[-32,-28,-29,-30,-31,-33,-7,-10,-12,-68,-69,-95,-96,-11,189,195,-8,-9,-13,-14,-70,-71,-59,203,206,-72,-73,-66,211,-67,]),';':([49,50,67,95,97,101,104,117,118,131,135,136,138,164,167,174,176,182,187,188,199,200,203,],[68,-22,94,-23,132,140,145,157,158,-24,166,-10,-12,184,-11,191,192,-25,-13,-14,204,205,207,]),',':([49,50,58,59,60,61,67,75,76,77,78,79,80,81,82,83,84,85,87,88,89,95,103,108,115,116,131,135,136,138,141,142,144,146,147,148,149,150,151,153,154,155,156,167,171,172,173,175,182,187,188,190,193,194,],[69,-22,-56,-56,-56,-56,69,102,-43,-40,102,105,-57,-56,-53,-49,-45,-46,114,115,116,-23,-56,-58,-56,-56,-24,165,-10,-12,-44,172,-38,102,-54,-55,-50,-51,-52,-48,102,177,178,-11,-41,-56,-42,-47,-25,-13,-14,-39,102,102,]),'[':([50,51,73,77,84,95,],[70,72,99,103,112,130,]),'=':([51,52,53,133,],[71,73,-5,163,]),'-':([58,59,60,61,65,80,81,82,83,84,85,86,92,99,103,108,112,115,116,123,124,125,126,127,128,129,138,147,148,149,150,151,153,160,165,166,172,175,183,196,],[81,81,81,81,81,107,-56,-53,-49,-45,-46,81,81,137,81,107,81,81,81,81,-60,-61,-62,-63,-64,-65,169,-54,-55,-50,-51,-52,-48,81,137,137,81,-47,137,81,]),'+':([58,59,60,61,65,80,81,82,83,84,85,86,92,103,108,112,115,116,123,124,125,126,127,128,129,138,147,148,149,150,151,153,160,172,175,196,],[-56,-56,-56,-56,-56,106,-56,-53,-49,-45,-46,-56,-56,-56,106,-56,-56,-56,-56,-60,-61,-62,-63,-64,-65,168,-54,-55,-50,-51,-52,-48,-56,-56,-47,-56,]),'NUMBER':([58,59,60,61,65,70,71,72,81,86,92,99,103,106,107,109,110,111,112,115,116,123,124,125,126,127,128,129,130,137,160,165,166,168,169,172,183,196,],[85,85,85,85,85,96,97,98,85,85,85,138,85,85,85,85,85,85,85,85,85,85,-60,-61,-62,-63,-64,-65,162,138,85,138,138,187,188,85,138,85,]),'IN':([64,],[92,]),'EQ':([65,80,81,82,83,84,85,93,108,147,148,149,150,151,153,175,],[-56,-57,-56,-53,-49,-45,-46,124,-58,-54,-55,-50,-51,-52,-48,-47,]),'GE':([65,80,81,82,83,84,85,93,108,147,148,149,150,151,153,175,],[-56,-57,-56,-53,-49,-45,-46,125,-58,-54,-55,-50,-51,-52,-48,-47,]),'LE':([65,80,81,82,83,84,85,93,108,147,148,149,150,151,153,175,],[-56,-57,-56,-53,-49,-45,-46,126,-58,-54,-55,-50,-51,-52,-48,-47,]),'NE':([65,80,81,82,83,84,85,93,108,147,148,149,150,151,153,175,],[-56,-57,-56,-53,-49,-45,-46,127,-58,-54,-55,-50,-51,-52,-48,-47,]),'>':([65,75,76,77,80,81,82,83,84,85,90,93,108,141,146,147,148,149,150,151,153,171,173,175,194,],[-56,101,-43,-40,-57,-56,-53,-49,-45,-46,117,129,-58,-44,174,-54,-55,-50,-51,-52,-48,-41,-42,-47,200,]),')':([74,76,77,78,80,81,82,83,84,85,86,91,108,113,123,124,125,126,127,128,129,141,147,148,149,150,151,153,154,161,171,173,175,193,],[100,-43,-40,104,-57,-56,-53,-49,-45,-46,-56,118,-58,153,-56,-60,-61,-62,-63,-64,-65,-44,-54,-55,-50,-51,-52,-48,176,181,-41,-42,-47,199,]),':':([80,81,82,83,84,85,92,103,108,120,121,122,144,147,148,149,150,151,153,160,175,180,],[-57,-56,-53,-49,-45,-46,-56,-56,-58,160,-36,-37,-36,-54,-55,-50,-51,-52,-48,-56,-47,196,]),']':([80,81,82,83,84,85,96,98,103,108,112,121,122,134,135,136,138,142,143,144,147,148,149,150,151,152,153,160,162,167,172,175,180,185,186,187,188,190,196,201,],[-57,-56,-53,-49,-45,-46,131,133,-56,-58,-56,-36,-37,164,-7,-10,-12,171,173,-38,-54,-55,-50,-51,-52,175,-48,-56,182,-11,-56,-47,-34,-8,-9,-13,-14,-39,-56,-35,]),'{':([80,81,82,83,84,85,100,108,119,121,122,147,148,149,150,151,153,160,163,175,180,181,196,201,208,],[-57,-56,-53,-49,-45,-46,139,-58,159,-36,-37,-54,-55,-50,-51,-52,-48,-56,183,-47,-34,197,-56,-35,209,]),'*':([82,83,84,85,147,148,149,150,151,153,175,],[109,-49,-45,-46,109,109,-50,-51,-52,-48,-47,]),'/':([82,83,84,85,147,148,149,150,151,153,175,],[110,-49,-45,-46,110,110,-50,-51,-52,-48,-47,]),'%':([82,83,84,85,147,148,149,150,151,153,175,],[111,-49,-45,-46,111,111,-50,-51,-52,-48,-47,]),'ELSE':([206,],[208,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'varDef':([0,3,],[2,46,]),'gateDef':([0,5,],[3,47,]),'defclause':([0,2,3,46,],[4,11,4,11,]),'gateDefclause':([0,5,],[5,5,]),'procedureBody':([2,46,],[10,66,]),'programBlock':([2,46,139,159,197,209,],[12,12,170,179,202,210,]),'programStatement':([2,12,46,139,159,170,179,197,202,209,210,],[15,54,15,15,15,54,54,15,54,15,54,]),'qbitUnitaryStatement':([2,12,46,139,159,170,179,197,202,209,210,],[16,16,16,16,16,16,16,16,16,16,16,]),'measureStatement':([2,12,46,139,159,170,179,197,202,209,210,],[17,17,17,17,17,17,17,17,17,17,17,]),'foreachStatement':([2,12,46,139,159,170,179,197,202,209,210,],[18,18,18,18,18,18,18,18,18,18,18,]),'ifStatement':([2,12,46,139,159,170,179,197,202,209,210,],[19,19,19,19,19,19,19,19,19,19,19,]),'uGate':([2,12,46,139,159,170,179,197,202,209,210,],[20,20,20,20,20,20,20,20,20,20,20,]),'rGate':([2,12,46,139,159,170,179,197,202,209,210,],[21,21,21,21,21,21,21,21,21,21,21,]),'rxyGate':([2,12,46,139,159,170,179,197,202,209,210,],[22,22,22,22,22,22,22,22,22,22,22,]),'seen_Qbit':([6,],[48,]),'id_list':([7,48,],[49,67,]),'gDefID':([9,],[52,]),'qubitListExpr':([56,57,105,114,177,178,],[75,78,146,154,193,194,]),'qubitExpr':([56,57,62,63,102,105,114,177,178,],[76,76,90,91,141,76,76,76,76,]),'intExpr':([58,59,60,61,65,86,92,103,112,115,116,123,160,172,196,],[79,87,88,89,93,113,121,144,152,155,156,161,121,190,121,]),'intExprTier2':([58,59,60,61,65,81,86,92,103,112,115,116,123,160,172,196,],[80,80,80,80,80,108,80,80,80,80,80,80,80,80,80,80,]),'intExprTier1':([58,59,60,61,65,81,86,92,103,106,107,112,115,116,123,160,172,196,],[82,82,82,82,82,82,82,82,82,147,148,82,82,82,82,82,82,82,]),'intExprAtom':([58,59,60,61,65,81,86,92,103,106,107,109,110,111,112,115,116,123,160,172,196,],[83,83,83,83,83,83,83,83,83,83,83,149,150,151,83,83,83,83,83,83,83,]),'rangeExpr':([92,103,],[119,143,]),'optionalIntExpr':([92,103,160,196,],[120,120,180,201,]),'emptyStatement':([92,103,160,196,],[122,122,122,122,]),'asso':([93,],[123,]),'matrixContents':([99,165,166,183,],[134,185,186,198,]),'CNUMBER':([99,165,166,183,],[135,135,135,135,]),'NumberExpr':([99,137,165,166,183,],[136,167,136,136,136,]),'sectionExpr':([103,],[142,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> varDef procedureBody','program',2,'p_program','parser.py',34),
  ('program -> gateDef varDef procedureBody','program',3,'p_program','parser.py',35),
  ('gateDef -> gateDefclause','gateDef',1,'p_gateDef','parser.py',47),
  ('gateDef -> gateDefclause gateDef','gateDef',2,'p_gateDef','parser.py',48),
  ('gDefID -> ID','gDefID',1,'p_gDefID','parser.py',55),
  ('gateDefclause -> DEFGATE gDefID = [ matrixContents ] ;','gateDefclause',7,'p_gateDefclause','parser.py',64),
  ('matrixContents -> CNUMBER','matrixContents',1,'p_matrixContents','parser.py',69),
  ('matrixContents -> CNUMBER , matrixContents','matrixContents',3,'p_matrixContents','parser.py',70),
  ('matrixContents -> CNUMBER ; matrixContents','matrixContents',3,'p_matrixContents','parser.py',71),
  ('CNUMBER -> NumberExpr','CNUMBER',1,'p_CNUMBER','parser.py',78),
  ('CNUMBER -> - NumberExpr','CNUMBER',2,'p_CNUMBER','parser.py',79),
  ('NumberExpr -> NUMBER','NumberExpr',1,'p_NumberExpr','parser.py',86),
  ('NumberExpr -> NUMBER + NUMBER','NumberExpr',3,'p_NumberExpr','parser.py',87),
  ('NumberExpr -> NUMBER - NUMBER','NumberExpr',3,'p_NumberExpr','parser.py',88),
  ('varDef -> defclause','varDef',1,'p_varDef','parser.py',94),
  ('varDef -> varDef defclause','varDef',2,'p_varDef','parser.py',95),
  ('defclause -> QBIT seen_Qbit id_list ;','defclause',4,'p_defclause','parser.py',103),
  ('defclause -> QCOUPLE id_list ;','defclause',3,'p_defclause','parser.py',104),
  ('defclause -> VAR ID = NUMBER ;','defclause',5,'p_defclause','parser.py',105),
  ('defclause -> VAR ID [ NUMBER ] = { matrixContents } ;','defclause',10,'p_defclause','parser.py',106),
  ('seen_Qbit -> <empty>','seen_Qbit',0,'p_seen_Qbit','parser.py',120),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',126),
  ('id_list -> id_list , ID','id_list',3,'p_id_list','parser.py',127),
  ('id_list -> ID [ NUMBER ]','id_list',4,'p_id_list','parser.py',128),
  ('id_list -> id_list , ID [ NUMBER ]','id_list',6,'p_id_list','parser.py',129),
  ('procedureBody -> programBlock','procedureBody',1,'p_procedureBody','parser.py',165),
  ('procedureBody -> PROCEDURE MAIN ( ) { programBlock }','procedureBody',7,'p_procedureBody','parser.py',166),
  ('programStatement -> qbitUnitaryStatement','programStatement',1,'p_statement','parser.py',174),
  ('programStatement -> measureStatement','programStatement',1,'p_statement','parser.py',175),
  ('programStatement -> foreachStatement','programStatement',1,'p_statement','parser.py',176),
  ('programStatement -> ifStatement','programStatement',1,'p_statement','parser.py',177),
  ('programBlock -> programStatement','programBlock',1,'p_programBlock','parser.py',180),
  ('programBlock -> programBlock programStatement','programBlock',2,'p_programBlock','parser.py',181),
  ('rangeExpr -> optionalIntExpr : optionalIntExpr','rangeExpr',3,'p_rangeExpr','parser.py',195),
  ('rangeExpr -> optionalIntExpr : optionalIntExpr : optionalIntExpr','rangeExpr',5,'p_rangeExpr','parser.py',196),
  ('optionalIntExpr -> intExpr','optionalIntExpr',1,'p_optionalIntExpr','parser.py',203),
  ('optionalIntExpr -> emptyStatement','optionalIntExpr',1,'p_optionalIntExpr','parser.py',204),
  ('sectionExpr -> intExpr','sectionExpr',1,'p_section','parser.py',214),
  ('sectionExpr -> sectionExpr , intExpr','sectionExpr',3,'p_section','parser.py',215),
  ('qubitExpr -> ID','qubitExpr',1,'p_qubitExpr','parser.py',227),
  ('qubitExpr -> ID [ sectionExpr ]','qubitExpr',4,'p_qubitExpr','parser.py',228),
  ('qubitExpr -> ID [ rangeExpr ]','qubitExpr',4,'p_qubitExpr','parser.py',229),
  ('qubitListExpr -> qubitExpr','qubitListExpr',1,'p_qubitListExpr','parser.py',241),
  ('qubitListExpr -> qubitListExpr , qubitExpr','qubitListExpr',3,'p_qubitListExpr','parser.py',242),
  ('intExprAtom -> ID','intExprAtom',1,'p_intExprAtom','parser.py',261),
  ('intExprAtom -> NUMBER','intExprAtom',1,'p_intExprAtom','parser.py',262),
  ('intExprAtom -> ID [ intExpr ]','intExprAtom',4,'p_intExprAtom','parser.py',263),
  ('intExprAtom -> ( intExpr )','intExprAtom',3,'p_intExprAtom','parser.py',264),
  ('intExprTier1 -> intExprAtom','intExprTier1',1,'p_intTier1Expr','parser.py',305),
  ('intExprTier1 -> intExprTier1 * intExprAtom','intExprTier1',3,'p_intTier1Expr','parser.py',306),
  ('intExprTier1 -> intExprTier1 / intExprAtom','intExprTier1',3,'p_intTier1Expr','parser.py',307),
  ('intExprTier1 -> intExprTier1 % intExprAtom','intExprTier1',3,'p_intTier1Expr','parser.py',308),
  ('intExprTier2 -> intExprTier1','intExprTier2',1,'p_intTier2Expr','parser.py',316),
  ('intExprTier2 -> intExprTier2 + intExprTier1','intExprTier2',3,'p_intTier2Expr','parser.py',317),
  ('intExprTier2 -> intExprTier2 - intExprTier1','intExprTier2',3,'p_intTier2Expr','parser.py',318),
  ('intExprTier2 -> <empty>','intExprTier2',0,'p_intTier2Expr','parser.py',319),
  ('intExpr -> intExprTier2','intExpr',1,'p_term','parser.py',327),
  ('intExpr -> - intExprTier2','intExpr',2,'p_term','parser.py',328),
  ('foreachStatement -> FOR ID IN rangeExpr { programBlock }','foreachStatement',7,'p_foreachStatement','parser.py',340),
  ('asso -> EQ','asso',1,'p_asso','parser.py',347),
  ('asso -> GE','asso',1,'p_asso','parser.py',348),
  ('asso -> LE','asso',1,'p_asso','parser.py',349),
  ('asso -> NE','asso',1,'p_asso','parser.py',350),
  ('asso -> <','asso',1,'p_asso','parser.py',351),
  ('asso -> >','asso',1,'p_asso','parser.py',352),
  ('ifStatement -> IF ( intExpr asso intExpr ) { programBlock }','ifStatement',9,'p_ifStatement','parser.py',357),
  ('ifStatement -> IF ( intExpr asso intExpr ) { programBlock } ELSE { programBlock }','ifStatement',13,'p_ifStatement','parser.py',358),
  ('qbitUnitaryStatement -> uGate < qubitListExpr > ;','qbitUnitaryStatement',5,'p_qbitUnitaryStatement','parser.py',365),
  ('qbitUnitaryStatement -> uGate ( qubitListExpr ) ;','qbitUnitaryStatement',5,'p_qbitUnitaryStatement','parser.py',366),
  ('qbitUnitaryStatement -> rGate < intExpr , qubitListExpr > ;','qbitUnitaryStatement',7,'p_qbitUnitaryStatement','parser.py',367),
  ('qbitUnitaryStatement -> rGate ( intExpr , qubitListExpr ) ;','qbitUnitaryStatement',7,'p_qbitUnitaryStatement','parser.py',368),
  ('qbitUnitaryStatement -> rxyGate ( intExpr , intExpr , qubitListExpr ) ;','qbitUnitaryStatement',9,'p_qbitUnitaryStatement','parser.py',369),
  ('qbitUnitaryStatement -> rxyGate < intExpr , intExpr , qubitListExpr > ;','qbitUnitaryStatement',9,'p_qbitUnitaryStatement','parser.py',370),
  ('rxyGate -> RXY','rxyGate',1,'p_rxyGate','parser.py',385),
  ('rGate -> RX','rGate',1,'p_rGate','parser.py',389),
  ('rGate -> RY','rGate',1,'p_rGate','parser.py',390),
  ('rGate -> RZ','rGate',1,'p_rGate','parser.py',391),
  ('uGate -> H','uGate',1,'p_uGate','parser.py',395),
  ('uGate -> X','uGate',1,'p_uGate','parser.py',396),
  ('uGate -> Y','uGate',1,'p_uGate','parser.py',397),
  ('uGate -> Z','uGate',1,'p_uGate','parser.py',398),
  ('uGate -> S','uGate',1,'p_uGate','parser.py',399),
  ('uGate -> T','uGate',1,'p_uGate','parser.py',400),
  ('uGate -> SD','uGate',1,'p_uGate','parser.py',401),
  ('uGate -> TD','uGate',1,'p_uGate','parser.py',402),
  ('uGate -> X2P','uGate',1,'p_uGate','parser.py',403),
  ('uGate -> X2M','uGate',1,'p_uGate','parser.py',404),
  ('uGate -> Y2P','uGate',1,'p_uGate','parser.py',405),
  ('uGate -> Y2M','uGate',1,'p_uGate','parser.py',406),
  ('uGate -> CZ','uGate',1,'p_uGate','parser.py',407),
  ('uGate -> CNOT','uGate',1,'p_uGate','parser.py',408),
  ('uGate -> CX','uGate',1,'p_uGate','parser.py',409),
  ('uGate -> CY','uGate',1,'p_uGate','parser.py',410),
  ('uGate -> ID','uGate',1,'p_uGate','parser.py',411),
  ('measureStatement -> M < qubitExpr > ;','measureStatement',5,'p_measureStatement','parser.py',417),
  ('measureStatement -> M ( qubitExpr ) ;','measureStatement',5,'p_measureStatement','parser.py',418),
  ('emptyStatement -> <empty>','emptyStatement',0,'p_emptyStatement','parser.py',423),
]
