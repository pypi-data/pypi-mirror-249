# Copyright Contributors to the Testing Farm project.
# SPDX-License-Identifier: Apache-2.0

"""
Trigger a reboot of a given request.

.. note::

   Task MUST be aware of the possibility of another task performing the same job at the same time. All changes
   MUST preserve consistent and restartable state.
"""

import datetime
import threading
from typing import Dict, Union, cast

import gluetool.log
import sqlalchemy.orm.session

from ..db import DB
from ..drivers import PoolData, ProvisioningProgress, ProvisioningState
from ..guest import GuestState
from . import _ROOT_LOGGER, RESCHEDULE, DoerReturnType, DoerType, ProvisioningTailHandler, TaskCall
from . import Workspace as _Workspace
from . import dispatch_preparing_pre_connect, get_guest_logger, step, task, task_core


class Workspace(_Workspace):
    """
    Workspace for guest reboot task.
    """

    current_pool_data: PoolData

    @step
    def entry(self) -> None:
        """
        Begin the reboot process with nice logging and loading request data and pool.
        """

        assert self.guestname

        self.handle_success('entered-task')

        self.load_guest_request(self.guestname, state=GuestState.READY)
        self.load_gr_pool()

    @step
    def query_driver(self) -> None:
        """
        Query pool driver to trigger a reboot.
        """

        assert self.gr
        assert self.pool

        r = self.pool.reboot_guest(self.logger, self.session, self.gr)

        if r.is_error:
            self.result = self.handle_error(r, 'failed to trigger guest reboot')
            return

    @step
    def exit(self) -> None:
        """
        Wrap up the routing process by updating metrics & final logging.
        """

        self.result = self.handle_success('finished-task')

    @classmethod
    def create(
        cls,
        logger: gluetool.log.ContextAdapter,
        db: DB,
        session: sqlalchemy.orm.session.Session,
        cancel: threading.Event,
        guestname: str
    ) -> 'Workspace':
        """
        Create workspace.

        :param logger: logger to use for logging.
        :param db: DB instance to use for DB access.
        :param session: DB session to use for DB access.
        :param cancel: when set, task is expected to cancel its work and undo changes it performed.
        :param guestname: name of the request to process.
        :returns: newly created workspace.
        """

        return cls(logger, session, cancel, db=db, guestname=guestname, task='reboot-guest')

    @classmethod
    def reboot_guest(
        cls,
        logger: gluetool.log.ContextAdapter,
        db: DB,
        session: sqlalchemy.orm.session.Session,
        cancel: threading.Event,
        guestname: str
    ) -> DoerReturnType:
        """
        Inspect the provisioning progress of a given request, and update info Artemis holds for this request.

        :param logger: logger to use for logging.
        :param db: DB instance to use for DB access.
        :param session: DB session to use for DB access.
        :param cancel: when set, task is expected to cancel its work and undo changes it performed.
        :param guestname: name of the request to process.
        :returns: task result.
        """

        return cls.create(logger, db, session, cancel, guestname) \
            .entry() \
            .mark_note_poolname() \
            .query_driver() \
            .exit() \
            .final_result


@task(tail_handler=ProvisioningTailHandler(GuestState.READY, GuestState.ERROR))
def reboot_guest(guestname: str) -> None:
    """
    Update guest request provisioning progress.

    :param guestname: name of the request to process.
    """

    task_core(
        cast(DoerType, Workspace.reboot_guest),
        logger=get_guest_logger('reboot-guest', _ROOT_LOGGER, guestname),
        doer_args=(guestname,)
    )
